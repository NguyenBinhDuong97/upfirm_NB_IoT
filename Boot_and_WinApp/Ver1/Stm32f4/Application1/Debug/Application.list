
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e8  08010188  08010188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08012870  08012870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012898  08012898  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08012898  08012898  00012898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128a0  080128a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128a0  080128a0  000128a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128a4  080128a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080128a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080128b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080128b4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009568  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ce  00000000  00000000  000295a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0002ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  0002b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fbbe  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000854d  00000000  00000000  0004b3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1a5a  00000000  00000000  0005394b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001153a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a0c  00000000  00000000  001153f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08010188 <__do_global_dtors_aux>:
 8010188:	b510      	push	{r4, lr}
 801018a:	4c05      	ldr	r4, [pc, #20]	; (80101a0 <__do_global_dtors_aux+0x18>)
 801018c:	7823      	ldrb	r3, [r4, #0]
 801018e:	b933      	cbnz	r3, 801019e <__do_global_dtors_aux+0x16>
 8010190:	4b04      	ldr	r3, [pc, #16]	; (80101a4 <__do_global_dtors_aux+0x1c>)
 8010192:	b113      	cbz	r3, 801019a <__do_global_dtors_aux+0x12>
 8010194:	4804      	ldr	r0, [pc, #16]	; (80101a8 <__do_global_dtors_aux+0x20>)
 8010196:	f3af 8000 	nop.w
 801019a:	2301      	movs	r3, #1
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	bd10      	pop	{r4, pc}
 80101a0:	2000000c 	.word	0x2000000c
 80101a4:	00000000 	.word	0x00000000
 80101a8:	08012858 	.word	0x08012858

080101ac <frame_dummy>:
 80101ac:	b508      	push	{r3, lr}
 80101ae:	4b03      	ldr	r3, [pc, #12]	; (80101bc <frame_dummy+0x10>)
 80101b0:	b11b      	cbz	r3, 80101ba <frame_dummy+0xe>
 80101b2:	4903      	ldr	r1, [pc, #12]	; (80101c0 <frame_dummy+0x14>)
 80101b4:	4803      	ldr	r0, [pc, #12]	; (80101c4 <frame_dummy+0x18>)
 80101b6:	f3af 8000 	nop.w
 80101ba:	bd08      	pop	{r3, pc}
 80101bc:	00000000 	.word	0x00000000
 80101c0:	20000010 	.word	0x20000010
 80101c4:	08012858 	.word	0x08012858

080101c8 <__aeabi_uldivmod>:
 80101c8:	b953      	cbnz	r3, 80101e0 <__aeabi_uldivmod+0x18>
 80101ca:	b94a      	cbnz	r2, 80101e0 <__aeabi_uldivmod+0x18>
 80101cc:	2900      	cmp	r1, #0
 80101ce:	bf08      	it	eq
 80101d0:	2800      	cmpeq	r0, #0
 80101d2:	bf1c      	itt	ne
 80101d4:	f04f 31ff 	movne.w	r1, #4294967295
 80101d8:	f04f 30ff 	movne.w	r0, #4294967295
 80101dc:	f000 b96e 	b.w	80104bc <__aeabi_idiv0>
 80101e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80101e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80101e8:	f000 f806 	bl	80101f8 <__udivmoddi4>
 80101ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80101f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80101f4:	b004      	add	sp, #16
 80101f6:	4770      	bx	lr

080101f8 <__udivmoddi4>:
 80101f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101fc:	9d08      	ldr	r5, [sp, #32]
 80101fe:	4604      	mov	r4, r0
 8010200:	468c      	mov	ip, r1
 8010202:	2b00      	cmp	r3, #0
 8010204:	f040 8083 	bne.w	801030e <__udivmoddi4+0x116>
 8010208:	428a      	cmp	r2, r1
 801020a:	4617      	mov	r7, r2
 801020c:	d947      	bls.n	801029e <__udivmoddi4+0xa6>
 801020e:	fab2 f282 	clz	r2, r2
 8010212:	b142      	cbz	r2, 8010226 <__udivmoddi4+0x2e>
 8010214:	f1c2 0020 	rsb	r0, r2, #32
 8010218:	fa24 f000 	lsr.w	r0, r4, r0
 801021c:	4091      	lsls	r1, r2
 801021e:	4097      	lsls	r7, r2
 8010220:	ea40 0c01 	orr.w	ip, r0, r1
 8010224:	4094      	lsls	r4, r2
 8010226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 801022a:	0c23      	lsrs	r3, r4, #16
 801022c:	fbbc f6f8 	udiv	r6, ip, r8
 8010230:	fa1f fe87 	uxth.w	lr, r7
 8010234:	fb08 c116 	mls	r1, r8, r6, ip
 8010238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801023c:	fb06 f10e 	mul.w	r1, r6, lr
 8010240:	4299      	cmp	r1, r3
 8010242:	d909      	bls.n	8010258 <__udivmoddi4+0x60>
 8010244:	18fb      	adds	r3, r7, r3
 8010246:	f106 30ff 	add.w	r0, r6, #4294967295
 801024a:	f080 8119 	bcs.w	8010480 <__udivmoddi4+0x288>
 801024e:	4299      	cmp	r1, r3
 8010250:	f240 8116 	bls.w	8010480 <__udivmoddi4+0x288>
 8010254:	3e02      	subs	r6, #2
 8010256:	443b      	add	r3, r7
 8010258:	1a5b      	subs	r3, r3, r1
 801025a:	b2a4      	uxth	r4, r4
 801025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8010260:	fb08 3310 	mls	r3, r8, r0, r3
 8010264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010268:	fb00 fe0e 	mul.w	lr, r0, lr
 801026c:	45a6      	cmp	lr, r4
 801026e:	d909      	bls.n	8010284 <__udivmoddi4+0x8c>
 8010270:	193c      	adds	r4, r7, r4
 8010272:	f100 33ff 	add.w	r3, r0, #4294967295
 8010276:	f080 8105 	bcs.w	8010484 <__udivmoddi4+0x28c>
 801027a:	45a6      	cmp	lr, r4
 801027c:	f240 8102 	bls.w	8010484 <__udivmoddi4+0x28c>
 8010280:	3802      	subs	r0, #2
 8010282:	443c      	add	r4, r7
 8010284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8010288:	eba4 040e 	sub.w	r4, r4, lr
 801028c:	2600      	movs	r6, #0
 801028e:	b11d      	cbz	r5, 8010298 <__udivmoddi4+0xa0>
 8010290:	40d4      	lsrs	r4, r2
 8010292:	2300      	movs	r3, #0
 8010294:	e9c5 4300 	strd	r4, r3, [r5]
 8010298:	4631      	mov	r1, r6
 801029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029e:	b902      	cbnz	r2, 80102a2 <__udivmoddi4+0xaa>
 80102a0:	deff      	udf	#255	; 0xff
 80102a2:	fab2 f282 	clz	r2, r2
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d150      	bne.n	801034c <__udivmoddi4+0x154>
 80102aa:	1bcb      	subs	r3, r1, r7
 80102ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80102b0:	fa1f f887 	uxth.w	r8, r7
 80102b4:	2601      	movs	r6, #1
 80102b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80102ba:	0c21      	lsrs	r1, r4, #16
 80102bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80102c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80102c4:	fb08 f30c 	mul.w	r3, r8, ip
 80102c8:	428b      	cmp	r3, r1
 80102ca:	d907      	bls.n	80102dc <__udivmoddi4+0xe4>
 80102cc:	1879      	adds	r1, r7, r1
 80102ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80102d2:	d202      	bcs.n	80102da <__udivmoddi4+0xe2>
 80102d4:	428b      	cmp	r3, r1
 80102d6:	f200 80e9 	bhi.w	80104ac <__udivmoddi4+0x2b4>
 80102da:	4684      	mov	ip, r0
 80102dc:	1ac9      	subs	r1, r1, r3
 80102de:	b2a3      	uxth	r3, r4
 80102e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80102e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80102e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80102ec:	fb08 f800 	mul.w	r8, r8, r0
 80102f0:	45a0      	cmp	r8, r4
 80102f2:	d907      	bls.n	8010304 <__udivmoddi4+0x10c>
 80102f4:	193c      	adds	r4, r7, r4
 80102f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80102fa:	d202      	bcs.n	8010302 <__udivmoddi4+0x10a>
 80102fc:	45a0      	cmp	r8, r4
 80102fe:	f200 80d9 	bhi.w	80104b4 <__udivmoddi4+0x2bc>
 8010302:	4618      	mov	r0, r3
 8010304:	eba4 0408 	sub.w	r4, r4, r8
 8010308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 801030c:	e7bf      	b.n	801028e <__udivmoddi4+0x96>
 801030e:	428b      	cmp	r3, r1
 8010310:	d909      	bls.n	8010326 <__udivmoddi4+0x12e>
 8010312:	2d00      	cmp	r5, #0
 8010314:	f000 80b1 	beq.w	801047a <__udivmoddi4+0x282>
 8010318:	2600      	movs	r6, #0
 801031a:	e9c5 0100 	strd	r0, r1, [r5]
 801031e:	4630      	mov	r0, r6
 8010320:	4631      	mov	r1, r6
 8010322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010326:	fab3 f683 	clz	r6, r3
 801032a:	2e00      	cmp	r6, #0
 801032c:	d14a      	bne.n	80103c4 <__udivmoddi4+0x1cc>
 801032e:	428b      	cmp	r3, r1
 8010330:	d302      	bcc.n	8010338 <__udivmoddi4+0x140>
 8010332:	4282      	cmp	r2, r0
 8010334:	f200 80b8 	bhi.w	80104a8 <__udivmoddi4+0x2b0>
 8010338:	1a84      	subs	r4, r0, r2
 801033a:	eb61 0103 	sbc.w	r1, r1, r3
 801033e:	2001      	movs	r0, #1
 8010340:	468c      	mov	ip, r1
 8010342:	2d00      	cmp	r5, #0
 8010344:	d0a8      	beq.n	8010298 <__udivmoddi4+0xa0>
 8010346:	e9c5 4c00 	strd	r4, ip, [r5]
 801034a:	e7a5      	b.n	8010298 <__udivmoddi4+0xa0>
 801034c:	f1c2 0320 	rsb	r3, r2, #32
 8010350:	fa20 f603 	lsr.w	r6, r0, r3
 8010354:	4097      	lsls	r7, r2
 8010356:	fa01 f002 	lsl.w	r0, r1, r2
 801035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 801035e:	40d9      	lsrs	r1, r3
 8010360:	4330      	orrs	r0, r6
 8010362:	0c03      	lsrs	r3, r0, #16
 8010364:	fbb1 f6fe 	udiv	r6, r1, lr
 8010368:	fa1f f887 	uxth.w	r8, r7
 801036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8010370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010374:	fb06 f108 	mul.w	r1, r6, r8
 8010378:	4299      	cmp	r1, r3
 801037a:	fa04 f402 	lsl.w	r4, r4, r2
 801037e:	d909      	bls.n	8010394 <__udivmoddi4+0x19c>
 8010380:	18fb      	adds	r3, r7, r3
 8010382:	f106 3cff 	add.w	ip, r6, #4294967295
 8010386:	f080 808d 	bcs.w	80104a4 <__udivmoddi4+0x2ac>
 801038a:	4299      	cmp	r1, r3
 801038c:	f240 808a 	bls.w	80104a4 <__udivmoddi4+0x2ac>
 8010390:	3e02      	subs	r6, #2
 8010392:	443b      	add	r3, r7
 8010394:	1a5b      	subs	r3, r3, r1
 8010396:	b281      	uxth	r1, r0
 8010398:	fbb3 f0fe 	udiv	r0, r3, lr
 801039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80103a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80103a4:	fb00 f308 	mul.w	r3, r0, r8
 80103a8:	428b      	cmp	r3, r1
 80103aa:	d907      	bls.n	80103bc <__udivmoddi4+0x1c4>
 80103ac:	1879      	adds	r1, r7, r1
 80103ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80103b2:	d273      	bcs.n	801049c <__udivmoddi4+0x2a4>
 80103b4:	428b      	cmp	r3, r1
 80103b6:	d971      	bls.n	801049c <__udivmoddi4+0x2a4>
 80103b8:	3802      	subs	r0, #2
 80103ba:	4439      	add	r1, r7
 80103bc:	1acb      	subs	r3, r1, r3
 80103be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80103c2:	e778      	b.n	80102b6 <__udivmoddi4+0xbe>
 80103c4:	f1c6 0c20 	rsb	ip, r6, #32
 80103c8:	fa03 f406 	lsl.w	r4, r3, r6
 80103cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80103d0:	431c      	orrs	r4, r3
 80103d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80103d6:	fa01 f306 	lsl.w	r3, r1, r6
 80103da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80103de:	fa21 f10c 	lsr.w	r1, r1, ip
 80103e2:	431f      	orrs	r7, r3
 80103e4:	0c3b      	lsrs	r3, r7, #16
 80103e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80103ea:	fa1f f884 	uxth.w	r8, r4
 80103ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80103f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80103f6:	fb09 fa08 	mul.w	sl, r9, r8
 80103fa:	458a      	cmp	sl, r1
 80103fc:	fa02 f206 	lsl.w	r2, r2, r6
 8010400:	fa00 f306 	lsl.w	r3, r0, r6
 8010404:	d908      	bls.n	8010418 <__udivmoddi4+0x220>
 8010406:	1861      	adds	r1, r4, r1
 8010408:	f109 30ff 	add.w	r0, r9, #4294967295
 801040c:	d248      	bcs.n	80104a0 <__udivmoddi4+0x2a8>
 801040e:	458a      	cmp	sl, r1
 8010410:	d946      	bls.n	80104a0 <__udivmoddi4+0x2a8>
 8010412:	f1a9 0902 	sub.w	r9, r9, #2
 8010416:	4421      	add	r1, r4
 8010418:	eba1 010a 	sub.w	r1, r1, sl
 801041c:	b2bf      	uxth	r7, r7
 801041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8010422:	fb0e 1110 	mls	r1, lr, r0, r1
 8010426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801042a:	fb00 f808 	mul.w	r8, r0, r8
 801042e:	45b8      	cmp	r8, r7
 8010430:	d907      	bls.n	8010442 <__udivmoddi4+0x24a>
 8010432:	19e7      	adds	r7, r4, r7
 8010434:	f100 31ff 	add.w	r1, r0, #4294967295
 8010438:	d22e      	bcs.n	8010498 <__udivmoddi4+0x2a0>
 801043a:	45b8      	cmp	r8, r7
 801043c:	d92c      	bls.n	8010498 <__udivmoddi4+0x2a0>
 801043e:	3802      	subs	r0, #2
 8010440:	4427      	add	r7, r4
 8010442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010446:	eba7 0708 	sub.w	r7, r7, r8
 801044a:	fba0 8902 	umull	r8, r9, r0, r2
 801044e:	454f      	cmp	r7, r9
 8010450:	46c6      	mov	lr, r8
 8010452:	4649      	mov	r1, r9
 8010454:	d31a      	bcc.n	801048c <__udivmoddi4+0x294>
 8010456:	d017      	beq.n	8010488 <__udivmoddi4+0x290>
 8010458:	b15d      	cbz	r5, 8010472 <__udivmoddi4+0x27a>
 801045a:	ebb3 020e 	subs.w	r2, r3, lr
 801045e:	eb67 0701 	sbc.w	r7, r7, r1
 8010462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8010466:	40f2      	lsrs	r2, r6
 8010468:	ea4c 0202 	orr.w	r2, ip, r2
 801046c:	40f7      	lsrs	r7, r6
 801046e:	e9c5 2700 	strd	r2, r7, [r5]
 8010472:	2600      	movs	r6, #0
 8010474:	4631      	mov	r1, r6
 8010476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801047a:	462e      	mov	r6, r5
 801047c:	4628      	mov	r0, r5
 801047e:	e70b      	b.n	8010298 <__udivmoddi4+0xa0>
 8010480:	4606      	mov	r6, r0
 8010482:	e6e9      	b.n	8010258 <__udivmoddi4+0x60>
 8010484:	4618      	mov	r0, r3
 8010486:	e6fd      	b.n	8010284 <__udivmoddi4+0x8c>
 8010488:	4543      	cmp	r3, r8
 801048a:	d2e5      	bcs.n	8010458 <__udivmoddi4+0x260>
 801048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8010490:	eb69 0104 	sbc.w	r1, r9, r4
 8010494:	3801      	subs	r0, #1
 8010496:	e7df      	b.n	8010458 <__udivmoddi4+0x260>
 8010498:	4608      	mov	r0, r1
 801049a:	e7d2      	b.n	8010442 <__udivmoddi4+0x24a>
 801049c:	4660      	mov	r0, ip
 801049e:	e78d      	b.n	80103bc <__udivmoddi4+0x1c4>
 80104a0:	4681      	mov	r9, r0
 80104a2:	e7b9      	b.n	8010418 <__udivmoddi4+0x220>
 80104a4:	4666      	mov	r6, ip
 80104a6:	e775      	b.n	8010394 <__udivmoddi4+0x19c>
 80104a8:	4630      	mov	r0, r6
 80104aa:	e74a      	b.n	8010342 <__udivmoddi4+0x14a>
 80104ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80104b0:	4439      	add	r1, r7
 80104b2:	e713      	b.n	80102dc <__udivmoddi4+0xe4>
 80104b4:	3802      	subs	r0, #2
 80104b6:	443c      	add	r4, r7
 80104b8:	e724      	b.n	8010304 <__udivmoddi4+0x10c>
 80104ba:	bf00      	nop

080104bc <__aeabi_idiv0>:
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop

080104c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  SCB->VTOR = 0x08010000;
 80104c4:	4b0d      	ldr	r3, [pc, #52]	; (80104fc <main+0x3c>)
 80104c6:	4a0e      	ldr	r2, [pc, #56]	; (8010500 <main+0x40>)
 80104c8:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80104ca:	f000 f9df 	bl	801088c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80104ce:	f000 f81f 	bl	8010510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80104d2:	f000 f8a5 	bl	8010620 <MX_GPIO_Init>
  MX_UART4_Init();
 80104d6:	f000 f879 	bl	80105cc <MX_UART4_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	HAL_UART_Transmit(&huart4, (uint8_t*)"This is ver 4\r\n", strlen( (char*)"This is ver 4\r\n"), 500);
 80104da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80104de:	220f      	movs	r2, #15
 80104e0:	4908      	ldr	r1, [pc, #32]	; (8010504 <main+0x44>)
 80104e2:	4809      	ldr	r0, [pc, #36]	; (8010508 <main+0x48>)
 80104e4:	f001 fa71 	bl	80119ca <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin|LED2_Pin);
 80104e8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80104ec:	4807      	ldr	r0, [pc, #28]	; (801050c <main+0x4c>)
 80104ee:	f000 fdbc 	bl	801106a <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80104f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80104f6:	f000 fa3b 	bl	8010970 <HAL_Delay>
	HAL_UART_Transmit(&huart4, (uint8_t*)"This is ver 4\r\n", strlen( (char*)"This is ver 4\r\n"), 500);
 80104fa:	e7ee      	b.n	80104da <main+0x1a>
 80104fc:	e000ed00 	.word	0xe000ed00
 8010500:	08010000 	.word	0x08010000
 8010504:	08012870 	.word	0x08012870
 8010508:	20000028 	.word	0x20000028
 801050c:	40020c00 	.word	0x40020c00

08010510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b094      	sub	sp, #80	; 0x50
 8010514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010516:	f107 0320 	add.w	r3, r7, #32
 801051a:	2230      	movs	r2, #48	; 0x30
 801051c:	2100      	movs	r1, #0
 801051e:	4618      	mov	r0, r3
 8010520:	f002 f992 	bl	8012848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010524:	f107 030c 	add.w	r3, r7, #12
 8010528:	2200      	movs	r2, #0
 801052a:	601a      	str	r2, [r3, #0]
 801052c:	605a      	str	r2, [r3, #4]
 801052e:	609a      	str	r2, [r3, #8]
 8010530:	60da      	str	r2, [r3, #12]
 8010532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010534:	2300      	movs	r3, #0
 8010536:	60bb      	str	r3, [r7, #8]
 8010538:	4b22      	ldr	r3, [pc, #136]	; (80105c4 <SystemClock_Config+0xb4>)
 801053a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801053c:	4a21      	ldr	r2, [pc, #132]	; (80105c4 <SystemClock_Config+0xb4>)
 801053e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010542:	6413      	str	r3, [r2, #64]	; 0x40
 8010544:	4b1f      	ldr	r3, [pc, #124]	; (80105c4 <SystemClock_Config+0xb4>)
 8010546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801054c:	60bb      	str	r3, [r7, #8]
 801054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010550:	2300      	movs	r3, #0
 8010552:	607b      	str	r3, [r7, #4]
 8010554:	4b1c      	ldr	r3, [pc, #112]	; (80105c8 <SystemClock_Config+0xb8>)
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a1b      	ldr	r2, [pc, #108]	; (80105c8 <SystemClock_Config+0xb8>)
 801055a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801055e:	6013      	str	r3, [r2, #0]
 8010560:	4b19      	ldr	r3, [pc, #100]	; (80105c8 <SystemClock_Config+0xb8>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010568:	607b      	str	r3, [r7, #4]
 801056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801056c:	2302      	movs	r3, #2
 801056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010570:	2301      	movs	r3, #1
 8010572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010574:	2310      	movs	r3, #16
 8010576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8010578:	2300      	movs	r3, #0
 801057a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801057c:	f107 0320 	add.w	r3, r7, #32
 8010580:	4618      	mov	r0, r3
 8010582:	f000 fd8d 	bl	80110a0 <HAL_RCC_OscConfig>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d001      	beq.n	8010590 <SystemClock_Config+0x80>
  {
    Error_Handler();
 801058c:	f000 f88c 	bl	80106a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010590:	230f      	movs	r3, #15
 8010592:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8010594:	2300      	movs	r3, #0
 8010596:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010598:	2300      	movs	r3, #0
 801059a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801059c:	2300      	movs	r3, #0
 801059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80105a0:	2300      	movs	r3, #0
 80105a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80105a4:	f107 030c 	add.w	r3, r7, #12
 80105a8:	2100      	movs	r1, #0
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 fff0 	bl	8011590 <HAL_RCC_ClockConfig>
 80105b0:	4603      	mov	r3, r0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d001      	beq.n	80105ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80105b6:	f000 f877 	bl	80106a8 <Error_Handler>
  }
}
 80105ba:	bf00      	nop
 80105bc:	3750      	adds	r7, #80	; 0x50
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	40023800 	.word	0x40023800
 80105c8:	40007000 	.word	0x40007000

080105cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80105d0:	4b11      	ldr	r3, [pc, #68]	; (8010618 <MX_UART4_Init+0x4c>)
 80105d2:	4a12      	ldr	r2, [pc, #72]	; (801061c <MX_UART4_Init+0x50>)
 80105d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80105d6:	4b10      	ldr	r3, [pc, #64]	; (8010618 <MX_UART4_Init+0x4c>)
 80105d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80105dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80105de:	4b0e      	ldr	r3, [pc, #56]	; (8010618 <MX_UART4_Init+0x4c>)
 80105e0:	2200      	movs	r2, #0
 80105e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80105e4:	4b0c      	ldr	r3, [pc, #48]	; (8010618 <MX_UART4_Init+0x4c>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80105ea:	4b0b      	ldr	r3, [pc, #44]	; (8010618 <MX_UART4_Init+0x4c>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80105f0:	4b09      	ldr	r3, [pc, #36]	; (8010618 <MX_UART4_Init+0x4c>)
 80105f2:	220c      	movs	r2, #12
 80105f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80105f6:	4b08      	ldr	r3, [pc, #32]	; (8010618 <MX_UART4_Init+0x4c>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80105fc:	4b06      	ldr	r3, [pc, #24]	; (8010618 <MX_UART4_Init+0x4c>)
 80105fe:	2200      	movs	r2, #0
 8010600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8010602:	4805      	ldr	r0, [pc, #20]	; (8010618 <MX_UART4_Init+0x4c>)
 8010604:	f001 f994 	bl	8011930 <HAL_UART_Init>
 8010608:	4603      	mov	r3, r0
 801060a:	2b00      	cmp	r3, #0
 801060c:	d001      	beq.n	8010612 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 801060e:	f000 f84b 	bl	80106a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8010612:	bf00      	nop
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	20000028 	.word	0x20000028
 801061c:	40004c00 	.word	0x40004c00

08010620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b088      	sub	sp, #32
 8010624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010626:	f107 030c 	add.w	r3, r7, #12
 801062a:	2200      	movs	r2, #0
 801062c:	601a      	str	r2, [r3, #0]
 801062e:	605a      	str	r2, [r3, #4]
 8010630:	609a      	str	r2, [r3, #8]
 8010632:	60da      	str	r2, [r3, #12]
 8010634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010636:	2300      	movs	r3, #0
 8010638:	60bb      	str	r3, [r7, #8]
 801063a:	4b19      	ldr	r3, [pc, #100]	; (80106a0 <MX_GPIO_Init+0x80>)
 801063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801063e:	4a18      	ldr	r2, [pc, #96]	; (80106a0 <MX_GPIO_Init+0x80>)
 8010640:	f043 0301 	orr.w	r3, r3, #1
 8010644:	6313      	str	r3, [r2, #48]	; 0x30
 8010646:	4b16      	ldr	r3, [pc, #88]	; (80106a0 <MX_GPIO_Init+0x80>)
 8010648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801064a:	f003 0301 	and.w	r3, r3, #1
 801064e:	60bb      	str	r3, [r7, #8]
 8010650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010652:	2300      	movs	r3, #0
 8010654:	607b      	str	r3, [r7, #4]
 8010656:	4b12      	ldr	r3, [pc, #72]	; (80106a0 <MX_GPIO_Init+0x80>)
 8010658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065a:	4a11      	ldr	r2, [pc, #68]	; (80106a0 <MX_GPIO_Init+0x80>)
 801065c:	f043 0308 	orr.w	r3, r3, #8
 8010660:	6313      	str	r3, [r2, #48]	; 0x30
 8010662:	4b0f      	ldr	r3, [pc, #60]	; (80106a0 <MX_GPIO_Init+0x80>)
 8010664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010666:	f003 0308 	and.w	r3, r3, #8
 801066a:	607b      	str	r3, [r7, #4]
 801066c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 801066e:	2200      	movs	r2, #0
 8010670:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8010674:	480b      	ldr	r0, [pc, #44]	; (80106a4 <MX_GPIO_Init+0x84>)
 8010676:	f000 fcdf 	bl	8011038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 801067a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010680:	2301      	movs	r3, #1
 8010682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010684:	2300      	movs	r3, #0
 8010686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010688:	2300      	movs	r3, #0
 801068a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801068c:	f107 030c 	add.w	r3, r7, #12
 8010690:	4619      	mov	r1, r3
 8010692:	4804      	ldr	r0, [pc, #16]	; (80106a4 <MX_GPIO_Init+0x84>)
 8010694:	f000 fb34 	bl	8010d00 <HAL_GPIO_Init>

}
 8010698:	bf00      	nop
 801069a:	3720      	adds	r7, #32
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	40023800 	.word	0x40023800
 80106a4:	40020c00 	.word	0x40020c00

080106a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80106a8:	b480      	push	{r7}
 80106aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80106ac:	b672      	cpsid	i
}
 80106ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80106b0:	e7fe      	b.n	80106b0 <Error_Handler+0x8>
	...

080106b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b083      	sub	sp, #12
 80106b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80106ba:	2300      	movs	r3, #0
 80106bc:	607b      	str	r3, [r7, #4]
 80106be:	4b10      	ldr	r3, [pc, #64]	; (8010700 <HAL_MspInit+0x4c>)
 80106c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106c2:	4a0f      	ldr	r2, [pc, #60]	; (8010700 <HAL_MspInit+0x4c>)
 80106c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80106c8:	6453      	str	r3, [r2, #68]	; 0x44
 80106ca:	4b0d      	ldr	r3, [pc, #52]	; (8010700 <HAL_MspInit+0x4c>)
 80106cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80106d2:	607b      	str	r3, [r7, #4]
 80106d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80106d6:	2300      	movs	r3, #0
 80106d8:	603b      	str	r3, [r7, #0]
 80106da:	4b09      	ldr	r3, [pc, #36]	; (8010700 <HAL_MspInit+0x4c>)
 80106dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106de:	4a08      	ldr	r2, [pc, #32]	; (8010700 <HAL_MspInit+0x4c>)
 80106e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106e4:	6413      	str	r3, [r2, #64]	; 0x40
 80106e6:	4b06      	ldr	r3, [pc, #24]	; (8010700 <HAL_MspInit+0x4c>)
 80106e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106ee:	603b      	str	r3, [r7, #0]
 80106f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80106f2:	bf00      	nop
 80106f4:	370c      	adds	r7, #12
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	40023800 	.word	0x40023800

08010704 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b08a      	sub	sp, #40	; 0x28
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801070c:	f107 0314 	add.w	r3, r7, #20
 8010710:	2200      	movs	r2, #0
 8010712:	601a      	str	r2, [r3, #0]
 8010714:	605a      	str	r2, [r3, #4]
 8010716:	609a      	str	r2, [r3, #8]
 8010718:	60da      	str	r2, [r3, #12]
 801071a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a1d      	ldr	r2, [pc, #116]	; (8010798 <HAL_UART_MspInit+0x94>)
 8010722:	4293      	cmp	r3, r2
 8010724:	d133      	bne.n	801078e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8010726:	2300      	movs	r3, #0
 8010728:	613b      	str	r3, [r7, #16]
 801072a:	4b1c      	ldr	r3, [pc, #112]	; (801079c <HAL_UART_MspInit+0x98>)
 801072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801072e:	4a1b      	ldr	r2, [pc, #108]	; (801079c <HAL_UART_MspInit+0x98>)
 8010730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010734:	6413      	str	r3, [r2, #64]	; 0x40
 8010736:	4b19      	ldr	r3, [pc, #100]	; (801079c <HAL_UART_MspInit+0x98>)
 8010738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801073a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801073e:	613b      	str	r3, [r7, #16]
 8010740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	4b15      	ldr	r3, [pc, #84]	; (801079c <HAL_UART_MspInit+0x98>)
 8010748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801074a:	4a14      	ldr	r2, [pc, #80]	; (801079c <HAL_UART_MspInit+0x98>)
 801074c:	f043 0301 	orr.w	r3, r3, #1
 8010750:	6313      	str	r3, [r2, #48]	; 0x30
 8010752:	4b12      	ldr	r3, [pc, #72]	; (801079c <HAL_UART_MspInit+0x98>)
 8010754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010756:	f003 0301 	and.w	r3, r3, #1
 801075a:	60fb      	str	r3, [r7, #12]
 801075c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801075e:	2303      	movs	r3, #3
 8010760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010762:	2302      	movs	r3, #2
 8010764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010766:	2301      	movs	r3, #1
 8010768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801076a:	2303      	movs	r3, #3
 801076c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 801076e:	2308      	movs	r3, #8
 8010770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010772:	f107 0314 	add.w	r3, r7, #20
 8010776:	4619      	mov	r1, r3
 8010778:	4809      	ldr	r0, [pc, #36]	; (80107a0 <HAL_UART_MspInit+0x9c>)
 801077a:	f000 fac1 	bl	8010d00 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 801077e:	2200      	movs	r2, #0
 8010780:	2100      	movs	r1, #0
 8010782:	2034      	movs	r0, #52	; 0x34
 8010784:	f000 f9f3 	bl	8010b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8010788:	2034      	movs	r0, #52	; 0x34
 801078a:	f000 fa0c 	bl	8010ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 801078e:	bf00      	nop
 8010790:	3728      	adds	r7, #40	; 0x28
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	40004c00 	.word	0x40004c00
 801079c:	40023800 	.word	0x40023800
 80107a0:	40020000 	.word	0x40020000

080107a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80107a4:	b480      	push	{r7}
 80107a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80107a8:	e7fe      	b.n	80107a8 <NMI_Handler+0x4>

080107aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80107aa:	b480      	push	{r7}
 80107ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80107ae:	e7fe      	b.n	80107ae <HardFault_Handler+0x4>

080107b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80107b0:	b480      	push	{r7}
 80107b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80107b4:	e7fe      	b.n	80107b4 <MemManage_Handler+0x4>

080107b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80107b6:	b480      	push	{r7}
 80107b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80107ba:	e7fe      	b.n	80107ba <BusFault_Handler+0x4>

080107bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80107bc:	b480      	push	{r7}
 80107be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80107c0:	e7fe      	b.n	80107c0 <UsageFault_Handler+0x4>

080107c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80107c2:	b480      	push	{r7}
 80107c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80107c6:	bf00      	nop
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr

080107d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80107d0:	b480      	push	{r7}
 80107d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80107d4:	bf00      	nop
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr

080107de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80107de:	b480      	push	{r7}
 80107e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80107e2:	bf00      	nop
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80107f0:	f000 f89e 	bl	8010930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80107f4:	bf00      	nop
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80107fc:	4802      	ldr	r0, [pc, #8]	; (8010808 <UART4_IRQHandler+0x10>)
 80107fe:	f001 f977 	bl	8011af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8010802:	bf00      	nop
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	20000028 	.word	0x20000028

0801080c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801080c:	b480      	push	{r7}
 801080e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010810:	4b07      	ldr	r3, [pc, #28]	; (8010830 <SystemInit+0x24>)
 8010812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010816:	4a06      	ldr	r2, [pc, #24]	; (8010830 <SystemInit+0x24>)
 8010818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801081c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8010820:	4b03      	ldr	r3, [pc, #12]	; (8010830 <SystemInit+0x24>)
 8010822:	4a04      	ldr	r2, [pc, #16]	; (8010834 <SystemInit+0x28>)
 8010824:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8010826:	bf00      	nop
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	e000ed00 	.word	0xe000ed00
 8010834:	08010000 	.word	0x08010000

08010838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010870 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801083c:	480d      	ldr	r0, [pc, #52]	; (8010874 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801083e:	490e      	ldr	r1, [pc, #56]	; (8010878 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8010840:	4a0e      	ldr	r2, [pc, #56]	; (801087c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8010842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010844:	e002      	b.n	801084c <LoopCopyDataInit>

08010846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801084a:	3304      	adds	r3, #4

0801084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8010850:	d3f9      	bcc.n	8010846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8010852:	4a0b      	ldr	r2, [pc, #44]	; (8010880 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010854:	4c0b      	ldr	r4, [pc, #44]	; (8010884 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010858:	e001      	b.n	801085e <LoopFillZerobss>

0801085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801085c:	3204      	adds	r2, #4

0801085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8010860:	d3fb      	bcc.n	801085a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010862:	f7ff ffd3 	bl	801080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010866:	f001 ffcb 	bl	8012800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801086a:	f7ff fe29 	bl	80104c0 <main>
  bx  lr    
 801086e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8010870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010878:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 801087c:	080128a8 	.word	0x080128a8
  ldr r2, =_sbss
 8010880:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8010884:	20000070 	.word	0x20000070

08010888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010888:	e7fe      	b.n	8010888 <ADC_IRQHandler>
	...

0801088c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8010890:	4b0e      	ldr	r3, [pc, #56]	; (80108cc <HAL_Init+0x40>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a0d      	ldr	r2, [pc, #52]	; (80108cc <HAL_Init+0x40>)
 8010896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801089a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801089c:	4b0b      	ldr	r3, [pc, #44]	; (80108cc <HAL_Init+0x40>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	4a0a      	ldr	r2, [pc, #40]	; (80108cc <HAL_Init+0x40>)
 80108a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80108a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80108a8:	4b08      	ldr	r3, [pc, #32]	; (80108cc <HAL_Init+0x40>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a07      	ldr	r2, [pc, #28]	; (80108cc <HAL_Init+0x40>)
 80108ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80108b4:	2003      	movs	r0, #3
 80108b6:	f000 f94f 	bl	8010b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80108ba:	2000      	movs	r0, #0
 80108bc:	f000 f808 	bl	80108d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80108c0:	f7ff fef8 	bl	80106b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80108c4:	2300      	movs	r3, #0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	40023c00 	.word	0x40023c00

080108d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80108d8:	4b12      	ldr	r3, [pc, #72]	; (8010924 <HAL_InitTick+0x54>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	4b12      	ldr	r3, [pc, #72]	; (8010928 <HAL_InitTick+0x58>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	4619      	mov	r1, r3
 80108e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80108ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 f967 	bl	8010bc2 <HAL_SYSTICK_Config>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d001      	beq.n	80108fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80108fa:	2301      	movs	r3, #1
 80108fc:	e00e      	b.n	801091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2b0f      	cmp	r3, #15
 8010902:	d80a      	bhi.n	801091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010904:	2200      	movs	r2, #0
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	f04f 30ff 	mov.w	r0, #4294967295
 801090c:	f000 f92f 	bl	8010b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010910:	4a06      	ldr	r2, [pc, #24]	; (801092c <HAL_InitTick+0x5c>)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010916:	2300      	movs	r3, #0
 8010918:	e000      	b.n	801091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801091a:	2301      	movs	r3, #1
}
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	20000000 	.word	0x20000000
 8010928:	20000008 	.word	0x20000008
 801092c:	20000004 	.word	0x20000004

08010930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8010934:	4b06      	ldr	r3, [pc, #24]	; (8010950 <HAL_IncTick+0x20>)
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	4b06      	ldr	r3, [pc, #24]	; (8010954 <HAL_IncTick+0x24>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4413      	add	r3, r2
 8010940:	4a04      	ldr	r2, [pc, #16]	; (8010954 <HAL_IncTick+0x24>)
 8010942:	6013      	str	r3, [r2, #0]
}
 8010944:	bf00      	nop
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	20000008 	.word	0x20000008
 8010954:	2000006c 	.word	0x2000006c

08010958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010958:	b480      	push	{r7}
 801095a:	af00      	add	r7, sp, #0
  return uwTick;
 801095c:	4b03      	ldr	r3, [pc, #12]	; (801096c <HAL_GetTick+0x14>)
 801095e:	681b      	ldr	r3, [r3, #0]
}
 8010960:	4618      	mov	r0, r3
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	2000006c 	.word	0x2000006c

08010970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010978:	f7ff ffee 	bl	8010958 <HAL_GetTick>
 801097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010988:	d005      	beq.n	8010996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801098a:	4b0a      	ldr	r3, [pc, #40]	; (80109b4 <HAL_Delay+0x44>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	461a      	mov	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	4413      	add	r3, r2
 8010994:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8010996:	bf00      	nop
 8010998:	f7ff ffde 	bl	8010958 <HAL_GetTick>
 801099c:	4602      	mov	r2, r0
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	68fa      	ldr	r2, [r7, #12]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d8f7      	bhi.n	8010998 <HAL_Delay+0x28>
  {
  }
}
 80109a8:	bf00      	nop
 80109aa:	bf00      	nop
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	20000008 	.word	0x20000008

080109b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f003 0307 	and.w	r3, r3, #7
 80109c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80109c8:	4b0c      	ldr	r3, [pc, #48]	; (80109fc <__NVIC_SetPriorityGrouping+0x44>)
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80109d4:	4013      	ands	r3, r2
 80109d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80109dc:	68bb      	ldr	r3, [r7, #8]
 80109de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80109e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80109e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80109e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80109ea:	4a04      	ldr	r2, [pc, #16]	; (80109fc <__NVIC_SetPriorityGrouping+0x44>)
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	60d3      	str	r3, [r2, #12]
}
 80109f0:	bf00      	nop
 80109f2:	3714      	adds	r7, #20
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr
 80109fc:	e000ed00 	.word	0xe000ed00

08010a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8010a00:	b480      	push	{r7}
 8010a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010a04:	4b04      	ldr	r3, [pc, #16]	; (8010a18 <__NVIC_GetPriorityGrouping+0x18>)
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	0a1b      	lsrs	r3, r3, #8
 8010a0a:	f003 0307 	and.w	r3, r3, #7
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	e000ed00 	.word	0xe000ed00

08010a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010a1c:	b480      	push	{r7}
 8010a1e:	b083      	sub	sp, #12
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	4603      	mov	r3, r0
 8010a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	db0b      	blt.n	8010a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a2e:	79fb      	ldrb	r3, [r7, #7]
 8010a30:	f003 021f 	and.w	r2, r3, #31
 8010a34:	4907      	ldr	r1, [pc, #28]	; (8010a54 <__NVIC_EnableIRQ+0x38>)
 8010a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a3a:	095b      	lsrs	r3, r3, #5
 8010a3c:	2001      	movs	r0, #1
 8010a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8010a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8010a46:	bf00      	nop
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	e000e100 	.word	0xe000e100

08010a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b083      	sub	sp, #12
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	4603      	mov	r3, r0
 8010a60:	6039      	str	r1, [r7, #0]
 8010a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	db0a      	blt.n	8010a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	490c      	ldr	r1, [pc, #48]	; (8010aa4 <__NVIC_SetPriority+0x4c>)
 8010a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a76:	0112      	lsls	r2, r2, #4
 8010a78:	b2d2      	uxtb	r2, r2
 8010a7a:	440b      	add	r3, r1
 8010a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010a80:	e00a      	b.n	8010a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	4908      	ldr	r1, [pc, #32]	; (8010aa8 <__NVIC_SetPriority+0x50>)
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	f003 030f 	and.w	r3, r3, #15
 8010a8e:	3b04      	subs	r3, #4
 8010a90:	0112      	lsls	r2, r2, #4
 8010a92:	b2d2      	uxtb	r2, r2
 8010a94:	440b      	add	r3, r1
 8010a96:	761a      	strb	r2, [r3, #24]
}
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr
 8010aa4:	e000e100 	.word	0xe000e100
 8010aa8:	e000ed00 	.word	0xe000ed00

08010aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b089      	sub	sp, #36	; 0x24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f003 0307 	and.w	r3, r3, #7
 8010abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010ac0:	69fb      	ldr	r3, [r7, #28]
 8010ac2:	f1c3 0307 	rsb	r3, r3, #7
 8010ac6:	2b04      	cmp	r3, #4
 8010ac8:	bf28      	it	cs
 8010aca:	2304      	movcs	r3, #4
 8010acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010ace:	69fb      	ldr	r3, [r7, #28]
 8010ad0:	3304      	adds	r3, #4
 8010ad2:	2b06      	cmp	r3, #6
 8010ad4:	d902      	bls.n	8010adc <NVIC_EncodePriority+0x30>
 8010ad6:	69fb      	ldr	r3, [r7, #28]
 8010ad8:	3b03      	subs	r3, #3
 8010ada:	e000      	b.n	8010ade <NVIC_EncodePriority+0x32>
 8010adc:	2300      	movs	r3, #0
 8010ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ae4:	69bb      	ldr	r3, [r7, #24]
 8010ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8010aea:	43da      	mvns	r2, r3
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	401a      	ands	r2, r3
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010af4:	f04f 31ff 	mov.w	r1, #4294967295
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	fa01 f303 	lsl.w	r3, r1, r3
 8010afe:	43d9      	mvns	r1, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b04:	4313      	orrs	r3, r2
         );
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3724      	adds	r7, #36	; 0x24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
	...

08010b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b082      	sub	sp, #8
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	3b01      	subs	r3, #1
 8010b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010b24:	d301      	bcc.n	8010b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010b26:	2301      	movs	r3, #1
 8010b28:	e00f      	b.n	8010b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010b2a:	4a0a      	ldr	r2, [pc, #40]	; (8010b54 <SysTick_Config+0x40>)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010b32:	210f      	movs	r1, #15
 8010b34:	f04f 30ff 	mov.w	r0, #4294967295
 8010b38:	f7ff ff8e 	bl	8010a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010b3c:	4b05      	ldr	r3, [pc, #20]	; (8010b54 <SysTick_Config+0x40>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010b42:	4b04      	ldr	r3, [pc, #16]	; (8010b54 <SysTick_Config+0x40>)
 8010b44:	2207      	movs	r2, #7
 8010b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010b48:	2300      	movs	r3, #0
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3708      	adds	r7, #8
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	e000e010 	.word	0xe000e010

08010b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b082      	sub	sp, #8
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff ff29 	bl	80109b8 <__NVIC_SetPriorityGrouping>
}
 8010b66:	bf00      	nop
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b086      	sub	sp, #24
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	4603      	mov	r3, r0
 8010b76:	60b9      	str	r1, [r7, #8]
 8010b78:	607a      	str	r2, [r7, #4]
 8010b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010b80:	f7ff ff3e 	bl	8010a00 <__NVIC_GetPriorityGrouping>
 8010b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	68b9      	ldr	r1, [r7, #8]
 8010b8a:	6978      	ldr	r0, [r7, #20]
 8010b8c:	f7ff ff8e 	bl	8010aac <NVIC_EncodePriority>
 8010b90:	4602      	mov	r2, r0
 8010b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b96:	4611      	mov	r1, r2
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f7ff ff5d 	bl	8010a58 <__NVIC_SetPriority>
}
 8010b9e:	bf00      	nop
 8010ba0:	3718      	adds	r7, #24
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	4603      	mov	r3, r0
 8010bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7ff ff31 	bl	8010a1c <__NVIC_EnableIRQ>
}
 8010bba:	bf00      	nop
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b082      	sub	sp, #8
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7ff ffa2 	bl	8010b14 <SysTick_Config>
 8010bd0:	4603      	mov	r3, r0
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010be6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010be8:	f7ff feb6 	bl	8010958 <HAL_GetTick>
 8010bec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b02      	cmp	r3, #2
 8010bf8:	d008      	beq.n	8010c0c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2280      	movs	r2, #128	; 0x80
 8010bfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	e052      	b.n	8010cb2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	f022 0216 	bic.w	r2, r2, #22
 8010c1a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	695a      	ldr	r2, [r3, #20]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010c2a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d103      	bne.n	8010c3c <HAL_DMA_Abort+0x62>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d007      	beq.n	8010c4c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f022 0208 	bic.w	r2, r2, #8
 8010c4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f022 0201 	bic.w	r2, r2, #1
 8010c5a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010c5c:	e013      	b.n	8010c86 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010c5e:	f7ff fe7b 	bl	8010958 <HAL_GetTick>
 8010c62:	4602      	mov	r2, r0
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	2b05      	cmp	r3, #5
 8010c6a:	d90c      	bls.n	8010c86 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2203      	movs	r2, #3
 8010c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8010c82:	2303      	movs	r3, #3
 8010c84:	e015      	b.n	8010cb2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	f003 0301 	and.w	r3, r3, #1
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d1e4      	bne.n	8010c5e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c98:	223f      	movs	r2, #63	; 0x3f
 8010c9a:	409a      	lsls	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8010cb0:	2300      	movs	r3, #0
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010cba:	b480      	push	{r7}
 8010cbc:	b083      	sub	sp, #12
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010cc8:	b2db      	uxtb	r3, r3
 8010cca:	2b02      	cmp	r3, #2
 8010ccc:	d004      	beq.n	8010cd8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2280      	movs	r2, #128	; 0x80
 8010cd2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e00c      	b.n	8010cf2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2205      	movs	r2, #5
 8010cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f022 0201 	bic.w	r2, r2, #1
 8010cee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010cf0:	2300      	movs	r3, #0
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	370c      	adds	r7, #12
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfc:	4770      	bx	lr
	...

08010d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b089      	sub	sp, #36	; 0x24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8010d12:	2300      	movs	r3, #0
 8010d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010d16:	2300      	movs	r3, #0
 8010d18:	61fb      	str	r3, [r7, #28]
 8010d1a:	e16b      	b.n	8010ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010d1c:	2201      	movs	r2, #1
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	fa02 f303 	lsl.w	r3, r2, r3
 8010d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	697a      	ldr	r2, [r7, #20]
 8010d2c:	4013      	ands	r3, r2
 8010d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8010d30:	693a      	ldr	r2, [r7, #16]
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	f040 815a 	bne.w	8010fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	f003 0303 	and.w	r3, r3, #3
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d005      	beq.n	8010d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010d4e:	2b02      	cmp	r3, #2
 8010d50:	d130      	bne.n	8010db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	689b      	ldr	r3, [r3, #8]
 8010d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	005b      	lsls	r3, r3, #1
 8010d5c:	2203      	movs	r2, #3
 8010d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d62:	43db      	mvns	r3, r3
 8010d64:	69ba      	ldr	r2, [r7, #24]
 8010d66:	4013      	ands	r3, r2
 8010d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	68da      	ldr	r2, [r3, #12]
 8010d6e:	69fb      	ldr	r3, [r7, #28]
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	fa02 f303 	lsl.w	r3, r2, r3
 8010d76:	69ba      	ldr	r2, [r7, #24]
 8010d78:	4313      	orrs	r3, r2
 8010d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	69ba      	ldr	r2, [r7, #24]
 8010d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8010d88:	2201      	movs	r2, #1
 8010d8a:	69fb      	ldr	r3, [r7, #28]
 8010d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d90:	43db      	mvns	r3, r3
 8010d92:	69ba      	ldr	r2, [r7, #24]
 8010d94:	4013      	ands	r3, r2
 8010d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	091b      	lsrs	r3, r3, #4
 8010d9e:	f003 0201 	and.w	r2, r3, #1
 8010da2:	69fb      	ldr	r3, [r7, #28]
 8010da4:	fa02 f303 	lsl.w	r3, r2, r3
 8010da8:	69ba      	ldr	r2, [r7, #24]
 8010daa:	4313      	orrs	r3, r2
 8010dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	69ba      	ldr	r2, [r7, #24]
 8010db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	f003 0303 	and.w	r3, r3, #3
 8010dbc:	2b03      	cmp	r3, #3
 8010dbe:	d017      	beq.n	8010df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	005b      	lsls	r3, r3, #1
 8010dca:	2203      	movs	r2, #3
 8010dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd0:	43db      	mvns	r3, r3
 8010dd2:	69ba      	ldr	r2, [r7, #24]
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010dd8:	683b      	ldr	r3, [r7, #0]
 8010dda:	689a      	ldr	r2, [r3, #8]
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	005b      	lsls	r3, r3, #1
 8010de0:	fa02 f303 	lsl.w	r3, r2, r3
 8010de4:	69ba      	ldr	r2, [r7, #24]
 8010de6:	4313      	orrs	r3, r2
 8010de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	69ba      	ldr	r2, [r7, #24]
 8010dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	f003 0303 	and.w	r3, r3, #3
 8010df8:	2b02      	cmp	r3, #2
 8010dfa:	d123      	bne.n	8010e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	08da      	lsrs	r2, r3, #3
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	3208      	adds	r2, #8
 8010e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	f003 0307 	and.w	r3, r3, #7
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	220f      	movs	r2, #15
 8010e14:	fa02 f303 	lsl.w	r3, r2, r3
 8010e18:	43db      	mvns	r3, r3
 8010e1a:	69ba      	ldr	r2, [r7, #24]
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	691a      	ldr	r2, [r3, #16]
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	f003 0307 	and.w	r3, r3, #7
 8010e2a:	009b      	lsls	r3, r3, #2
 8010e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e30:	69ba      	ldr	r2, [r7, #24]
 8010e32:	4313      	orrs	r3, r2
 8010e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	08da      	lsrs	r2, r3, #3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	3208      	adds	r2, #8
 8010e3e:	69b9      	ldr	r1, [r7, #24]
 8010e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	005b      	lsls	r3, r3, #1
 8010e4e:	2203      	movs	r2, #3
 8010e50:	fa02 f303 	lsl.w	r3, r2, r3
 8010e54:	43db      	mvns	r3, r3
 8010e56:	69ba      	ldr	r2, [r7, #24]
 8010e58:	4013      	ands	r3, r2
 8010e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	685b      	ldr	r3, [r3, #4]
 8010e60:	f003 0203 	and.w	r2, r3, #3
 8010e64:	69fb      	ldr	r3, [r7, #28]
 8010e66:	005b      	lsls	r3, r3, #1
 8010e68:	fa02 f303 	lsl.w	r3, r2, r3
 8010e6c:	69ba      	ldr	r2, [r7, #24]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	69ba      	ldr	r2, [r7, #24]
 8010e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 80b4 	beq.w	8010fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010e86:	2300      	movs	r3, #0
 8010e88:	60fb      	str	r3, [r7, #12]
 8010e8a:	4b60      	ldr	r3, [pc, #384]	; (801100c <HAL_GPIO_Init+0x30c>)
 8010e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e8e:	4a5f      	ldr	r2, [pc, #380]	; (801100c <HAL_GPIO_Init+0x30c>)
 8010e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e94:	6453      	str	r3, [r2, #68]	; 0x44
 8010e96:	4b5d      	ldr	r3, [pc, #372]	; (801100c <HAL_GPIO_Init+0x30c>)
 8010e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e9e:	60fb      	str	r3, [r7, #12]
 8010ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010ea2:	4a5b      	ldr	r2, [pc, #364]	; (8011010 <HAL_GPIO_Init+0x310>)
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	089b      	lsrs	r3, r3, #2
 8010ea8:	3302      	adds	r3, #2
 8010eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	f003 0303 	and.w	r3, r3, #3
 8010eb6:	009b      	lsls	r3, r3, #2
 8010eb8:	220f      	movs	r2, #15
 8010eba:	fa02 f303 	lsl.w	r3, r2, r3
 8010ebe:	43db      	mvns	r3, r3
 8010ec0:	69ba      	ldr	r2, [r7, #24]
 8010ec2:	4013      	ands	r3, r2
 8010ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	4a52      	ldr	r2, [pc, #328]	; (8011014 <HAL_GPIO_Init+0x314>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d02b      	beq.n	8010f26 <HAL_GPIO_Init+0x226>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	4a51      	ldr	r2, [pc, #324]	; (8011018 <HAL_GPIO_Init+0x318>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d025      	beq.n	8010f22 <HAL_GPIO_Init+0x222>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	4a50      	ldr	r2, [pc, #320]	; (801101c <HAL_GPIO_Init+0x31c>)
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d01f      	beq.n	8010f1e <HAL_GPIO_Init+0x21e>
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	4a4f      	ldr	r2, [pc, #316]	; (8011020 <HAL_GPIO_Init+0x320>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d019      	beq.n	8010f1a <HAL_GPIO_Init+0x21a>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	4a4e      	ldr	r2, [pc, #312]	; (8011024 <HAL_GPIO_Init+0x324>)
 8010eea:	4293      	cmp	r3, r2
 8010eec:	d013      	beq.n	8010f16 <HAL_GPIO_Init+0x216>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	4a4d      	ldr	r2, [pc, #308]	; (8011028 <HAL_GPIO_Init+0x328>)
 8010ef2:	4293      	cmp	r3, r2
 8010ef4:	d00d      	beq.n	8010f12 <HAL_GPIO_Init+0x212>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	4a4c      	ldr	r2, [pc, #304]	; (801102c <HAL_GPIO_Init+0x32c>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d007      	beq.n	8010f0e <HAL_GPIO_Init+0x20e>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	4a4b      	ldr	r2, [pc, #300]	; (8011030 <HAL_GPIO_Init+0x330>)
 8010f02:	4293      	cmp	r3, r2
 8010f04:	d101      	bne.n	8010f0a <HAL_GPIO_Init+0x20a>
 8010f06:	2307      	movs	r3, #7
 8010f08:	e00e      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f0a:	2308      	movs	r3, #8
 8010f0c:	e00c      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f0e:	2306      	movs	r3, #6
 8010f10:	e00a      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f12:	2305      	movs	r3, #5
 8010f14:	e008      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f16:	2304      	movs	r3, #4
 8010f18:	e006      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	e004      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f1e:	2302      	movs	r3, #2
 8010f20:	e002      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f22:	2301      	movs	r3, #1
 8010f24:	e000      	b.n	8010f28 <HAL_GPIO_Init+0x228>
 8010f26:	2300      	movs	r3, #0
 8010f28:	69fa      	ldr	r2, [r7, #28]
 8010f2a:	f002 0203 	and.w	r2, r2, #3
 8010f2e:	0092      	lsls	r2, r2, #2
 8010f30:	4093      	lsls	r3, r2
 8010f32:	69ba      	ldr	r2, [r7, #24]
 8010f34:	4313      	orrs	r3, r2
 8010f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010f38:	4935      	ldr	r1, [pc, #212]	; (8011010 <HAL_GPIO_Init+0x310>)
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	089b      	lsrs	r3, r3, #2
 8010f3e:	3302      	adds	r3, #2
 8010f40:	69ba      	ldr	r2, [r7, #24]
 8010f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8010f46:	4b3b      	ldr	r3, [pc, #236]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	43db      	mvns	r3, r3
 8010f50:	69ba      	ldr	r2, [r7, #24]
 8010f52:	4013      	ands	r3, r2
 8010f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d003      	beq.n	8010f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8010f62:	69ba      	ldr	r2, [r7, #24]
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	4313      	orrs	r3, r2
 8010f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010f6a:	4a32      	ldr	r2, [pc, #200]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010f6c:	69bb      	ldr	r3, [r7, #24]
 8010f6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8010f70:	4b30      	ldr	r3, [pc, #192]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	43db      	mvns	r3, r3
 8010f7a:	69ba      	ldr	r2, [r7, #24]
 8010f7c:	4013      	ands	r3, r2
 8010f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d003      	beq.n	8010f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8010f8c:	69ba      	ldr	r2, [r7, #24]
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	4313      	orrs	r3, r2
 8010f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8010f94:	4a27      	ldr	r2, [pc, #156]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010f9a:	4b26      	ldr	r3, [pc, #152]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010f9c:	689b      	ldr	r3, [r3, #8]
 8010f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	43db      	mvns	r3, r3
 8010fa4:	69ba      	ldr	r2, [r7, #24]
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d003      	beq.n	8010fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8010fb6:	69ba      	ldr	r2, [r7, #24]
 8010fb8:	693b      	ldr	r3, [r7, #16]
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010fbe:	4a1d      	ldr	r2, [pc, #116]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8010fc4:	4b1b      	ldr	r3, [pc, #108]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	43db      	mvns	r3, r3
 8010fce:	69ba      	ldr	r2, [r7, #24]
 8010fd0:	4013      	ands	r3, r2
 8010fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d003      	beq.n	8010fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8010fe0:	69ba      	ldr	r2, [r7, #24]
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8010fe8:	4a12      	ldr	r2, [pc, #72]	; (8011034 <HAL_GPIO_Init+0x334>)
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010fee:	69fb      	ldr	r3, [r7, #28]
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	61fb      	str	r3, [r7, #28]
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	2b0f      	cmp	r3, #15
 8010ff8:	f67f ae90 	bls.w	8010d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010ffc:	bf00      	nop
 8010ffe:	bf00      	nop
 8011000:	3724      	adds	r7, #36	; 0x24
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	40023800 	.word	0x40023800
 8011010:	40013800 	.word	0x40013800
 8011014:	40020000 	.word	0x40020000
 8011018:	40020400 	.word	0x40020400
 801101c:	40020800 	.word	0x40020800
 8011020:	40020c00 	.word	0x40020c00
 8011024:	40021000 	.word	0x40021000
 8011028:	40021400 	.word	0x40021400
 801102c:	40021800 	.word	0x40021800
 8011030:	40021c00 	.word	0x40021c00
 8011034:	40013c00 	.word	0x40013c00

08011038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	460b      	mov	r3, r1
 8011042:	807b      	strh	r3, [r7, #2]
 8011044:	4613      	mov	r3, r2
 8011046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011048:	787b      	ldrb	r3, [r7, #1]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d003      	beq.n	8011056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801104e:	887a      	ldrh	r2, [r7, #2]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011054:	e003      	b.n	801105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011056:	887b      	ldrh	r3, [r7, #2]
 8011058:	041a      	lsls	r2, r3, #16
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	619a      	str	r2, [r3, #24]
}
 801105e:	bf00      	nop
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr

0801106a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801106a:	b480      	push	{r7}
 801106c:	b085      	sub	sp, #20
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
 8011072:	460b      	mov	r3, r1
 8011074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	695b      	ldr	r3, [r3, #20]
 801107a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801107c:	887a      	ldrh	r2, [r7, #2]
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	4013      	ands	r3, r2
 8011082:	041a      	lsls	r2, r3, #16
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	43d9      	mvns	r1, r3
 8011088:	887b      	ldrh	r3, [r7, #2]
 801108a:	400b      	ands	r3, r1
 801108c:	431a      	orrs	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	619a      	str	r2, [r3, #24]
}
 8011092:	bf00      	nop
 8011094:	3714      	adds	r7, #20
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
	...

080110a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b086      	sub	sp, #24
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d101      	bne.n	80110b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80110ae:	2301      	movs	r3, #1
 80110b0:	e264      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d075      	beq.n	80111aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80110be:	4ba3      	ldr	r3, [pc, #652]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80110c0:	689b      	ldr	r3, [r3, #8]
 80110c2:	f003 030c 	and.w	r3, r3, #12
 80110c6:	2b04      	cmp	r3, #4
 80110c8:	d00c      	beq.n	80110e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80110ca:	4ba0      	ldr	r3, [pc, #640]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80110d2:	2b08      	cmp	r3, #8
 80110d4:	d112      	bne.n	80110fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80110d6:	4b9d      	ldr	r3, [pc, #628]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80110de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80110e2:	d10b      	bne.n	80110fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80110e4:	4b99      	ldr	r3, [pc, #612]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d05b      	beq.n	80111a8 <HAL_RCC_OscConfig+0x108>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	685b      	ldr	r3, [r3, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d157      	bne.n	80111a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80110f8:	2301      	movs	r3, #1
 80110fa:	e23f      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011104:	d106      	bne.n	8011114 <HAL_RCC_OscConfig+0x74>
 8011106:	4b91      	ldr	r3, [pc, #580]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a90      	ldr	r2, [pc, #576]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011110:	6013      	str	r3, [r2, #0]
 8011112:	e01d      	b.n	8011150 <HAL_RCC_OscConfig+0xb0>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801111c:	d10c      	bne.n	8011138 <HAL_RCC_OscConfig+0x98>
 801111e:	4b8b      	ldr	r3, [pc, #556]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	4a8a      	ldr	r2, [pc, #552]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011128:	6013      	str	r3, [r2, #0]
 801112a:	4b88      	ldr	r3, [pc, #544]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4a87      	ldr	r2, [pc, #540]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011134:	6013      	str	r3, [r2, #0]
 8011136:	e00b      	b.n	8011150 <HAL_RCC_OscConfig+0xb0>
 8011138:	4b84      	ldr	r3, [pc, #528]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a83      	ldr	r2, [pc, #524]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011142:	6013      	str	r3, [r2, #0]
 8011144:	4b81      	ldr	r3, [pc, #516]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	4a80      	ldr	r2, [pc, #512]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	685b      	ldr	r3, [r3, #4]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d013      	beq.n	8011180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011158:	f7ff fbfe 	bl	8010958 <HAL_GetTick>
 801115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801115e:	e008      	b.n	8011172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011160:	f7ff fbfa 	bl	8010958 <HAL_GetTick>
 8011164:	4602      	mov	r2, r0
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	1ad3      	subs	r3, r2, r3
 801116a:	2b64      	cmp	r3, #100	; 0x64
 801116c:	d901      	bls.n	8011172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801116e:	2303      	movs	r3, #3
 8011170:	e204      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011172:	4b76      	ldr	r3, [pc, #472]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801117a:	2b00      	cmp	r3, #0
 801117c:	d0f0      	beq.n	8011160 <HAL_RCC_OscConfig+0xc0>
 801117e:	e014      	b.n	80111aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011180:	f7ff fbea 	bl	8010958 <HAL_GetTick>
 8011184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011186:	e008      	b.n	801119a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011188:	f7ff fbe6 	bl	8010958 <HAL_GetTick>
 801118c:	4602      	mov	r2, r0
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	1ad3      	subs	r3, r2, r3
 8011192:	2b64      	cmp	r3, #100	; 0x64
 8011194:	d901      	bls.n	801119a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011196:	2303      	movs	r3, #3
 8011198:	e1f0      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801119a:	4b6c      	ldr	r3, [pc, #432]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1f0      	bne.n	8011188 <HAL_RCC_OscConfig+0xe8>
 80111a6:	e000      	b.n	80111aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80111a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f003 0302 	and.w	r3, r3, #2
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d063      	beq.n	801127e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80111b6:	4b65      	ldr	r3, [pc, #404]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80111b8:	689b      	ldr	r3, [r3, #8]
 80111ba:	f003 030c 	and.w	r3, r3, #12
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d00b      	beq.n	80111da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80111c2:	4b62      	ldr	r3, [pc, #392]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80111c4:	689b      	ldr	r3, [r3, #8]
 80111c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80111ca:	2b08      	cmp	r3, #8
 80111cc:	d11c      	bne.n	8011208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80111ce:	4b5f      	ldr	r3, [pc, #380]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d116      	bne.n	8011208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80111da:	4b5c      	ldr	r3, [pc, #368]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f003 0302 	and.w	r3, r3, #2
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d005      	beq.n	80111f2 <HAL_RCC_OscConfig+0x152>
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	2b01      	cmp	r3, #1
 80111ec:	d001      	beq.n	80111f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80111ee:	2301      	movs	r3, #1
 80111f0:	e1c4      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80111f2:	4b56      	ldr	r3, [pc, #344]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	691b      	ldr	r3, [r3, #16]
 80111fe:	00db      	lsls	r3, r3, #3
 8011200:	4952      	ldr	r1, [pc, #328]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011202:	4313      	orrs	r3, r2
 8011204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011206:	e03a      	b.n	801127e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	68db      	ldr	r3, [r3, #12]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d020      	beq.n	8011252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011210:	4b4f      	ldr	r3, [pc, #316]	; (8011350 <HAL_RCC_OscConfig+0x2b0>)
 8011212:	2201      	movs	r2, #1
 8011214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011216:	f7ff fb9f 	bl	8010958 <HAL_GetTick>
 801121a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801121c:	e008      	b.n	8011230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801121e:	f7ff fb9b 	bl	8010958 <HAL_GetTick>
 8011222:	4602      	mov	r2, r0
 8011224:	693b      	ldr	r3, [r7, #16]
 8011226:	1ad3      	subs	r3, r2, r3
 8011228:	2b02      	cmp	r3, #2
 801122a:	d901      	bls.n	8011230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801122c:	2303      	movs	r3, #3
 801122e:	e1a5      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011230:	4b46      	ldr	r3, [pc, #280]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	f003 0302 	and.w	r3, r3, #2
 8011238:	2b00      	cmp	r3, #0
 801123a:	d0f0      	beq.n	801121e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801123c:	4b43      	ldr	r3, [pc, #268]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	691b      	ldr	r3, [r3, #16]
 8011248:	00db      	lsls	r3, r3, #3
 801124a:	4940      	ldr	r1, [pc, #256]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801124c:	4313      	orrs	r3, r2
 801124e:	600b      	str	r3, [r1, #0]
 8011250:	e015      	b.n	801127e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011252:	4b3f      	ldr	r3, [pc, #252]	; (8011350 <HAL_RCC_OscConfig+0x2b0>)
 8011254:	2200      	movs	r2, #0
 8011256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011258:	f7ff fb7e 	bl	8010958 <HAL_GetTick>
 801125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801125e:	e008      	b.n	8011272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011260:	f7ff fb7a 	bl	8010958 <HAL_GetTick>
 8011264:	4602      	mov	r2, r0
 8011266:	693b      	ldr	r3, [r7, #16]
 8011268:	1ad3      	subs	r3, r2, r3
 801126a:	2b02      	cmp	r3, #2
 801126c:	d901      	bls.n	8011272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801126e:	2303      	movs	r3, #3
 8011270:	e184      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8011272:	4b36      	ldr	r3, [pc, #216]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f003 0302 	and.w	r3, r3, #2
 801127a:	2b00      	cmp	r3, #0
 801127c:	d1f0      	bne.n	8011260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	f003 0308 	and.w	r3, r3, #8
 8011286:	2b00      	cmp	r3, #0
 8011288:	d030      	beq.n	80112ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	695b      	ldr	r3, [r3, #20]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d016      	beq.n	80112c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011292:	4b30      	ldr	r3, [pc, #192]	; (8011354 <HAL_RCC_OscConfig+0x2b4>)
 8011294:	2201      	movs	r2, #1
 8011296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011298:	f7ff fb5e 	bl	8010958 <HAL_GetTick>
 801129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801129e:	e008      	b.n	80112b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80112a0:	f7ff fb5a 	bl	8010958 <HAL_GetTick>
 80112a4:	4602      	mov	r2, r0
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	d901      	bls.n	80112b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80112ae:	2303      	movs	r3, #3
 80112b0:	e164      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80112b2:	4b26      	ldr	r3, [pc, #152]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80112b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112b6:	f003 0302 	and.w	r3, r3, #2
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d0f0      	beq.n	80112a0 <HAL_RCC_OscConfig+0x200>
 80112be:	e015      	b.n	80112ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80112c0:	4b24      	ldr	r3, [pc, #144]	; (8011354 <HAL_RCC_OscConfig+0x2b4>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80112c6:	f7ff fb47 	bl	8010958 <HAL_GetTick>
 80112ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80112cc:	e008      	b.n	80112e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80112ce:	f7ff fb43 	bl	8010958 <HAL_GetTick>
 80112d2:	4602      	mov	r2, r0
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	2b02      	cmp	r3, #2
 80112da:	d901      	bls.n	80112e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80112dc:	2303      	movs	r3, #3
 80112de:	e14d      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80112e0:	4b1a      	ldr	r3, [pc, #104]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 80112e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112e4:	f003 0302 	and.w	r3, r3, #2
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d1f0      	bne.n	80112ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f003 0304 	and.w	r3, r3, #4
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f000 80a0 	beq.w	801143a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80112fa:	2300      	movs	r3, #0
 80112fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80112fe:	4b13      	ldr	r3, [pc, #76]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011306:	2b00      	cmp	r3, #0
 8011308:	d10f      	bne.n	801132a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801130a:	2300      	movs	r3, #0
 801130c:	60bb      	str	r3, [r7, #8]
 801130e:	4b0f      	ldr	r3, [pc, #60]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011312:	4a0e      	ldr	r2, [pc, #56]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 8011314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011318:	6413      	str	r3, [r2, #64]	; 0x40
 801131a:	4b0c      	ldr	r3, [pc, #48]	; (801134c <HAL_RCC_OscConfig+0x2ac>)
 801131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011322:	60bb      	str	r3, [r7, #8]
 8011324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011326:	2301      	movs	r3, #1
 8011328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801132a:	4b0b      	ldr	r3, [pc, #44]	; (8011358 <HAL_RCC_OscConfig+0x2b8>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011332:	2b00      	cmp	r3, #0
 8011334:	d121      	bne.n	801137a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011336:	4b08      	ldr	r3, [pc, #32]	; (8011358 <HAL_RCC_OscConfig+0x2b8>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a07      	ldr	r2, [pc, #28]	; (8011358 <HAL_RCC_OscConfig+0x2b8>)
 801133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011342:	f7ff fb09 	bl	8010958 <HAL_GetTick>
 8011346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011348:	e011      	b.n	801136e <HAL_RCC_OscConfig+0x2ce>
 801134a:	bf00      	nop
 801134c:	40023800 	.word	0x40023800
 8011350:	42470000 	.word	0x42470000
 8011354:	42470e80 	.word	0x42470e80
 8011358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801135c:	f7ff fafc 	bl	8010958 <HAL_GetTick>
 8011360:	4602      	mov	r2, r0
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	1ad3      	subs	r3, r2, r3
 8011366:	2b02      	cmp	r3, #2
 8011368:	d901      	bls.n	801136e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801136a:	2303      	movs	r3, #3
 801136c:	e106      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801136e:	4b85      	ldr	r3, [pc, #532]	; (8011584 <HAL_RCC_OscConfig+0x4e4>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011376:	2b00      	cmp	r3, #0
 8011378:	d0f0      	beq.n	801135c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	689b      	ldr	r3, [r3, #8]
 801137e:	2b01      	cmp	r3, #1
 8011380:	d106      	bne.n	8011390 <HAL_RCC_OscConfig+0x2f0>
 8011382:	4b81      	ldr	r3, [pc, #516]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 8011384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011386:	4a80      	ldr	r2, [pc, #512]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 8011388:	f043 0301 	orr.w	r3, r3, #1
 801138c:	6713      	str	r3, [r2, #112]	; 0x70
 801138e:	e01c      	b.n	80113ca <HAL_RCC_OscConfig+0x32a>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	2b05      	cmp	r3, #5
 8011396:	d10c      	bne.n	80113b2 <HAL_RCC_OscConfig+0x312>
 8011398:	4b7b      	ldr	r3, [pc, #492]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 801139a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801139c:	4a7a      	ldr	r2, [pc, #488]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 801139e:	f043 0304 	orr.w	r3, r3, #4
 80113a2:	6713      	str	r3, [r2, #112]	; 0x70
 80113a4:	4b78      	ldr	r3, [pc, #480]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113a8:	4a77      	ldr	r2, [pc, #476]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113aa:	f043 0301 	orr.w	r3, r3, #1
 80113ae:	6713      	str	r3, [r2, #112]	; 0x70
 80113b0:	e00b      	b.n	80113ca <HAL_RCC_OscConfig+0x32a>
 80113b2:	4b75      	ldr	r3, [pc, #468]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113b6:	4a74      	ldr	r2, [pc, #464]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113b8:	f023 0301 	bic.w	r3, r3, #1
 80113bc:	6713      	str	r3, [r2, #112]	; 0x70
 80113be:	4b72      	ldr	r3, [pc, #456]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113c2:	4a71      	ldr	r2, [pc, #452]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113c4:	f023 0304 	bic.w	r3, r3, #4
 80113c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d015      	beq.n	80113fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113d2:	f7ff fac1 	bl	8010958 <HAL_GetTick>
 80113d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80113d8:	e00a      	b.n	80113f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80113da:	f7ff fabd 	bl	8010958 <HAL_GetTick>
 80113de:	4602      	mov	r2, r0
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d901      	bls.n	80113f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80113ec:	2303      	movs	r3, #3
 80113ee:	e0c5      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80113f0:	4b65      	ldr	r3, [pc, #404]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80113f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113f4:	f003 0302 	and.w	r3, r3, #2
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d0ee      	beq.n	80113da <HAL_RCC_OscConfig+0x33a>
 80113fc:	e014      	b.n	8011428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80113fe:	f7ff faab 	bl	8010958 <HAL_GetTick>
 8011402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011404:	e00a      	b.n	801141c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011406:	f7ff faa7 	bl	8010958 <HAL_GetTick>
 801140a:	4602      	mov	r2, r0
 801140c:	693b      	ldr	r3, [r7, #16]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	f241 3288 	movw	r2, #5000	; 0x1388
 8011414:	4293      	cmp	r3, r2
 8011416:	d901      	bls.n	801141c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8011418:	2303      	movs	r3, #3
 801141a:	e0af      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801141c:	4b5a      	ldr	r3, [pc, #360]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 801141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011420:	f003 0302 	and.w	r3, r3, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1ee      	bne.n	8011406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011428:	7dfb      	ldrb	r3, [r7, #23]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d105      	bne.n	801143a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801142e:	4b56      	ldr	r3, [pc, #344]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 8011430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011432:	4a55      	ldr	r2, [pc, #340]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 8011434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	699b      	ldr	r3, [r3, #24]
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 809b 	beq.w	801157a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011444:	4b50      	ldr	r3, [pc, #320]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 8011446:	689b      	ldr	r3, [r3, #8]
 8011448:	f003 030c 	and.w	r3, r3, #12
 801144c:	2b08      	cmp	r3, #8
 801144e:	d05c      	beq.n	801150a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	699b      	ldr	r3, [r3, #24]
 8011454:	2b02      	cmp	r3, #2
 8011456:	d141      	bne.n	80114dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011458:	4b4c      	ldr	r3, [pc, #304]	; (801158c <HAL_RCC_OscConfig+0x4ec>)
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801145e:	f7ff fa7b 	bl	8010958 <HAL_GetTick>
 8011462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011464:	e008      	b.n	8011478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011466:	f7ff fa77 	bl	8010958 <HAL_GetTick>
 801146a:	4602      	mov	r2, r0
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	1ad3      	subs	r3, r2, r3
 8011470:	2b02      	cmp	r3, #2
 8011472:	d901      	bls.n	8011478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8011474:	2303      	movs	r3, #3
 8011476:	e081      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011478:	4b43      	ldr	r3, [pc, #268]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1f0      	bne.n	8011466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	69da      	ldr	r2, [r3, #28]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6a1b      	ldr	r3, [r3, #32]
 801148c:	431a      	orrs	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011492:	019b      	lsls	r3, r3, #6
 8011494:	431a      	orrs	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149a:	085b      	lsrs	r3, r3, #1
 801149c:	3b01      	subs	r3, #1
 801149e:	041b      	lsls	r3, r3, #16
 80114a0:	431a      	orrs	r2, r3
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114a6:	061b      	lsls	r3, r3, #24
 80114a8:	4937      	ldr	r1, [pc, #220]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80114aa:	4313      	orrs	r3, r2
 80114ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80114ae:	4b37      	ldr	r3, [pc, #220]	; (801158c <HAL_RCC_OscConfig+0x4ec>)
 80114b0:	2201      	movs	r2, #1
 80114b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80114b4:	f7ff fa50 	bl	8010958 <HAL_GetTick>
 80114b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80114ba:	e008      	b.n	80114ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114bc:	f7ff fa4c 	bl	8010958 <HAL_GetTick>
 80114c0:	4602      	mov	r2, r0
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d901      	bls.n	80114ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80114ca:	2303      	movs	r3, #3
 80114cc:	e056      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80114ce:	4b2e      	ldr	r3, [pc, #184]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d0f0      	beq.n	80114bc <HAL_RCC_OscConfig+0x41c>
 80114da:	e04e      	b.n	801157a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80114dc:	4b2b      	ldr	r3, [pc, #172]	; (801158c <HAL_RCC_OscConfig+0x4ec>)
 80114de:	2200      	movs	r2, #0
 80114e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80114e2:	f7ff fa39 	bl	8010958 <HAL_GetTick>
 80114e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80114e8:	e008      	b.n	80114fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80114ea:	f7ff fa35 	bl	8010958 <HAL_GetTick>
 80114ee:	4602      	mov	r2, r0
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d901      	bls.n	80114fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80114f8:	2303      	movs	r3, #3
 80114fa:	e03f      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80114fc:	4b22      	ldr	r3, [pc, #136]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1f0      	bne.n	80114ea <HAL_RCC_OscConfig+0x44a>
 8011508:	e037      	b.n	801157a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	699b      	ldr	r3, [r3, #24]
 801150e:	2b01      	cmp	r3, #1
 8011510:	d101      	bne.n	8011516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8011512:	2301      	movs	r3, #1
 8011514:	e032      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011516:	4b1c      	ldr	r3, [pc, #112]	; (8011588 <HAL_RCC_OscConfig+0x4e8>)
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	699b      	ldr	r3, [r3, #24]
 8011520:	2b01      	cmp	r3, #1
 8011522:	d028      	beq.n	8011576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801152e:	429a      	cmp	r2, r3
 8011530:	d121      	bne.n	8011576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801153c:	429a      	cmp	r2, r3
 801153e:	d11a      	bne.n	8011576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011540:	68fa      	ldr	r2, [r7, #12]
 8011542:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011546:	4013      	ands	r3, r2
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801154c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801154e:	4293      	cmp	r3, r2
 8011550:	d111      	bne.n	8011576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801155c:	085b      	lsrs	r3, r3, #1
 801155e:	3b01      	subs	r3, #1
 8011560:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011562:	429a      	cmp	r2, r3
 8011564:	d107      	bne.n	8011576 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011570:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011572:	429a      	cmp	r2, r3
 8011574:	d001      	beq.n	801157a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8011576:	2301      	movs	r3, #1
 8011578:	e000      	b.n	801157c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 801157a:	2300      	movs	r3, #0
}
 801157c:	4618      	mov	r0, r3
 801157e:	3718      	adds	r7, #24
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	40007000 	.word	0x40007000
 8011588:	40023800 	.word	0x40023800
 801158c:	42470060 	.word	0x42470060

08011590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d101      	bne.n	80115a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80115a0:	2301      	movs	r3, #1
 80115a2:	e0cc      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80115a4:	4b68      	ldr	r3, [pc, #416]	; (8011748 <HAL_RCC_ClockConfig+0x1b8>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	f003 0307 	and.w	r3, r3, #7
 80115ac:	683a      	ldr	r2, [r7, #0]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d90c      	bls.n	80115cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80115b2:	4b65      	ldr	r3, [pc, #404]	; (8011748 <HAL_RCC_ClockConfig+0x1b8>)
 80115b4:	683a      	ldr	r2, [r7, #0]
 80115b6:	b2d2      	uxtb	r2, r2
 80115b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80115ba:	4b63      	ldr	r3, [pc, #396]	; (8011748 <HAL_RCC_ClockConfig+0x1b8>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	f003 0307 	and.w	r3, r3, #7
 80115c2:	683a      	ldr	r2, [r7, #0]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d001      	beq.n	80115cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80115c8:	2301      	movs	r3, #1
 80115ca:	e0b8      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	f003 0302 	and.w	r3, r3, #2
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d020      	beq.n	801161a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f003 0304 	and.w	r3, r3, #4
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d005      	beq.n	80115f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80115e4:	4b59      	ldr	r3, [pc, #356]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 80115e6:	689b      	ldr	r3, [r3, #8]
 80115e8:	4a58      	ldr	r2, [pc, #352]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 80115ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80115ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	f003 0308 	and.w	r3, r3, #8
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d005      	beq.n	8011608 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80115fc:	4b53      	ldr	r3, [pc, #332]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	4a52      	ldr	r2, [pc, #328]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011606:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011608:	4b50      	ldr	r3, [pc, #320]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 801160a:	689b      	ldr	r3, [r3, #8]
 801160c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	689b      	ldr	r3, [r3, #8]
 8011614:	494d      	ldr	r1, [pc, #308]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011616:	4313      	orrs	r3, r2
 8011618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	2b00      	cmp	r3, #0
 8011624:	d044      	beq.n	80116b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	2b01      	cmp	r3, #1
 801162c:	d107      	bne.n	801163e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801162e:	4b47      	ldr	r3, [pc, #284]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011636:	2b00      	cmp	r3, #0
 8011638:	d119      	bne.n	801166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	e07f      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	2b02      	cmp	r3, #2
 8011644:	d003      	beq.n	801164e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801164a:	2b03      	cmp	r3, #3
 801164c:	d107      	bne.n	801165e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801164e:	4b3f      	ldr	r3, [pc, #252]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011656:	2b00      	cmp	r3, #0
 8011658:	d109      	bne.n	801166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801165a:	2301      	movs	r3, #1
 801165c:	e06f      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801165e:	4b3b      	ldr	r3, [pc, #236]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f003 0302 	and.w	r3, r3, #2
 8011666:	2b00      	cmp	r3, #0
 8011668:	d101      	bne.n	801166e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801166a:	2301      	movs	r3, #1
 801166c:	e067      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801166e:	4b37      	ldr	r3, [pc, #220]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	f023 0203 	bic.w	r2, r3, #3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	685b      	ldr	r3, [r3, #4]
 801167a:	4934      	ldr	r1, [pc, #208]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 801167c:	4313      	orrs	r3, r2
 801167e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011680:	f7ff f96a 	bl	8010958 <HAL_GetTick>
 8011684:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011686:	e00a      	b.n	801169e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011688:	f7ff f966 	bl	8010958 <HAL_GetTick>
 801168c:	4602      	mov	r2, r0
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	f241 3288 	movw	r2, #5000	; 0x1388
 8011696:	4293      	cmp	r3, r2
 8011698:	d901      	bls.n	801169e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801169a:	2303      	movs	r3, #3
 801169c:	e04f      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801169e:	4b2b      	ldr	r3, [pc, #172]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 80116a0:	689b      	ldr	r3, [r3, #8]
 80116a2:	f003 020c 	and.w	r2, r3, #12
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d1eb      	bne.n	8011688 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80116b0:	4b25      	ldr	r3, [pc, #148]	; (8011748 <HAL_RCC_ClockConfig+0x1b8>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f003 0307 	and.w	r3, r3, #7
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	429a      	cmp	r2, r3
 80116bc:	d20c      	bcs.n	80116d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116be:	4b22      	ldr	r3, [pc, #136]	; (8011748 <HAL_RCC_ClockConfig+0x1b8>)
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	b2d2      	uxtb	r2, r2
 80116c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80116c6:	4b20      	ldr	r3, [pc, #128]	; (8011748 <HAL_RCC_ClockConfig+0x1b8>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f003 0307 	and.w	r3, r3, #7
 80116ce:	683a      	ldr	r2, [r7, #0]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d001      	beq.n	80116d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e032      	b.n	801173e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	f003 0304 	and.w	r3, r3, #4
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d008      	beq.n	80116f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80116e4:	4b19      	ldr	r3, [pc, #100]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 80116e6:	689b      	ldr	r3, [r3, #8]
 80116e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	68db      	ldr	r3, [r3, #12]
 80116f0:	4916      	ldr	r1, [pc, #88]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 80116f2:	4313      	orrs	r3, r2
 80116f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f003 0308 	and.w	r3, r3, #8
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d009      	beq.n	8011716 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011702:	4b12      	ldr	r3, [pc, #72]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	490e      	ldr	r1, [pc, #56]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 8011712:	4313      	orrs	r3, r2
 8011714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011716:	f000 f821 	bl	801175c <HAL_RCC_GetSysClockFreq>
 801171a:	4602      	mov	r2, r0
 801171c:	4b0b      	ldr	r3, [pc, #44]	; (801174c <HAL_RCC_ClockConfig+0x1bc>)
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	091b      	lsrs	r3, r3, #4
 8011722:	f003 030f 	and.w	r3, r3, #15
 8011726:	490a      	ldr	r1, [pc, #40]	; (8011750 <HAL_RCC_ClockConfig+0x1c0>)
 8011728:	5ccb      	ldrb	r3, [r1, r3]
 801172a:	fa22 f303 	lsr.w	r3, r2, r3
 801172e:	4a09      	ldr	r2, [pc, #36]	; (8011754 <HAL_RCC_ClockConfig+0x1c4>)
 8011730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011732:	4b09      	ldr	r3, [pc, #36]	; (8011758 <HAL_RCC_ClockConfig+0x1c8>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff f8ca 	bl	80108d0 <HAL_InitTick>

  return HAL_OK;
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	40023c00 	.word	0x40023c00
 801174c:	40023800 	.word	0x40023800
 8011750:	08012880 	.word	0x08012880
 8011754:	20000000 	.word	0x20000000
 8011758:	20000004 	.word	0x20000004

0801175c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801175c:	b5b0      	push	{r4, r5, r7, lr}
 801175e:	b084      	sub	sp, #16
 8011760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011762:	2100      	movs	r1, #0
 8011764:	6079      	str	r1, [r7, #4]
 8011766:	2100      	movs	r1, #0
 8011768:	60f9      	str	r1, [r7, #12]
 801176a:	2100      	movs	r1, #0
 801176c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801176e:	2100      	movs	r1, #0
 8011770:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011772:	4952      	ldr	r1, [pc, #328]	; (80118bc <HAL_RCC_GetSysClockFreq+0x160>)
 8011774:	6889      	ldr	r1, [r1, #8]
 8011776:	f001 010c 	and.w	r1, r1, #12
 801177a:	2908      	cmp	r1, #8
 801177c:	d00d      	beq.n	801179a <HAL_RCC_GetSysClockFreq+0x3e>
 801177e:	2908      	cmp	r1, #8
 8011780:	f200 8094 	bhi.w	80118ac <HAL_RCC_GetSysClockFreq+0x150>
 8011784:	2900      	cmp	r1, #0
 8011786:	d002      	beq.n	801178e <HAL_RCC_GetSysClockFreq+0x32>
 8011788:	2904      	cmp	r1, #4
 801178a:	d003      	beq.n	8011794 <HAL_RCC_GetSysClockFreq+0x38>
 801178c:	e08e      	b.n	80118ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801178e:	4b4c      	ldr	r3, [pc, #304]	; (80118c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8011790:	60bb      	str	r3, [r7, #8]
       break;
 8011792:	e08e      	b.n	80118b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011794:	4b4b      	ldr	r3, [pc, #300]	; (80118c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8011796:	60bb      	str	r3, [r7, #8]
      break;
 8011798:	e08b      	b.n	80118b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801179a:	4948      	ldr	r1, [pc, #288]	; (80118bc <HAL_RCC_GetSysClockFreq+0x160>)
 801179c:	6849      	ldr	r1, [r1, #4]
 801179e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80117a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80117a4:	4945      	ldr	r1, [pc, #276]	; (80118bc <HAL_RCC_GetSysClockFreq+0x160>)
 80117a6:	6849      	ldr	r1, [r1, #4]
 80117a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80117ac:	2900      	cmp	r1, #0
 80117ae:	d024      	beq.n	80117fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80117b0:	4942      	ldr	r1, [pc, #264]	; (80118bc <HAL_RCC_GetSysClockFreq+0x160>)
 80117b2:	6849      	ldr	r1, [r1, #4]
 80117b4:	0989      	lsrs	r1, r1, #6
 80117b6:	4608      	mov	r0, r1
 80117b8:	f04f 0100 	mov.w	r1, #0
 80117bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80117c0:	f04f 0500 	mov.w	r5, #0
 80117c4:	ea00 0204 	and.w	r2, r0, r4
 80117c8:	ea01 0305 	and.w	r3, r1, r5
 80117cc:	493d      	ldr	r1, [pc, #244]	; (80118c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80117ce:	fb01 f003 	mul.w	r0, r1, r3
 80117d2:	2100      	movs	r1, #0
 80117d4:	fb01 f102 	mul.w	r1, r1, r2
 80117d8:	1844      	adds	r4, r0, r1
 80117da:	493a      	ldr	r1, [pc, #232]	; (80118c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80117dc:	fba2 0101 	umull	r0, r1, r2, r1
 80117e0:	1863      	adds	r3, r4, r1
 80117e2:	4619      	mov	r1, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	461a      	mov	r2, r3
 80117e8:	f04f 0300 	mov.w	r3, #0
 80117ec:	f7fe fcec 	bl	80101c8 <__aeabi_uldivmod>
 80117f0:	4602      	mov	r2, r0
 80117f2:	460b      	mov	r3, r1
 80117f4:	4613      	mov	r3, r2
 80117f6:	60fb      	str	r3, [r7, #12]
 80117f8:	e04a      	b.n	8011890 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80117fa:	4b30      	ldr	r3, [pc, #192]	; (80118bc <HAL_RCC_GetSysClockFreq+0x160>)
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	099b      	lsrs	r3, r3, #6
 8011800:	461a      	mov	r2, r3
 8011802:	f04f 0300 	mov.w	r3, #0
 8011806:	f240 10ff 	movw	r0, #511	; 0x1ff
 801180a:	f04f 0100 	mov.w	r1, #0
 801180e:	ea02 0400 	and.w	r4, r2, r0
 8011812:	ea03 0501 	and.w	r5, r3, r1
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	f04f 0200 	mov.w	r2, #0
 801181e:	f04f 0300 	mov.w	r3, #0
 8011822:	014b      	lsls	r3, r1, #5
 8011824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8011828:	0142      	lsls	r2, r0, #5
 801182a:	4610      	mov	r0, r2
 801182c:	4619      	mov	r1, r3
 801182e:	1b00      	subs	r0, r0, r4
 8011830:	eb61 0105 	sbc.w	r1, r1, r5
 8011834:	f04f 0200 	mov.w	r2, #0
 8011838:	f04f 0300 	mov.w	r3, #0
 801183c:	018b      	lsls	r3, r1, #6
 801183e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8011842:	0182      	lsls	r2, r0, #6
 8011844:	1a12      	subs	r2, r2, r0
 8011846:	eb63 0301 	sbc.w	r3, r3, r1
 801184a:	f04f 0000 	mov.w	r0, #0
 801184e:	f04f 0100 	mov.w	r1, #0
 8011852:	00d9      	lsls	r1, r3, #3
 8011854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8011858:	00d0      	lsls	r0, r2, #3
 801185a:	4602      	mov	r2, r0
 801185c:	460b      	mov	r3, r1
 801185e:	1912      	adds	r2, r2, r4
 8011860:	eb45 0303 	adc.w	r3, r5, r3
 8011864:	f04f 0000 	mov.w	r0, #0
 8011868:	f04f 0100 	mov.w	r1, #0
 801186c:	0299      	lsls	r1, r3, #10
 801186e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8011872:	0290      	lsls	r0, r2, #10
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	4610      	mov	r0, r2
 801187a:	4619      	mov	r1, r3
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	461a      	mov	r2, r3
 8011880:	f04f 0300 	mov.w	r3, #0
 8011884:	f7fe fca0 	bl	80101c8 <__aeabi_uldivmod>
 8011888:	4602      	mov	r2, r0
 801188a:	460b      	mov	r3, r1
 801188c:	4613      	mov	r3, r2
 801188e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011890:	4b0a      	ldr	r3, [pc, #40]	; (80118bc <HAL_RCC_GetSysClockFreq+0x160>)
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	0c1b      	lsrs	r3, r3, #16
 8011896:	f003 0303 	and.w	r3, r3, #3
 801189a:	3301      	adds	r3, #1
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80118a0:	68fa      	ldr	r2, [r7, #12]
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a8:	60bb      	str	r3, [r7, #8]
      break;
 80118aa:	e002      	b.n	80118b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80118ac:	4b04      	ldr	r3, [pc, #16]	; (80118c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80118ae:	60bb      	str	r3, [r7, #8]
      break;
 80118b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80118b2:	68bb      	ldr	r3, [r7, #8]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bdb0      	pop	{r4, r5, r7, pc}
 80118bc:	40023800 	.word	0x40023800
 80118c0:	00f42400 	.word	0x00f42400
 80118c4:	017d7840 	.word	0x017d7840

080118c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80118c8:	b480      	push	{r7}
 80118ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80118cc:	4b03      	ldr	r3, [pc, #12]	; (80118dc <HAL_RCC_GetHCLKFreq+0x14>)
 80118ce:	681b      	ldr	r3, [r3, #0]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr
 80118da:	bf00      	nop
 80118dc:	20000000 	.word	0x20000000

080118e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80118e4:	f7ff fff0 	bl	80118c8 <HAL_RCC_GetHCLKFreq>
 80118e8:	4602      	mov	r2, r0
 80118ea:	4b05      	ldr	r3, [pc, #20]	; (8011900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80118ec:	689b      	ldr	r3, [r3, #8]
 80118ee:	0a9b      	lsrs	r3, r3, #10
 80118f0:	f003 0307 	and.w	r3, r3, #7
 80118f4:	4903      	ldr	r1, [pc, #12]	; (8011904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80118f6:	5ccb      	ldrb	r3, [r1, r3]
 80118f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	40023800 	.word	0x40023800
 8011904:	08012890 	.word	0x08012890

08011908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801190c:	f7ff ffdc 	bl	80118c8 <HAL_RCC_GetHCLKFreq>
 8011910:	4602      	mov	r2, r0
 8011912:	4b05      	ldr	r3, [pc, #20]	; (8011928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	0b5b      	lsrs	r3, r3, #13
 8011918:	f003 0307 	and.w	r3, r3, #7
 801191c:	4903      	ldr	r1, [pc, #12]	; (801192c <HAL_RCC_GetPCLK2Freq+0x24>)
 801191e:	5ccb      	ldrb	r3, [r1, r3]
 8011920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011924:	4618      	mov	r0, r3
 8011926:	bd80      	pop	{r7, pc}
 8011928:	40023800 	.word	0x40023800
 801192c:	08012890 	.word	0x08012890

08011930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d101      	bne.n	8011942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801193e:	2301      	movs	r3, #1
 8011940:	e03f      	b.n	80119c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011948:	b2db      	uxtb	r3, r3
 801194a:	2b00      	cmp	r3, #0
 801194c:	d106      	bne.n	801195c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2200      	movs	r2, #0
 8011952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7fe fed4 	bl	8010704 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2224      	movs	r2, #36	; 0x24
 8011960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	68da      	ldr	r2, [r3, #12]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fd7b 	bl	8012470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	691a      	ldr	r2, [r3, #16]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	695a      	ldr	r2, [r3, #20]
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	68da      	ldr	r2, [r3, #12]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80119a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2200      	movs	r2, #0
 80119ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2220      	movs	r2, #32
 80119b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2220      	movs	r2, #32
 80119bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80119c0:	2300      	movs	r3, #0
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b08a      	sub	sp, #40	; 0x28
 80119ce:	af02      	add	r7, sp, #8
 80119d0:	60f8      	str	r0, [r7, #12]
 80119d2:	60b9      	str	r1, [r7, #8]
 80119d4:	603b      	str	r3, [r7, #0]
 80119d6:	4613      	mov	r3, r2
 80119d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80119da:	2300      	movs	r3, #0
 80119dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80119e4:	b2db      	uxtb	r3, r3
 80119e6:	2b20      	cmp	r3, #32
 80119e8:	d17c      	bne.n	8011ae4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d002      	beq.n	80119f6 <HAL_UART_Transmit+0x2c>
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d101      	bne.n	80119fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80119f6:	2301      	movs	r3, #1
 80119f8:	e075      	b.n	8011ae6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d101      	bne.n	8011a08 <HAL_UART_Transmit+0x3e>
 8011a04:	2302      	movs	r3, #2
 8011a06:	e06e      	b.n	8011ae6 <HAL_UART_Transmit+0x11c>
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2201      	movs	r2, #1
 8011a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2200      	movs	r2, #0
 8011a14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	2221      	movs	r2, #33	; 0x21
 8011a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011a1e:	f7fe ff9b 	bl	8010958 <HAL_GetTick>
 8011a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	88fa      	ldrh	r2, [r7, #6]
 8011a28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	88fa      	ldrh	r2, [r7, #6]
 8011a2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a38:	d108      	bne.n	8011a4c <HAL_UART_Transmit+0x82>
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	691b      	ldr	r3, [r3, #16]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d104      	bne.n	8011a4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8011a42:	2300      	movs	r3, #0
 8011a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	61bb      	str	r3, [r7, #24]
 8011a4a:	e003      	b.n	8011a54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a50:	2300      	movs	r3, #0
 8011a52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2200      	movs	r2, #0
 8011a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8011a5c:	e02a      	b.n	8011ab4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	9300      	str	r3, [sp, #0]
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	2200      	movs	r2, #0
 8011a66:	2180      	movs	r1, #128	; 0x80
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f000 faf9 	bl	8012060 <UART_WaitOnFlagUntilTimeout>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d001      	beq.n	8011a78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8011a74:	2303      	movs	r3, #3
 8011a76:	e036      	b.n	8011ae6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8011a78:	69fb      	ldr	r3, [r7, #28]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d10b      	bne.n	8011a96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	461a      	mov	r2, r3
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8011a8e:	69bb      	ldr	r3, [r7, #24]
 8011a90:	3302      	adds	r3, #2
 8011a92:	61bb      	str	r3, [r7, #24]
 8011a94:	e007      	b.n	8011aa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	781a      	ldrb	r2, [r3, #0]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	3b01      	subs	r3, #1
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1cf      	bne.n	8011a5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	9300      	str	r3, [sp, #0]
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	2140      	movs	r1, #64	; 0x40
 8011ac8:	68f8      	ldr	r0, [r7, #12]
 8011aca:	f000 fac9 	bl	8012060 <UART_WaitOnFlagUntilTimeout>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8011ad4:	2303      	movs	r3, #3
 8011ad6:	e006      	b.n	8011ae6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2220      	movs	r2, #32
 8011adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	e000      	b.n	8011ae6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8011ae4:	2302      	movs	r3, #2
  }
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3720      	adds	r7, #32
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
	...

08011af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b0ba      	sub	sp, #232	; 0xe8
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	695b      	ldr	r3, [r3, #20]
 8011b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8011b16:	2300      	movs	r3, #0
 8011b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8011b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b26:	f003 030f 	and.w	r3, r3, #15
 8011b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8011b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d10f      	bne.n	8011b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b3a:	f003 0320 	and.w	r3, r3, #32
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d009      	beq.n	8011b56 <HAL_UART_IRQHandler+0x66>
 8011b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b46:	f003 0320 	and.w	r3, r3, #32
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d003      	beq.n	8011b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 fbd3 	bl	80122fa <UART_Receive_IT>
      return;
 8011b54:	e256      	b.n	8012004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8011b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f000 80de 	beq.w	8011d1c <HAL_UART_IRQHandler+0x22c>
 8011b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b64:	f003 0301 	and.w	r3, r3, #1
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d106      	bne.n	8011b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8011b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f000 80d1 	beq.w	8011d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8011b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b7e:	f003 0301 	and.w	r3, r3, #1
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00b      	beq.n	8011b9e <HAL_UART_IRQHandler+0xae>
 8011b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d005      	beq.n	8011b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b96:	f043 0201 	orr.w	r2, r3, #1
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ba2:	f003 0304 	and.w	r3, r3, #4
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00b      	beq.n	8011bc2 <HAL_UART_IRQHandler+0xd2>
 8011baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bae:	f003 0301 	and.w	r3, r3, #1
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d005      	beq.n	8011bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bba:	f043 0202 	orr.w	r2, r3, #2
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8011bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bc6:	f003 0302 	and.w	r3, r3, #2
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d00b      	beq.n	8011be6 <HAL_UART_IRQHandler+0xf6>
 8011bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011bd2:	f003 0301 	and.w	r3, r3, #1
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d005      	beq.n	8011be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bde:	f043 0204 	orr.w	r2, r3, #4
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8011be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bea:	f003 0308 	and.w	r3, r3, #8
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d011      	beq.n	8011c16 <HAL_UART_IRQHandler+0x126>
 8011bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bf6:	f003 0320 	and.w	r3, r3, #32
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d105      	bne.n	8011c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8011bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c02:	f003 0301 	and.w	r3, r3, #1
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d005      	beq.n	8011c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c0e:	f043 0208 	orr.w	r2, r3, #8
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f000 81ed 	beq.w	8011ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c24:	f003 0320 	and.w	r3, r3, #32
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d008      	beq.n	8011c3e <HAL_UART_IRQHandler+0x14e>
 8011c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c30:	f003 0320 	and.w	r3, r3, #32
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d002      	beq.n	8011c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 fb5e 	bl	80122fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	695b      	ldr	r3, [r3, #20]
 8011c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c48:	2b40      	cmp	r3, #64	; 0x40
 8011c4a:	bf0c      	ite	eq
 8011c4c:	2301      	moveq	r3, #1
 8011c4e:	2300      	movne	r3, #0
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5a:	f003 0308 	and.w	r3, r3, #8
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d103      	bne.n	8011c6a <HAL_UART_IRQHandler+0x17a>
 8011c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d04f      	beq.n	8011d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 fa66 	bl	801213c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	695b      	ldr	r3, [r3, #20]
 8011c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c7a:	2b40      	cmp	r3, #64	; 0x40
 8011c7c:	d141      	bne.n	8011d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3314      	adds	r3, #20
 8011c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c8c:	e853 3f00 	ldrex	r3, [r3]
 8011c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	3314      	adds	r3, #20
 8011ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011cba:	e841 2300 	strex	r3, r2, [r1]
 8011cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d1d9      	bne.n	8011c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d013      	beq.n	8011cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cd6:	4a7d      	ldr	r2, [pc, #500]	; (8011ecc <HAL_UART_IRQHandler+0x3dc>)
 8011cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fe ffeb 	bl	8010cba <HAL_DMA_Abort_IT>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d016      	beq.n	8011d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8011cf4:	4610      	mov	r0, r2
 8011cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cf8:	e00e      	b.n	8011d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 f99a 	bl	8012034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d00:	e00a      	b.n	8011d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011d02:	6878      	ldr	r0, [r7, #4]
 8011d04:	f000 f996 	bl	8012034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d08:	e006      	b.n	8011d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 f992 	bl	8012034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	2200      	movs	r2, #0
 8011d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8011d16:	e170      	b.n	8011ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d18:	bf00      	nop
    return;
 8011d1a:	e16e      	b.n	8011ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	f040 814a 	bne.w	8011fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d2a:	f003 0310 	and.w	r3, r3, #16
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f000 8143 	beq.w	8011fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8011d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d38:	f003 0310 	and.w	r3, r3, #16
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f000 813c 	beq.w	8011fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011d42:	2300      	movs	r3, #0
 8011d44:	60bb      	str	r3, [r7, #8]
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	60bb      	str	r3, [r7, #8]
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	60bb      	str	r3, [r7, #8]
 8011d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	695b      	ldr	r3, [r3, #20]
 8011d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d62:	2b40      	cmp	r3, #64	; 0x40
 8011d64:	f040 80b4 	bne.w	8011ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	f000 8140 	beq.w	8011ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8011d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011d86:	429a      	cmp	r2, r3
 8011d88:	f080 8139 	bcs.w	8011ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d98:	69db      	ldr	r3, [r3, #28]
 8011d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d9e:	f000 8088 	beq.w	8011eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	330c      	adds	r3, #12
 8011da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011db0:	e853 3f00 	ldrex	r3, [r3]
 8011db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	330c      	adds	r3, #12
 8011dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8011dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011dde:	e841 2300 	strex	r3, r2, [r1]
 8011de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1d9      	bne.n	8011da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	3314      	adds	r3, #20
 8011df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011df8:	e853 3f00 	ldrex	r3, [r3]
 8011dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011e00:	f023 0301 	bic.w	r3, r3, #1
 8011e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3314      	adds	r3, #20
 8011e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e1e:	e841 2300 	strex	r3, r2, [r1]
 8011e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d1e1      	bne.n	8011dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	3314      	adds	r3, #20
 8011e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011e34:	e853 3f00 	ldrex	r3, [r3]
 8011e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	3314      	adds	r3, #20
 8011e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e56:	e841 2300 	strex	r3, r2, [r1]
 8011e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1e3      	bne.n	8011e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2220      	movs	r2, #32
 8011e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	330c      	adds	r3, #12
 8011e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e7a:	e853 3f00 	ldrex	r3, [r3]
 8011e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e82:	f023 0310 	bic.w	r3, r3, #16
 8011e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	330c      	adds	r3, #12
 8011e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8011e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011e9c:	e841 2300 	strex	r3, r2, [r1]
 8011ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d1e3      	bne.n	8011e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fe fe94 	bl	8010bda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	1ad3      	subs	r3, r2, r3
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 f8c0 	bl	8012048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011ec8:	e099      	b.n	8011ffe <HAL_UART_IRQHandler+0x50e>
 8011eca:	bf00      	nop
 8011ecc:	08012203 	.word	0x08012203
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f000 808b 	beq.w	8012002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8011eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	f000 8086 	beq.w	8012002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	330c      	adds	r3, #12
 8011efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	e853 3f00 	ldrex	r3, [r3]
 8011f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	330c      	adds	r3, #12
 8011f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8011f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8011f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011f22:	e841 2300 	strex	r3, r2, [r1]
 8011f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1e3      	bne.n	8011ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	3314      	adds	r3, #20
 8011f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f38:	e853 3f00 	ldrex	r3, [r3]
 8011f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8011f3e:	6a3b      	ldr	r3, [r7, #32]
 8011f40:	f023 0301 	bic.w	r3, r3, #1
 8011f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	3314      	adds	r3, #20
 8011f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011f52:	633a      	str	r2, [r7, #48]	; 0x30
 8011f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f5a:	e841 2300 	strex	r3, r2, [r1]
 8011f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d1e3      	bne.n	8011f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2220      	movs	r2, #32
 8011f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2200      	movs	r2, #0
 8011f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	330c      	adds	r3, #12
 8011f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	e853 3f00 	ldrex	r3, [r3]
 8011f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f023 0310 	bic.w	r3, r3, #16
 8011f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	330c      	adds	r3, #12
 8011f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011f98:	61fa      	str	r2, [r7, #28]
 8011f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f9c:	69b9      	ldr	r1, [r7, #24]
 8011f9e:	69fa      	ldr	r2, [r7, #28]
 8011fa0:	e841 2300 	strex	r3, r2, [r1]
 8011fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8011fa6:	697b      	ldr	r3, [r7, #20]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1e3      	bne.n	8011f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f848 	bl	8012048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8011fb8:	e023      	b.n	8012002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8011fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d009      	beq.n	8011fda <HAL_UART_IRQHandler+0x4ea>
 8011fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d003      	beq.n	8011fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 f929 	bl	801222a <UART_Transmit_IT>
    return;
 8011fd8:	e014      	b.n	8012004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8011fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00e      	beq.n	8012004 <HAL_UART_IRQHandler+0x514>
 8011fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d008      	beq.n	8012004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f000 f969 	bl	80122ca <UART_EndTransmit_IT>
    return;
 8011ff8:	e004      	b.n	8012004 <HAL_UART_IRQHandler+0x514>
    return;
 8011ffa:	bf00      	nop
 8011ffc:	e002      	b.n	8012004 <HAL_UART_IRQHandler+0x514>
      return;
 8011ffe:	bf00      	nop
 8012000:	e000      	b.n	8012004 <HAL_UART_IRQHandler+0x514>
      return;
 8012002:	bf00      	nop
  }
}
 8012004:	37e8      	adds	r7, #232	; 0xe8
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}
 801200a:	bf00      	nop

0801200c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801200c:	b480      	push	{r7}
 801200e:	b083      	sub	sp, #12
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8012014:	bf00      	nop
 8012016:	370c      	adds	r7, #12
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012020:	b480      	push	{r7}
 8012022:	b083      	sub	sp, #12
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8012028:	bf00      	nop
 801202a:	370c      	adds	r7, #12
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012034:	b480      	push	{r7}
 8012036:	b083      	sub	sp, #12
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801203c:	bf00      	nop
 801203e:	370c      	adds	r7, #12
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	460b      	mov	r3, r1
 8012052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012054:	bf00      	nop
 8012056:	370c      	adds	r7, #12
 8012058:	46bd      	mov	sp, r7
 801205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205e:	4770      	bx	lr

08012060 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b090      	sub	sp, #64	; 0x40
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	603b      	str	r3, [r7, #0]
 801206c:	4613      	mov	r3, r2
 801206e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012070:	e050      	b.n	8012114 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012078:	d04c      	beq.n	8012114 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801207a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801207c:	2b00      	cmp	r3, #0
 801207e:	d007      	beq.n	8012090 <UART_WaitOnFlagUntilTimeout+0x30>
 8012080:	f7fe fc6a 	bl	8010958 <HAL_GetTick>
 8012084:	4602      	mov	r2, r0
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801208c:	429a      	cmp	r2, r3
 801208e:	d241      	bcs.n	8012114 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	330c      	adds	r3, #12
 8012096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801209a:	e853 3f00 	ldrex	r3, [r3]
 801209e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80120a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	330c      	adds	r3, #12
 80120ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120b0:	637a      	str	r2, [r7, #52]	; 0x34
 80120b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80120b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120b8:	e841 2300 	strex	r3, r2, [r1]
 80120bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80120be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1e5      	bne.n	8012090 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	3314      	adds	r3, #20
 80120ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	e853 3f00 	ldrex	r3, [r3]
 80120d2:	613b      	str	r3, [r7, #16]
   return(result);
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	f023 0301 	bic.w	r3, r3, #1
 80120da:	63bb      	str	r3, [r7, #56]	; 0x38
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	3314      	adds	r3, #20
 80120e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120e4:	623a      	str	r2, [r7, #32]
 80120e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e8:	69f9      	ldr	r1, [r7, #28]
 80120ea:	6a3a      	ldr	r2, [r7, #32]
 80120ec:	e841 2300 	strex	r3, r2, [r1]
 80120f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80120f2:	69bb      	ldr	r3, [r7, #24]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d1e5      	bne.n	80120c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2220      	movs	r2, #32
 80120fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2220      	movs	r2, #32
 8012104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2200      	movs	r2, #0
 801210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8012110:	2303      	movs	r3, #3
 8012112:	e00f      	b.n	8012134 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	4013      	ands	r3, r2
 801211e:	68ba      	ldr	r2, [r7, #8]
 8012120:	429a      	cmp	r2, r3
 8012122:	bf0c      	ite	eq
 8012124:	2301      	moveq	r3, #1
 8012126:	2300      	movne	r3, #0
 8012128:	b2db      	uxtb	r3, r3
 801212a:	461a      	mov	r2, r3
 801212c:	79fb      	ldrb	r3, [r7, #7]
 801212e:	429a      	cmp	r2, r3
 8012130:	d09f      	beq.n	8012072 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012132:	2300      	movs	r3, #0
}
 8012134:	4618      	mov	r0, r3
 8012136:	3740      	adds	r7, #64	; 0x40
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801213c:	b480      	push	{r7}
 801213e:	b095      	sub	sp, #84	; 0x54
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	330c      	adds	r3, #12
 801214a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801214c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214e:	e853 3f00 	ldrex	r3, [r3]
 8012152:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012156:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801215a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	330c      	adds	r3, #12
 8012162:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012164:	643a      	str	r2, [r7, #64]	; 0x40
 8012166:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012168:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801216a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801216c:	e841 2300 	strex	r3, r2, [r1]
 8012170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1e5      	bne.n	8012144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	3314      	adds	r3, #20
 801217e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012180:	6a3b      	ldr	r3, [r7, #32]
 8012182:	e853 3f00 	ldrex	r3, [r3]
 8012186:	61fb      	str	r3, [r7, #28]
   return(result);
 8012188:	69fb      	ldr	r3, [r7, #28]
 801218a:	f023 0301 	bic.w	r3, r3, #1
 801218e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	3314      	adds	r3, #20
 8012196:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012198:	62fa      	str	r2, [r7, #44]	; 0x2c
 801219a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801219c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801219e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121a0:	e841 2300 	strex	r3, r2, [r1]
 80121a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1e5      	bne.n	8012178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121b0:	2b01      	cmp	r3, #1
 80121b2:	d119      	bne.n	80121e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	330c      	adds	r3, #12
 80121ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	e853 3f00 	ldrex	r3, [r3]
 80121c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	f023 0310 	bic.w	r3, r3, #16
 80121ca:	647b      	str	r3, [r7, #68]	; 0x44
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	330c      	adds	r3, #12
 80121d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121d4:	61ba      	str	r2, [r7, #24]
 80121d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121d8:	6979      	ldr	r1, [r7, #20]
 80121da:	69ba      	ldr	r2, [r7, #24]
 80121dc:	e841 2300 	strex	r3, r2, [r1]
 80121e0:	613b      	str	r3, [r7, #16]
   return(result);
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1e5      	bne.n	80121b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2220      	movs	r2, #32
 80121ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	2200      	movs	r2, #0
 80121f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80121f6:	bf00      	nop
 80121f8:	3754      	adds	r7, #84	; 0x54
 80121fa:	46bd      	mov	sp, r7
 80121fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012200:	4770      	bx	lr

08012202 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b084      	sub	sp, #16
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801220e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2200      	movs	r2, #0
 8012214:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2200      	movs	r2, #0
 801221a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f7ff ff09 	bl	8012034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012222:	bf00      	nop
 8012224:	3710      	adds	r7, #16
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801222a:	b480      	push	{r7}
 801222c:	b085      	sub	sp, #20
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012238:	b2db      	uxtb	r3, r3
 801223a:	2b21      	cmp	r3, #33	; 0x21
 801223c:	d13e      	bne.n	80122bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	689b      	ldr	r3, [r3, #8]
 8012242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012246:	d114      	bne.n	8012272 <UART_Transmit_IT+0x48>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	691b      	ldr	r3, [r3, #16]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d110      	bne.n	8012272 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a1b      	ldr	r3, [r3, #32]
 8012254:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	881b      	ldrh	r3, [r3, #0]
 801225a:	461a      	mov	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012264:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	1c9a      	adds	r2, r3, #2
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	621a      	str	r2, [r3, #32]
 8012270:	e008      	b.n	8012284 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6a1b      	ldr	r3, [r3, #32]
 8012276:	1c59      	adds	r1, r3, #1
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	6211      	str	r1, [r2, #32]
 801227c:	781a      	ldrb	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012288:	b29b      	uxth	r3, r3
 801228a:	3b01      	subs	r3, #1
 801228c:	b29b      	uxth	r3, r3
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	4619      	mov	r1, r3
 8012292:	84d1      	strh	r1, [r2, #38]	; 0x26
 8012294:	2b00      	cmp	r3, #0
 8012296:	d10f      	bne.n	80122b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	68da      	ldr	r2, [r3, #12]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80122a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	68da      	ldr	r2, [r3, #12]
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80122b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80122b8:	2300      	movs	r3, #0
 80122ba:	e000      	b.n	80122be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80122bc:	2302      	movs	r3, #2
  }
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3714      	adds	r7, #20
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr

080122ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b082      	sub	sp, #8
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68da      	ldr	r2, [r3, #12]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80122e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2220      	movs	r2, #32
 80122e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f7ff fe8e 	bl	801200c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80122f0:	2300      	movs	r3, #0
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3708      	adds	r7, #8
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b08c      	sub	sp, #48	; 0x30
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012308:	b2db      	uxtb	r3, r3
 801230a:	2b22      	cmp	r3, #34	; 0x22
 801230c:	f040 80ab 	bne.w	8012466 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	689b      	ldr	r3, [r3, #8]
 8012314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012318:	d117      	bne.n	801234a <UART_Receive_IT+0x50>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	691b      	ldr	r3, [r3, #16]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d113      	bne.n	801234a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8012322:	2300      	movs	r3, #0
 8012324:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801232a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	b29b      	uxth	r3, r3
 8012334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012338:	b29a      	uxth	r2, r3
 801233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012342:	1c9a      	adds	r2, r3, #2
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	629a      	str	r2, [r3, #40]	; 0x28
 8012348:	e026      	b.n	8012398 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801234e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8012350:	2300      	movs	r3, #0
 8012352:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	689b      	ldr	r3, [r3, #8]
 8012358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801235c:	d007      	beq.n	801236e <UART_Receive_IT+0x74>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	689b      	ldr	r3, [r3, #8]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d10a      	bne.n	801237c <UART_Receive_IT+0x82>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	691b      	ldr	r3, [r3, #16]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d106      	bne.n	801237c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	b2da      	uxtb	r2, r3
 8012376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	e008      	b.n	801238e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	b2db      	uxtb	r3, r3
 8012384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012388:	b2da      	uxtb	r2, r3
 801238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012392:	1c5a      	adds	r2, r3, #1
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801239c:	b29b      	uxth	r3, r3
 801239e:	3b01      	subs	r3, #1
 80123a0:	b29b      	uxth	r3, r3
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	4619      	mov	r1, r3
 80123a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d15a      	bne.n	8012462 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	68da      	ldr	r2, [r3, #12]
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	f022 0220 	bic.w	r2, r2, #32
 80123ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	68da      	ldr	r2, [r3, #12]
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80123ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	695a      	ldr	r2, [r3, #20]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f022 0201 	bic.w	r2, r2, #1
 80123da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2220      	movs	r2, #32
 80123e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d135      	bne.n	8012458 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	330c      	adds	r3, #12
 80123f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	e853 3f00 	ldrex	r3, [r3]
 8012400:	613b      	str	r3, [r7, #16]
   return(result);
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	f023 0310 	bic.w	r3, r3, #16
 8012408:	627b      	str	r3, [r7, #36]	; 0x24
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	330c      	adds	r3, #12
 8012410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012412:	623a      	str	r2, [r7, #32]
 8012414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012416:	69f9      	ldr	r1, [r7, #28]
 8012418:	6a3a      	ldr	r2, [r7, #32]
 801241a:	e841 2300 	strex	r3, r2, [r1]
 801241e:	61bb      	str	r3, [r7, #24]
   return(result);
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1e5      	bne.n	80123f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	f003 0310 	and.w	r3, r3, #16
 8012430:	2b10      	cmp	r3, #16
 8012432:	d10a      	bne.n	801244a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8012434:	2300      	movs	r3, #0
 8012436:	60fb      	str	r3, [r7, #12]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	60fb      	str	r3, [r7, #12]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	60fb      	str	r3, [r7, #12]
 8012448:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801244e:	4619      	mov	r1, r3
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f7ff fdf9 	bl	8012048 <HAL_UARTEx_RxEventCallback>
 8012456:	e002      	b.n	801245e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7ff fde1 	bl	8012020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801245e:	2300      	movs	r3, #0
 8012460:	e002      	b.n	8012468 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	e000      	b.n	8012468 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8012466:	2302      	movs	r3, #2
  }
}
 8012468:	4618      	mov	r0, r3
 801246a:	3730      	adds	r7, #48	; 0x30
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	b09f      	sub	sp, #124	; 0x7c
 8012476:	af00      	add	r7, sp, #0
 8012478:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801247a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	691b      	ldr	r3, [r3, #16]
 8012480:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012486:	68d9      	ldr	r1, [r3, #12]
 8012488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	ea40 0301 	orr.w	r3, r0, r1
 8012490:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012494:	689a      	ldr	r2, [r3, #8]
 8012496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	431a      	orrs	r2, r3
 801249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801249e:	695b      	ldr	r3, [r3, #20]
 80124a0:	431a      	orrs	r2, r3
 80124a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124a4:	69db      	ldr	r3, [r3, #28]
 80124a6:	4313      	orrs	r3, r2
 80124a8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80124aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80124b4:	f021 010c 	bic.w	r1, r1, #12
 80124b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80124be:	430b      	orrs	r3, r1
 80124c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80124c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	695b      	ldr	r3, [r3, #20]
 80124c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80124cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124ce:	6999      	ldr	r1, [r3, #24]
 80124d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	ea40 0301 	orr.w	r3, r0, r1
 80124d8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80124da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124dc:	681a      	ldr	r2, [r3, #0]
 80124de:	4bc5      	ldr	r3, [pc, #788]	; (80127f4 <UART_SetConfig+0x384>)
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d004      	beq.n	80124ee <UART_SetConfig+0x7e>
 80124e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	4bc3      	ldr	r3, [pc, #780]	; (80127f8 <UART_SetConfig+0x388>)
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d103      	bne.n	80124f6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80124ee:	f7ff fa0b 	bl	8011908 <HAL_RCC_GetPCLK2Freq>
 80124f2:	6778      	str	r0, [r7, #116]	; 0x74
 80124f4:	e002      	b.n	80124fc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80124f6:	f7ff f9f3 	bl	80118e0 <HAL_RCC_GetPCLK1Freq>
 80124fa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80124fe:	69db      	ldr	r3, [r3, #28]
 8012500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012504:	f040 80b6 	bne.w	8012674 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012508:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801250a:	461c      	mov	r4, r3
 801250c:	f04f 0500 	mov.w	r5, #0
 8012510:	4622      	mov	r2, r4
 8012512:	462b      	mov	r3, r5
 8012514:	1891      	adds	r1, r2, r2
 8012516:	6439      	str	r1, [r7, #64]	; 0x40
 8012518:	415b      	adcs	r3, r3
 801251a:	647b      	str	r3, [r7, #68]	; 0x44
 801251c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012520:	1912      	adds	r2, r2, r4
 8012522:	eb45 0303 	adc.w	r3, r5, r3
 8012526:	f04f 0000 	mov.w	r0, #0
 801252a:	f04f 0100 	mov.w	r1, #0
 801252e:	00d9      	lsls	r1, r3, #3
 8012530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012534:	00d0      	lsls	r0, r2, #3
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	1911      	adds	r1, r2, r4
 801253c:	6639      	str	r1, [r7, #96]	; 0x60
 801253e:	416b      	adcs	r3, r5
 8012540:	667b      	str	r3, [r7, #100]	; 0x64
 8012542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012544:	685b      	ldr	r3, [r3, #4]
 8012546:	461a      	mov	r2, r3
 8012548:	f04f 0300 	mov.w	r3, #0
 801254c:	1891      	adds	r1, r2, r2
 801254e:	63b9      	str	r1, [r7, #56]	; 0x38
 8012550:	415b      	adcs	r3, r3
 8012552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012558:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801255c:	f7fd fe34 	bl	80101c8 <__aeabi_uldivmod>
 8012560:	4602      	mov	r2, r0
 8012562:	460b      	mov	r3, r1
 8012564:	4ba5      	ldr	r3, [pc, #660]	; (80127fc <UART_SetConfig+0x38c>)
 8012566:	fba3 2302 	umull	r2, r3, r3, r2
 801256a:	095b      	lsrs	r3, r3, #5
 801256c:	011e      	lsls	r6, r3, #4
 801256e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012570:	461c      	mov	r4, r3
 8012572:	f04f 0500 	mov.w	r5, #0
 8012576:	4622      	mov	r2, r4
 8012578:	462b      	mov	r3, r5
 801257a:	1891      	adds	r1, r2, r2
 801257c:	6339      	str	r1, [r7, #48]	; 0x30
 801257e:	415b      	adcs	r3, r3
 8012580:	637b      	str	r3, [r7, #52]	; 0x34
 8012582:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012586:	1912      	adds	r2, r2, r4
 8012588:	eb45 0303 	adc.w	r3, r5, r3
 801258c:	f04f 0000 	mov.w	r0, #0
 8012590:	f04f 0100 	mov.w	r1, #0
 8012594:	00d9      	lsls	r1, r3, #3
 8012596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801259a:	00d0      	lsls	r0, r2, #3
 801259c:	4602      	mov	r2, r0
 801259e:	460b      	mov	r3, r1
 80125a0:	1911      	adds	r1, r2, r4
 80125a2:	65b9      	str	r1, [r7, #88]	; 0x58
 80125a4:	416b      	adcs	r3, r5
 80125a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80125a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80125aa:	685b      	ldr	r3, [r3, #4]
 80125ac:	461a      	mov	r2, r3
 80125ae:	f04f 0300 	mov.w	r3, #0
 80125b2:	1891      	adds	r1, r2, r2
 80125b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80125b6:	415b      	adcs	r3, r3
 80125b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80125ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80125be:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80125c2:	f7fd fe01 	bl	80101c8 <__aeabi_uldivmod>
 80125c6:	4602      	mov	r2, r0
 80125c8:	460b      	mov	r3, r1
 80125ca:	4b8c      	ldr	r3, [pc, #560]	; (80127fc <UART_SetConfig+0x38c>)
 80125cc:	fba3 1302 	umull	r1, r3, r3, r2
 80125d0:	095b      	lsrs	r3, r3, #5
 80125d2:	2164      	movs	r1, #100	; 0x64
 80125d4:	fb01 f303 	mul.w	r3, r1, r3
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	00db      	lsls	r3, r3, #3
 80125dc:	3332      	adds	r3, #50	; 0x32
 80125de:	4a87      	ldr	r2, [pc, #540]	; (80127fc <UART_SetConfig+0x38c>)
 80125e0:	fba2 2303 	umull	r2, r3, r2, r3
 80125e4:	095b      	lsrs	r3, r3, #5
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80125ec:	441e      	add	r6, r3
 80125ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80125f0:	4618      	mov	r0, r3
 80125f2:	f04f 0100 	mov.w	r1, #0
 80125f6:	4602      	mov	r2, r0
 80125f8:	460b      	mov	r3, r1
 80125fa:	1894      	adds	r4, r2, r2
 80125fc:	623c      	str	r4, [r7, #32]
 80125fe:	415b      	adcs	r3, r3
 8012600:	627b      	str	r3, [r7, #36]	; 0x24
 8012602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012606:	1812      	adds	r2, r2, r0
 8012608:	eb41 0303 	adc.w	r3, r1, r3
 801260c:	f04f 0400 	mov.w	r4, #0
 8012610:	f04f 0500 	mov.w	r5, #0
 8012614:	00dd      	lsls	r5, r3, #3
 8012616:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801261a:	00d4      	lsls	r4, r2, #3
 801261c:	4622      	mov	r2, r4
 801261e:	462b      	mov	r3, r5
 8012620:	1814      	adds	r4, r2, r0
 8012622:	653c      	str	r4, [r7, #80]	; 0x50
 8012624:	414b      	adcs	r3, r1
 8012626:	657b      	str	r3, [r7, #84]	; 0x54
 8012628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	461a      	mov	r2, r3
 801262e:	f04f 0300 	mov.w	r3, #0
 8012632:	1891      	adds	r1, r2, r2
 8012634:	61b9      	str	r1, [r7, #24]
 8012636:	415b      	adcs	r3, r3
 8012638:	61fb      	str	r3, [r7, #28]
 801263a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801263e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012642:	f7fd fdc1 	bl	80101c8 <__aeabi_uldivmod>
 8012646:	4602      	mov	r2, r0
 8012648:	460b      	mov	r3, r1
 801264a:	4b6c      	ldr	r3, [pc, #432]	; (80127fc <UART_SetConfig+0x38c>)
 801264c:	fba3 1302 	umull	r1, r3, r3, r2
 8012650:	095b      	lsrs	r3, r3, #5
 8012652:	2164      	movs	r1, #100	; 0x64
 8012654:	fb01 f303 	mul.w	r3, r1, r3
 8012658:	1ad3      	subs	r3, r2, r3
 801265a:	00db      	lsls	r3, r3, #3
 801265c:	3332      	adds	r3, #50	; 0x32
 801265e:	4a67      	ldr	r2, [pc, #412]	; (80127fc <UART_SetConfig+0x38c>)
 8012660:	fba2 2303 	umull	r2, r3, r2, r3
 8012664:	095b      	lsrs	r3, r3, #5
 8012666:	f003 0207 	and.w	r2, r3, #7
 801266a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	4432      	add	r2, r6
 8012670:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012672:	e0b9      	b.n	80127e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012676:	461c      	mov	r4, r3
 8012678:	f04f 0500 	mov.w	r5, #0
 801267c:	4622      	mov	r2, r4
 801267e:	462b      	mov	r3, r5
 8012680:	1891      	adds	r1, r2, r2
 8012682:	6139      	str	r1, [r7, #16]
 8012684:	415b      	adcs	r3, r3
 8012686:	617b      	str	r3, [r7, #20]
 8012688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801268c:	1912      	adds	r2, r2, r4
 801268e:	eb45 0303 	adc.w	r3, r5, r3
 8012692:	f04f 0000 	mov.w	r0, #0
 8012696:	f04f 0100 	mov.w	r1, #0
 801269a:	00d9      	lsls	r1, r3, #3
 801269c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80126a0:	00d0      	lsls	r0, r2, #3
 80126a2:	4602      	mov	r2, r0
 80126a4:	460b      	mov	r3, r1
 80126a6:	eb12 0804 	adds.w	r8, r2, r4
 80126aa:	eb43 0905 	adc.w	r9, r3, r5
 80126ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f04f 0100 	mov.w	r1, #0
 80126b8:	f04f 0200 	mov.w	r2, #0
 80126bc:	f04f 0300 	mov.w	r3, #0
 80126c0:	008b      	lsls	r3, r1, #2
 80126c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80126c6:	0082      	lsls	r2, r0, #2
 80126c8:	4640      	mov	r0, r8
 80126ca:	4649      	mov	r1, r9
 80126cc:	f7fd fd7c 	bl	80101c8 <__aeabi_uldivmod>
 80126d0:	4602      	mov	r2, r0
 80126d2:	460b      	mov	r3, r1
 80126d4:	4b49      	ldr	r3, [pc, #292]	; (80127fc <UART_SetConfig+0x38c>)
 80126d6:	fba3 2302 	umull	r2, r3, r3, r2
 80126da:	095b      	lsrs	r3, r3, #5
 80126dc:	011e      	lsls	r6, r3, #4
 80126de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80126e0:	4618      	mov	r0, r3
 80126e2:	f04f 0100 	mov.w	r1, #0
 80126e6:	4602      	mov	r2, r0
 80126e8:	460b      	mov	r3, r1
 80126ea:	1894      	adds	r4, r2, r2
 80126ec:	60bc      	str	r4, [r7, #8]
 80126ee:	415b      	adcs	r3, r3
 80126f0:	60fb      	str	r3, [r7, #12]
 80126f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80126f6:	1812      	adds	r2, r2, r0
 80126f8:	eb41 0303 	adc.w	r3, r1, r3
 80126fc:	f04f 0400 	mov.w	r4, #0
 8012700:	f04f 0500 	mov.w	r5, #0
 8012704:	00dd      	lsls	r5, r3, #3
 8012706:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801270a:	00d4      	lsls	r4, r2, #3
 801270c:	4622      	mov	r2, r4
 801270e:	462b      	mov	r3, r5
 8012710:	1814      	adds	r4, r2, r0
 8012712:	64bc      	str	r4, [r7, #72]	; 0x48
 8012714:	414b      	adcs	r3, r1
 8012716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	4618      	mov	r0, r3
 801271e:	f04f 0100 	mov.w	r1, #0
 8012722:	f04f 0200 	mov.w	r2, #0
 8012726:	f04f 0300 	mov.w	r3, #0
 801272a:	008b      	lsls	r3, r1, #2
 801272c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012730:	0082      	lsls	r2, r0, #2
 8012732:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8012736:	f7fd fd47 	bl	80101c8 <__aeabi_uldivmod>
 801273a:	4602      	mov	r2, r0
 801273c:	460b      	mov	r3, r1
 801273e:	4b2f      	ldr	r3, [pc, #188]	; (80127fc <UART_SetConfig+0x38c>)
 8012740:	fba3 1302 	umull	r1, r3, r3, r2
 8012744:	095b      	lsrs	r3, r3, #5
 8012746:	2164      	movs	r1, #100	; 0x64
 8012748:	fb01 f303 	mul.w	r3, r1, r3
 801274c:	1ad3      	subs	r3, r2, r3
 801274e:	011b      	lsls	r3, r3, #4
 8012750:	3332      	adds	r3, #50	; 0x32
 8012752:	4a2a      	ldr	r2, [pc, #168]	; (80127fc <UART_SetConfig+0x38c>)
 8012754:	fba2 2303 	umull	r2, r3, r2, r3
 8012758:	095b      	lsrs	r3, r3, #5
 801275a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801275e:	441e      	add	r6, r3
 8012760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012762:	4618      	mov	r0, r3
 8012764:	f04f 0100 	mov.w	r1, #0
 8012768:	4602      	mov	r2, r0
 801276a:	460b      	mov	r3, r1
 801276c:	1894      	adds	r4, r2, r2
 801276e:	603c      	str	r4, [r7, #0]
 8012770:	415b      	adcs	r3, r3
 8012772:	607b      	str	r3, [r7, #4]
 8012774:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012778:	1812      	adds	r2, r2, r0
 801277a:	eb41 0303 	adc.w	r3, r1, r3
 801277e:	f04f 0400 	mov.w	r4, #0
 8012782:	f04f 0500 	mov.w	r5, #0
 8012786:	00dd      	lsls	r5, r3, #3
 8012788:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801278c:	00d4      	lsls	r4, r2, #3
 801278e:	4622      	mov	r2, r4
 8012790:	462b      	mov	r3, r5
 8012792:	eb12 0a00 	adds.w	sl, r2, r0
 8012796:	eb43 0b01 	adc.w	fp, r3, r1
 801279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	f04f 0100 	mov.w	r1, #0
 80127a4:	f04f 0200 	mov.w	r2, #0
 80127a8:	f04f 0300 	mov.w	r3, #0
 80127ac:	008b      	lsls	r3, r1, #2
 80127ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80127b2:	0082      	lsls	r2, r0, #2
 80127b4:	4650      	mov	r0, sl
 80127b6:	4659      	mov	r1, fp
 80127b8:	f7fd fd06 	bl	80101c8 <__aeabi_uldivmod>
 80127bc:	4602      	mov	r2, r0
 80127be:	460b      	mov	r3, r1
 80127c0:	4b0e      	ldr	r3, [pc, #56]	; (80127fc <UART_SetConfig+0x38c>)
 80127c2:	fba3 1302 	umull	r1, r3, r3, r2
 80127c6:	095b      	lsrs	r3, r3, #5
 80127c8:	2164      	movs	r1, #100	; 0x64
 80127ca:	fb01 f303 	mul.w	r3, r1, r3
 80127ce:	1ad3      	subs	r3, r2, r3
 80127d0:	011b      	lsls	r3, r3, #4
 80127d2:	3332      	adds	r3, #50	; 0x32
 80127d4:	4a09      	ldr	r2, [pc, #36]	; (80127fc <UART_SetConfig+0x38c>)
 80127d6:	fba2 2303 	umull	r2, r3, r2, r3
 80127da:	095b      	lsrs	r3, r3, #5
 80127dc:	f003 020f 	and.w	r2, r3, #15
 80127e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	4432      	add	r2, r6
 80127e6:	609a      	str	r2, [r3, #8]
}
 80127e8:	bf00      	nop
 80127ea:	377c      	adds	r7, #124	; 0x7c
 80127ec:	46bd      	mov	sp, r7
 80127ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f2:	bf00      	nop
 80127f4:	40011000 	.word	0x40011000
 80127f8:	40011400 	.word	0x40011400
 80127fc:	51eb851f 	.word	0x51eb851f

08012800 <__libc_init_array>:
 8012800:	b570      	push	{r4, r5, r6, lr}
 8012802:	4d0d      	ldr	r5, [pc, #52]	; (8012838 <__libc_init_array+0x38>)
 8012804:	4c0d      	ldr	r4, [pc, #52]	; (801283c <__libc_init_array+0x3c>)
 8012806:	1b64      	subs	r4, r4, r5
 8012808:	10a4      	asrs	r4, r4, #2
 801280a:	2600      	movs	r6, #0
 801280c:	42a6      	cmp	r6, r4
 801280e:	d109      	bne.n	8012824 <__libc_init_array+0x24>
 8012810:	4d0b      	ldr	r5, [pc, #44]	; (8012840 <__libc_init_array+0x40>)
 8012812:	4c0c      	ldr	r4, [pc, #48]	; (8012844 <__libc_init_array+0x44>)
 8012814:	f000 f820 	bl	8012858 <_init>
 8012818:	1b64      	subs	r4, r4, r5
 801281a:	10a4      	asrs	r4, r4, #2
 801281c:	2600      	movs	r6, #0
 801281e:	42a6      	cmp	r6, r4
 8012820:	d105      	bne.n	801282e <__libc_init_array+0x2e>
 8012822:	bd70      	pop	{r4, r5, r6, pc}
 8012824:	f855 3b04 	ldr.w	r3, [r5], #4
 8012828:	4798      	blx	r3
 801282a:	3601      	adds	r6, #1
 801282c:	e7ee      	b.n	801280c <__libc_init_array+0xc>
 801282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012832:	4798      	blx	r3
 8012834:	3601      	adds	r6, #1
 8012836:	e7f2      	b.n	801281e <__libc_init_array+0x1e>
 8012838:	080128a0 	.word	0x080128a0
 801283c:	080128a0 	.word	0x080128a0
 8012840:	080128a0 	.word	0x080128a0
 8012844:	080128a4 	.word	0x080128a4

08012848 <memset>:
 8012848:	4402      	add	r2, r0
 801284a:	4603      	mov	r3, r0
 801284c:	4293      	cmp	r3, r2
 801284e:	d100      	bne.n	8012852 <memset+0xa>
 8012850:	4770      	bx	lr
 8012852:	f803 1b01 	strb.w	r1, [r3], #1
 8012856:	e7f9      	b.n	801284c <memset+0x4>

08012858 <_init>:
 8012858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801285a:	bf00      	nop
 801285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801285e:	bc08      	pop	{r3}
 8012860:	469e      	mov	lr, r3
 8012862:	4770      	bx	lr

08012864 <_fini>:
 8012864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012866:	bf00      	nop
 8012868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801286a:	bc08      	pop	{r3}
 801286c:	469e      	mov	lr, r3
 801286e:	4770      	bx	lr
