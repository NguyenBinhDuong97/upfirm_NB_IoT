
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003a40  08003a40  00013a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa4  08003aa4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa4  08003aa4  00013aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aac  08003aac  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000006c  08003b20  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003b20  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f93b  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ac  00000000  00000000  0002f9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00032288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002120a  00000000  00000000  000334f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e522  00000000  00000000  000546fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2969  00000000  00000000  00062c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00125585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a8  00000000  00000000  001255d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a28 	.word	0x08003a28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	08003a28 	.word	0x08003a28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 030c 	add.w	r3, r7, #12
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	60bb      	str	r3, [r7, #8]
 80004da:	4b2b      	ldr	r3, [pc, #172]	; (8000588 <MX_GPIO_Init+0xc8>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a2a      	ldr	r2, [pc, #168]	; (8000588 <MX_GPIO_Init+0xc8>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b28      	ldr	r3, [pc, #160]	; (8000588 <MX_GPIO_Init+0xc8>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4b24      	ldr	r3, [pc, #144]	; (8000588 <MX_GPIO_Init+0xc8>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a23      	ldr	r2, [pc, #140]	; (8000588 <MX_GPIO_Init+0xc8>)
 80004fc:	f043 0308 	orr.w	r3, r3, #8
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b21      	ldr	r3, [pc, #132]	; (8000588 <MX_GPIO_Init+0xc8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0308 	and.w	r3, r3, #8
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <MX_GPIO_Init+0xc8>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <MX_GPIO_Init+0xc8>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_GPIO_Init+0xc8>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_START_Pin|LED_DATA_Pin|LED_STOP_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000530:	4816      	ldr	r0, [pc, #88]	; (800058c <MX_GPIO_Init+0xcc>)
 8000532:	f001 f99d 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT_BUTTON_Pin;
 8000536:	2301      	movs	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800053a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BOOT_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	4619      	mov	r1, r3
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <MX_GPIO_Init+0xd0>)
 800054c:	f000 fff4 	bl	8001538 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_START_Pin|LED_DATA_Pin|LED_STOP_Pin|LED_ERROR_Pin;
 8000550:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	2301      	movs	r3, #1
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055e:	2300      	movs	r3, #0
 8000560:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	4619      	mov	r1, r3
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <MX_GPIO_Init+0xcc>)
 800056a:	f000 ffe5 	bl	8001538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	2006      	movs	r0, #6
 8000574:	f000 fc3b 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000578:	2006      	movs	r0, #6
 800057a:	f000 fc54 	bl	8000e26 <HAL_NVIC_EnableIRQ>

}
 800057e:	bf00      	nop
 8000580:	3720      	adds	r7, #32
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40020c00 	.word	0x40020c00
 8000590:	40020000 	.word	0x40020000

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fa6d 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f825 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f7ff ff8d 	bl	80004c0 <MX_GPIO_Init>
  MX_UART5_Init();
 80005a6:	f000 f94d 	bl	8000844 <MX_UART5_Init>
  MX_UART4_Init();
 80005aa:	f000 f921 	bl	80007f0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart4, (uint8_t*)"Staring\r\n", strlen( (char*)"Staring\r\n" ), 500);
 80005ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005b2:	2209      	movs	r2, #9
 80005b4:	490a      	ldr	r1, [pc, #40]	; (80005e0 <main+0x4c>)
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <main+0x50>)
 80005b8:	f001 ff09 	bl	80023ce <HAL_UART_Transmit>
  UART_Additional_Init();
 80005bc:	f003 f8f4 	bl	80037a8 <UART_Additional_Init>
  ApplicationBoot_Initial();
 80005c0:	f002 ffcc 	bl	800355c <ApplicationBoot_Initial>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BootApp_Event = ApplicationBoot_Get_Event_from_Queue(BootApp.sQueue, 1);
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <main+0x54>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2101      	movs	r1, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ff7d 	bl	80034ca <ApplicationBoot_Get_Event_from_Queue>
 80005d0:	4603      	mov	r3, r0
 80005d2:	71fb      	strb	r3, [r7, #7]
	  BootApp.Dispatch(BootApp_Event);
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <main+0x54>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	79fa      	ldrb	r2, [r7, #7]
 80005da:	4610      	mov	r0, r2
 80005dc:	4798      	blx	r3
	  BootApp_Event = ApplicationBoot_Get_Event_from_Queue(BootApp.sQueue, 1);
 80005de:	e7f1      	b.n	80005c4 <main+0x30>
 80005e0:	08003a40 	.word	0x08003a40
 80005e4:	2000010c 	.word	0x2000010c
 80005e8:	20000058 	.word	0x20000058

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	; 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f9f4 	bl	80039e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xb4>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <SystemClock_Config+0xb4>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <SystemClock_Config+0xb4>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <SystemClock_Config+0xb8>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <SystemClock_Config+0xb8>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <SystemClock_Config+0xb8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f953 	bl	8001908 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000668:	f000 f81e 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fbb6 	bl	8001df8 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000692:	f000 f809 	bl	80006a8 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 fa18 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  systick++;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <SysTick_Handler+0x4c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	4a0f      	ldr	r2, [pc, #60]	; (8000798 <SysTick_Handler+0x4c>)
 800075c:	6013      	str	r3, [r2, #0]
  if ((systick%50 == 0) && (Receive.ui16_length != 0))
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <SysTick_Handler+0x4c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <SysTick_Handler+0x50>)
 8000764:	fba3 1302 	umull	r1, r3, r3, r2
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	2132      	movs	r1, #50	; 0x32
 800076c:	fb01 f303 	mul.w	r3, r1, r3
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10d      	bne.n	8000792 <SysTick_Handler+0x46>
 8000776:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <SysTick_Handler+0x54>)
 8000778:	889b      	ldrh	r3, [r3, #4]
 800077a:	b29b      	uxth	r3, r3
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <SysTick_Handler+0x46>
  {
	  systick = 0;
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Handler+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
	  ApplicationBoot_Push_Event_to_Queue(BootApp.sQueue, _CHECK_LOAD_DATA_RECEIVE_DONE_);
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <SysTick_Handler+0x58>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2106      	movs	r1, #6
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fe87 	bl	80034a0 <ApplicationBoot_Push_Event_to_Queue>
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000088 	.word	0x20000088
 800079c:	51eb851f 	.word	0x51eb851f
 80007a0:	20000060 	.word	0x20000060
 80007a4:	20000058 	.word	0x20000058

080007a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f001 f893 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <UART5_IRQHandler+0x10>)
 80007be:	f001 fec9 	bl	8002554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000c8 	.word	0x200000c8

080007cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_UART4_Init+0x4c>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_UART4_Init+0x50>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_UART4_Init+0x4c>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_UART4_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_UART4_Init+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_UART4_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_UART4_Init+0x4c>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_UART4_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_UART4_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_UART4_Init+0x4c>)
 8000828:	f001 fd84 	bl	8002334 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000832:	f7ff ff39 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000010c 	.word	0x2000010c
 8000840:	40004c00 	.word	0x40004c00

08000844 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_UART5_Init+0x4c>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <MX_UART5_Init+0x50>)
 800084c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_UART5_Init+0x4c>)
 8000850:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000854:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_UART5_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_UART5_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_UART5_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_UART5_Init+0x4c>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_UART5_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_UART5_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_UART5_Init+0x4c>)
 800087c:	f001 fd5a 	bl	8002334 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000886:	f7ff ff0f 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000c8 	.word	0x200000c8
 8000894:	40005000 	.word	0x40005000

08000898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a55      	ldr	r2, [pc, #340]	; (8000a0c <HAL_UART_MspInit+0x174>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d14b      	bne.n	8000952 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
 80008be:	4b54      	ldr	r3, [pc, #336]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a53      	ldr	r2, [pc, #332]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008d2:	623b      	str	r3, [r7, #32]
 80008d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4c      	ldr	r2, [pc, #304]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
 80008f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a45      	ldr	r2, [pc, #276]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <HAL_UART_MspInit+0x178>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800090e:	2302      	movs	r3, #2
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000916:	2301      	movs	r3, #1
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800091e:	2308      	movs	r3, #8
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	483a      	ldr	r0, [pc, #232]	; (8000a14 <HAL_UART_MspInit+0x17c>)
 800092a:	f000 fe05 	bl	8001538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000938:	2301      	movs	r3, #1
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000940:	2308      	movs	r3, #8
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4833      	ldr	r0, [pc, #204]	; (8000a18 <HAL_UART_MspInit+0x180>)
 800094c:	f000 fdf4 	bl	8001538 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000950:	e057      	b.n	8000a02 <HAL_UART_MspInit+0x16a>
  else if(uartHandle->Instance==UART5)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a31      	ldr	r2, [pc, #196]	; (8000a1c <HAL_UART_MspInit+0x184>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d152      	bne.n	8000a02 <HAL_UART_MspInit+0x16a>
    __HAL_RCC_UART5_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <HAL_UART_MspInit+0x178>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a2a      	ldr	r2, [pc, #168]	; (8000a10 <HAL_UART_MspInit+0x178>)
 8000966:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <HAL_UART_MspInit+0x178>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_UART_MspInit+0x178>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <HAL_UART_MspInit+0x178>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <HAL_UART_MspInit+0x178>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_UART_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <HAL_UART_MspInit+0x178>)
 800099e:	f043 0308 	orr.w	r3, r3, #8
 80009a2:	6313      	str	r3, [r2, #48]	; 0x30
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_UART_MspInit+0x178>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	f003 0308 	and.w	r3, r3, #8
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009c2:	2308      	movs	r3, #8
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	4812      	ldr	r0, [pc, #72]	; (8000a18 <HAL_UART_MspInit+0x180>)
 80009ce:	f000 fdb3 	bl	8001538 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009d2:	2304      	movs	r3, #4
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009e2:	2308      	movs	r3, #8
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <HAL_UART_MspInit+0x188>)
 80009ee:	f000 fda3 	bl	8001538 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2035      	movs	r0, #53	; 0x35
 80009f8:	f000 f9f9 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80009fc:	2035      	movs	r0, #53	; 0x35
 80009fe:	f000 fa12 	bl	8000e26 <HAL_NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3738      	adds	r7, #56	; 0x38
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40004c00 	.word	0x40004c00
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40005000 	.word	0x40005000
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a2a:	490e      	ldr	r1, [pc, #56]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a2c:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a40:	4c0b      	ldr	r4, [pc, #44]	; (8000a70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff febd 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 ffa5 	bl	80039a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd9d 	bl	8000594 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a68:	08003ab4 	.word	0x08003ab4
  ldr r2, =_sbss
 8000a6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a70:	20000198 	.word	0x20000198

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f999 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f83c 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe02 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <HAL_DeInit+0x54>)
 8000ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_DeInit+0x54>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_DeInit+0x54>)
 8000ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_DeInit+0x54>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <HAL_DeInit+0x54>)
 8000ade:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_DeInit+0x54>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_DeInit+0x54>)
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_DeInit+0x54>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HAL_DeInit+0x54>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_DeInit+0x54>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000b06:	f000 f805 	bl	8000b14 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f981 	bl	8000e4a <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f945 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000150 	.word	0x20000150

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000150 	.word	0x20000150

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000008 	.word	0x20000008

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6c:	f3bf 8f4f 	dsb	sy
}
 8000d70:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <__NVIC_SystemReset+0x24>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000d7a:	4904      	ldr	r1, [pc, #16]	; (8000d8c <__NVIC_SystemReset+0x24>)
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_SystemReset+0x28>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d82:	f3bf 8f4f 	dsb	sy
}
 8000d86:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <__NVIC_SystemReset+0x20>
 8000d8c:	e000ed00 	.word	0xe000ed00
 8000d90:	05fa0004 	.word	0x05fa0004

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff78 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff13 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff28 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff78 	bl	8000d00 <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff47 	bl	8000cac <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff1b 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000e46:	f7ff ff8f 	bl	8000d68 <__NVIC_SystemReset>

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ff9e 	bl	8000d94 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff fe9c 	bl	8000bac <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d008      	beq.n	8000e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e052      	b.n	8000f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0216 	bic.w	r2, r2, #22
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <HAL_DMA_Abort+0x62>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d007      	beq.n	8000ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0208 	bic.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee4:	e013      	b.n	8000f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee6:	f7ff fe61 	bl	8000bac <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d90c      	bls.n	8000f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e015      	b.n	8000f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e4      	bne.n	8000ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f20:	223f      	movs	r2, #63	; 0x3f
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d004      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2280      	movs	r2, #128	; 0x80
 8000f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e00c      	b.n	8000f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2205      	movs	r2, #5
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_FLASH_Program+0xa0>)
 8000f9c:	7e1b      	ldrb	r3, [r3, #24]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_FLASH_Program+0x1e>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e03b      	b.n	800101e <HAL_FLASH_Program+0x96>
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <HAL_FLASH_Program+0xa0>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000fb0:	f000 f870 	bl	8001094 <FLASH_WaitForLastOperation>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d12b      	bne.n	8001016 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d105      	bne.n	8000fd0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000fc4:	783b      	ldrb	r3, [r7, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	68b8      	ldr	r0, [r7, #8]
 8000fca:	f000 f91b 	bl	8001204 <FLASH_Program_Byte>
 8000fce:	e016      	b.n	8000ffe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d105      	bne.n	8000fe2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000fd6:	883b      	ldrh	r3, [r7, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f000 f8ee 	bl	80011bc <FLASH_Program_HalfWord>
 8000fe0:	e00d      	b.n	8000ffe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d105      	bne.n	8000ff4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	68b8      	ldr	r0, [r7, #8]
 8000fee:	f000 f8c3 	bl	8001178 <FLASH_Program_Word>
 8000ff2:	e004      	b.n	8000ffe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ff8:	68b8      	ldr	r0, [r7, #8]
 8000ffa:	f000 f88b 	bl	8001114 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ffe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001002:	f000 f847 	bl	8001094 <FLASH_WaitForLastOperation>
 8001006:	4603      	mov	r3, r0
 8001008:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_FLASH_Program+0xa4>)
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_FLASH_Program+0xa4>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <HAL_FLASH_Program+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800101c:	7dfb      	ldrb	r3, [r7, #23]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000154 	.word	0x20000154
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0b      	bge.n	800105a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_FLASH_Unlock+0x3c>)
 8001046:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_FLASH_Unlock+0x40>)
 800104c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_FLASH_Unlock+0x38>)
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da01      	bge.n	800105a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40023c00 	.word	0x40023c00
 800106c:	45670123 	.word	0x45670123
 8001070:	cdef89ab 	.word	0xcdef89ab

08001074 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <HAL_FLASH_Lock+0x1c>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_FLASH_Lock+0x1c>)
 800107e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001082:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40023c00 	.word	0x40023c00

08001094 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <FLASH_WaitForLastOperation+0x78>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80010a6:	f7ff fd81 	bl	8000bac <HAL_GetTick>
 80010aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010ac:	e010      	b.n	80010d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b4:	d00c      	beq.n	80010d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <FLASH_WaitForLastOperation+0x38>
 80010bc:	f7ff fd76 	bl	8000bac <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d201      	bcs.n	80010d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e019      	b.n	8001104 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e8      	bne.n	80010ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <FLASH_WaitForLastOperation+0x7c>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010fa:	f000 f8a5 	bl	8001248 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
  
}  
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20000154 	.word	0x20000154
 8001110:	40023c00 	.word	0x40023c00

08001114 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 8001126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800112a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 800112e:	691b      	ldr	r3, [r3, #16]
 8001130:	4a10      	ldr	r2, [pc, #64]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 8001132:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <FLASH_Program_DoubleWord+0x60>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800114a:	f3bf 8f6f 	isb	sy
}
 800114e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001150:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	000a      	movs	r2, r1
 800115e:	2300      	movs	r3, #0
 8001160:	68f9      	ldr	r1, [r7, #12]
 8001162:	3104      	adds	r1, #4
 8001164:	4613      	mov	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023c00 	.word	0x40023c00

08001178 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800118c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <FLASH_Program_Word+0x40>)
 8001194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <FLASH_Program_Word+0x40>)
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <FLASH_Program_Word+0x40>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40023c00 	.word	0x40023c00

080011bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	4a09      	ldr	r2, [pc, #36]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <FLASH_Program_HalfWord+0x44>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	801a      	strh	r2, [r3, #0]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800121a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <FLASH_Program_Byte+0x40>)
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <FLASH_Program_Byte+0x40>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	4a06      	ldr	r2, [pc, #24]	; (8001244 <FLASH_Program_Byte+0x40>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	78fa      	ldrb	r2, [r7, #3]
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800124c:	4b27      	ldr	r3, [pc, #156]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 800125a:	69db      	ldr	r3, [r3, #28]
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001262:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001264:	4b21      	ldr	r3, [pc, #132]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 8001266:	2210      	movs	r2, #16
 8001268:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f003 0320 	and.w	r3, r3, #32
 8001272:	2b00      	cmp	r3, #0
 8001274:	d008      	beq.n	8001288 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	4a1c      	ldr	r2, [pc, #112]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001280:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001282:	4b1a      	ldr	r3, [pc, #104]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 8001284:	2220      	movs	r2, #32
 8001286:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 800129e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012a2:	2240      	movs	r2, #64	; 0x40
 80012a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f043 0302 	orr.w	r3, r3, #2
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012c0:	2280      	movs	r2, #128	; 0x80
 80012c2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <FLASH_SetErrorCode+0xa8>)
 80012da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <FLASH_SetErrorCode+0xa4>)
 80012de:	2202      	movs	r2, #2
 80012e0:	60da      	str	r2, [r3, #12]
  }
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40023c00 	.word	0x40023c00
 80012f0:	20000154 	.word	0x20000154

080012f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_FLASHEx_Erase+0xd8>)
 8001308:	7e1b      	ldrb	r3, [r3, #24]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_FLASHEx_Erase+0x1e>
 800130e:	2302      	movs	r3, #2
 8001310:	e058      	b.n	80013c4 <HAL_FLASHEx_Erase+0xd0>
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_FLASHEx_Erase+0xd8>)
 8001314:	2201      	movs	r2, #1
 8001316:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001318:	f24c 3050 	movw	r0, #50000	; 0xc350
 800131c:	f7ff feba 	bl	8001094 <FLASH_WaitForLastOperation>
 8001320:	4603      	mov	r3, r0
 8001322:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d148      	bne.n	80013bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f04f 32ff 	mov.w	r2, #4294967295
 8001330:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d115      	bne.n	8001366 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f000 f844 	bl	80013d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800134c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001350:	f7ff fea0 	bl	8001094 <FLASH_WaitForLastOperation>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_FLASHEx_Erase+0xdc>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_FLASHEx_Erase+0xdc>)
 800135e:	f023 0304 	bic.w	r3, r3, #4
 8001362:	6113      	str	r3, [r2, #16]
 8001364:	e028      	b.n	80013b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	e01c      	b.n	80013a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	68b8      	ldr	r0, [r7, #8]
 8001378:	f000 f850 	bl	800141c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800137c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001380:	f7ff fe88 	bl	8001094 <FLASH_WaitForLastOperation>
 8001384:	4603      	mov	r3, r0
 8001386:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_FLASHEx_Erase+0xdc>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	4a10      	ldr	r2, [pc, #64]	; (80013d0 <HAL_FLASHEx_Erase+0xdc>)
 800138e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001392:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	601a      	str	r2, [r3, #0]
          break;
 80013a0:	e00a      	b.n	80013b8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	4413      	add	r3, r2
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3da      	bcc.n	800136e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80013b8:	f000 f878 	bl	80014ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_FLASHEx_Erase+0xd8>)
 80013be:	2200      	movs	r2, #0
 80013c0:	761a      	strb	r2, [r3, #24]

  return status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000154 	.word	0x20000154
 80013d0:	40023c00 	.word	0x40023c00

080013d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <FLASH_MassErase+0x44>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <FLASH_MassErase+0x44>)
 80013e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <FLASH_MassErase+0x44>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <FLASH_MassErase+0x44>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <FLASH_MassErase+0x44>)
 80013fa:	691a      	ldr	r2, [r3, #16]
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4313      	orrs	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <FLASH_MassErase+0x44>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001408:	6113      	str	r3, [r2, #16]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00

0800141c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e010      	b.n	800145a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d103      	bne.n	8001446 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800143e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e009      	b.n	800145a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d103      	bne.n	8001454 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800144c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	e002      	b.n	800145a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001454:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001458:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001464:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	490f      	ldr	r1, [pc, #60]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001478:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800147c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800147e:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4313      	orrs	r3, r2
 8001488:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <FLASH_Erase_Sector+0x8c>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6113      	str	r3, [r2, #16]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023c00 	.word	0x40023c00

080014ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80014b0:	4b20      	ldr	r3, [pc, #128]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d017      	beq.n	80014ec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a1c      	ldr	r2, [pc, #112]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014c6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80014c8:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b17      	ldr	r3, [pc, #92]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a16      	ldr	r2, [pc, #88]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014de:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a13      	ldr	r2, [pc, #76]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d017      	beq.n	8001528 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80014f8:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0d      	ldr	r2, [pc, #52]	; (8001534 <FLASH_FlushCaches+0x88>)
 80014fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001502:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <FLASH_FlushCaches+0x88>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <FLASH_FlushCaches+0x88>)
 800150a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <FLASH_FlushCaches+0x88>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <FLASH_FlushCaches+0x88>)
 8001516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800151a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <FLASH_FlushCaches+0x88>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <FLASH_FlushCaches+0x88>)
 8001522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001526:	6013      	str	r3, [r2, #0]
  }
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e16b      	b.n	800182c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001554:	2201      	movs	r2, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	f040 815a 	bne.w	8001826 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	2b01      	cmp	r3, #1
 800157c:	d005      	beq.n	800158a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	2b02      	cmp	r3, #2
 8001588:	d130      	bne.n	80015ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0201 	and.w	r2, r3, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d123      	bne.n	800167c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	220f      	movs	r2, #15
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691a      	ldr	r2, [r3, #16]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	08da      	lsrs	r2, r3, #3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3208      	adds	r2, #8
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0203 	and.w	r2, r3, #3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80b4 	beq.w	8001826 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	4b60      	ldr	r3, [pc, #384]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a5f      	ldr	r2, [pc, #380]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b5d      	ldr	r3, [pc, #372]	; (8001844 <HAL_GPIO_Init+0x30c>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016da:	4a5b      	ldr	r2, [pc, #364]	; (8001848 <HAL_GPIO_Init+0x310>)
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4013      	ands	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	; (800184c <HAL_GPIO_Init+0x314>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d02b      	beq.n	800175e <HAL_GPIO_Init+0x226>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_GPIO_Init+0x318>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d025      	beq.n	800175a <HAL_GPIO_Init+0x222>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a50      	ldr	r2, [pc, #320]	; (8001854 <HAL_GPIO_Init+0x31c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d01f      	beq.n	8001756 <HAL_GPIO_Init+0x21e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	; (8001858 <HAL_GPIO_Init+0x320>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d019      	beq.n	8001752 <HAL_GPIO_Init+0x21a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4e      	ldr	r2, [pc, #312]	; (800185c <HAL_GPIO_Init+0x324>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0x216>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4d      	ldr	r2, [pc, #308]	; (8001860 <HAL_GPIO_Init+0x328>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d00d      	beq.n	800174a <HAL_GPIO_Init+0x212>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4c      	ldr	r2, [pc, #304]	; (8001864 <HAL_GPIO_Init+0x32c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d007      	beq.n	8001746 <HAL_GPIO_Init+0x20e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4b      	ldr	r2, [pc, #300]	; (8001868 <HAL_GPIO_Init+0x330>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d101      	bne.n	8001742 <HAL_GPIO_Init+0x20a>
 800173e:	2307      	movs	r3, #7
 8001740:	e00e      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001742:	2308      	movs	r3, #8
 8001744:	e00c      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001746:	2306      	movs	r3, #6
 8001748:	e00a      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174a:	2305      	movs	r3, #5
 800174c:	e008      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800174e:	2304      	movs	r3, #4
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <HAL_GPIO_Init+0x228>
 8001756:	2302      	movs	r3, #2
 8001758:	e002      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_GPIO_Init+0x228>
 800175e:	2300      	movs	r3, #0
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f002 0203 	and.w	r2, r2, #3
 8001766:	0092      	lsls	r2, r2, #2
 8001768:	4093      	lsls	r3, r2
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001770:	4935      	ldr	r1, [pc, #212]	; (8001848 <HAL_GPIO_Init+0x310>)
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_GPIO_Init+0x334>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017a2:	4a32      	ldr	r2, [pc, #200]	; (800186c <HAL_GPIO_Init+0x334>)
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_GPIO_Init+0x334>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_GPIO_Init+0x334>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_GPIO_Init+0x334>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_GPIO_Init+0x334>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_GPIO_Init+0x334>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_GPIO_Init+0x334>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3301      	adds	r3, #1
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	2b0f      	cmp	r3, #15
 8001830:	f67f ae90 	bls.w	8001554 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40013800 	.word	0x40013800
 800184c:	40020000 	.word	0x40020000
 8001850:	40020400 	.word	0x40020400
 8001854:	40020800 	.word	0x40020800
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40021000 	.word	0x40021000
 8001860:	40021400 	.word	0x40021400
 8001864:	40021800 	.word	0x40021800
 8001868:	40021c00 	.word	0x40021c00
 800186c:	40013c00 	.word	0x40013c00

08001870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
 800187c:	4613      	mov	r3, r2
 800187e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001880:	787b      	ldrb	r3, [r7, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800188c:	e003      	b.n	8001896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	041a      	lsls	r2, r3, #16
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	619a      	str	r2, [r3, #24]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b4:	887a      	ldrh	r2, [r7, #2]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4013      	ands	r3, r2
 80018ba:	041a      	lsls	r2, r3, #16
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	43d9      	mvns	r1, r3
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	400b      	ands	r3, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
}
 80018ca:	bf00      	nop
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fe00 	bl	80034fc <HAL_GPIO_EXTI_Callback>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40013c00 	.word	0x40013c00

08001908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e264      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d075      	beq.n	8001a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001926:	4ba3      	ldr	r3, [pc, #652]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b04      	cmp	r3, #4
 8001930:	d00c      	beq.n	800194c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001932:	4ba0      	ldr	r3, [pc, #640]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800193a:	2b08      	cmp	r3, #8
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193e:	4b9d      	ldr	r3, [pc, #628]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194a:	d10b      	bne.n	8001964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	4b99      	ldr	r3, [pc, #612]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d05b      	beq.n	8001a10 <HAL_RCC_OscConfig+0x108>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d157      	bne.n	8001a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e23f      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196c:	d106      	bne.n	800197c <HAL_RCC_OscConfig+0x74>
 800196e:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a90      	ldr	r2, [pc, #576]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x98>
 8001986:	4b8b      	ldr	r3, [pc, #556]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a8a      	ldr	r2, [pc, #552]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b88      	ldr	r3, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a87      	ldr	r2, [pc, #540]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xb0>
 80019a0:	4b84      	ldr	r3, [pc, #528]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a83      	ldr	r2, [pc, #524]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b81      	ldr	r3, [pc, #516]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a80      	ldr	r2, [pc, #512]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f8f4 	bl	8000bac <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff f8f0 	bl	8000bac <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e204      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xc0>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff f8e0 	bl	8000bac <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff f8dc 	bl	8000bac <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1f0      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b6c      	ldr	r3, [pc, #432]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0xe8>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1e:	4b65      	ldr	r3, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a36:	4b5f      	ldr	r3, [pc, #380]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b5c      	ldr	r3, [pc, #368]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1c4      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4952      	ldr	r1, [pc, #328]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b4f      	ldr	r3, [pc, #316]	; (8001bb8 <HAL_RCC_OscConfig+0x2b0>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f895 	bl	8000bac <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff f891 	bl	8000bac <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1a5      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4940      	ldr	r1, [pc, #256]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <HAL_RCC_OscConfig+0x2b0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f874 	bl	8000bac <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff f870 	bl	8000bac <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e184      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d030      	beq.n	8001b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_OscConfig+0x2b4>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f854 	bl	8000bac <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff f850 	bl	8000bac <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e164      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x200>
 8001b26:	e015      	b.n	8001b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x2b4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2e:	f7ff f83d 	bl	8000bac <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff f839 	bl	8000bac <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e14d      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f0      	bne.n	8001b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a0 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x2b8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d121      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_RCC_OscConfig+0x2b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <HAL_RCC_OscConfig+0x2b8>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7fe ffff 	bl	8000bac <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e011      	b.n	8001bd6 <HAL_RCC_OscConfig+0x2ce>
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	42470000 	.word	0x42470000
 8001bbc:	42470e80 	.word	0x42470e80
 8001bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc4:	f7fe fff2 	bl	8000bac <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e106      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <HAL_RCC_OscConfig+0x4e4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d106      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x2f0>
 8001bea:	4b81      	ldr	r3, [pc, #516]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a80      	ldr	r2, [pc, #512]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf6:	e01c      	b.n	8001c32 <HAL_RCC_OscConfig+0x32a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	d10c      	bne.n	8001c1a <HAL_RCC_OscConfig+0x312>
 8001c00:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	4a7a      	ldr	r2, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0c:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c10:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6713      	str	r3, [r2, #112]	; 0x70
 8001c18:	e00b      	b.n	8001c32 <HAL_RCC_OscConfig+0x32a>
 8001c1a:	4b75      	ldr	r3, [pc, #468]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	4a74      	ldr	r2, [pc, #464]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6713      	str	r3, [r2, #112]	; 0x70
 8001c26:	4b72      	ldr	r3, [pc, #456]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a71      	ldr	r2, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c2c:	f023 0304 	bic.w	r3, r3, #4
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7fe ffb7 	bl	8000bac <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7fe ffb3 	bl	8000bac <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0c5      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c58:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0ee      	beq.n	8001c42 <HAL_RCC_OscConfig+0x33a>
 8001c64:	e014      	b.n	8001c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7fe ffa1 	bl	8000bac <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6c:	e00a      	b.n	8001c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe ff9d 	bl	8000bac <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0af      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c84:	4b5a      	ldr	r3, [pc, #360]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1ee      	bne.n	8001c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d105      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c96:	4b56      	ldr	r3, [pc, #344]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a55      	ldr	r2, [pc, #340]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 809b 	beq.w	8001de2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cac:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d05c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d141      	bne.n	8001d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc0:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <HAL_RCC_OscConfig+0x4ec>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7fe ff71 	bl	8000bac <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe ff6d 	bl	8000bac <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e081      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce0:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69da      	ldr	r2, [r3, #28]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	019b      	lsls	r3, r3, #6
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	3b01      	subs	r3, #1
 8001d06:	041b      	lsls	r3, r3, #16
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	061b      	lsls	r3, r3, #24
 8001d10:	4937      	ldr	r1, [pc, #220]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_OscConfig+0x4ec>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff46 	bl	8000bac <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ff42 	bl	8000bac <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e056      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x41c>
 8001d42:	e04e      	b.n	8001de2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_OscConfig+0x4ec>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe ff2f 	bl	8000bac <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d52:	f7fe ff2b 	bl	8000bac <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e03f      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x44a>
 8001d70:	e037      	b.n	8001de2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e032      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d7e:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <HAL_RCC_OscConfig+0x4e8>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d028      	beq.n	8001dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d121      	bne.n	8001dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d11a      	bne.n	8001dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d111      	bne.n	8001dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d001      	beq.n	8001de2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40007000 	.word	0x40007000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	42470060 	.word	0x42470060

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0cc      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b68      	ldr	r3, [pc, #416]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d90c      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b65      	ldr	r3, [pc, #404]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d044      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e06f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e067      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f023 0203 	bic.w	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee8:	f7fe fe60 	bl	8000bac <HAL_GetTick>
 8001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	e00a      	b.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef0:	f7fe fe5c 	bl	8000bac <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e04f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 020c 	and.w	r2, r3, #12
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d1eb      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d20c      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fdc0 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08003a8c 	.word	0x08003a8c
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fca:	2100      	movs	r1, #0
 8001fcc:	6079      	str	r1, [r7, #4]
 8001fce:	2100      	movs	r1, #0
 8001fd0:	60f9      	str	r1, [r7, #12]
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fda:	4952      	ldr	r1, [pc, #328]	; (8002124 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fdc:	6889      	ldr	r1, [r1, #8]
 8001fde:	f001 010c 	and.w	r1, r1, #12
 8001fe2:	2908      	cmp	r1, #8
 8001fe4:	d00d      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x3e>
 8001fe6:	2908      	cmp	r1, #8
 8001fe8:	f200 8094 	bhi.w	8002114 <HAL_RCC_GetSysClockFreq+0x150>
 8001fec:	2900      	cmp	r1, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ff0:	2904      	cmp	r1, #4
 8001ff2:	d003      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x38>
 8001ff4:	e08e      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff6:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCC_GetSysClockFreq+0x164>)
 8001ff8:	60bb      	str	r3, [r7, #8]
       break;
 8001ffa:	e08e      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	; (800212c <HAL_RCC_GetSysClockFreq+0x168>)
 8001ffe:	60bb      	str	r3, [r7, #8]
      break;
 8002000:	e08b      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002002:	4948      	ldr	r1, [pc, #288]	; (8002124 <HAL_RCC_GetSysClockFreq+0x160>)
 8002004:	6849      	ldr	r1, [r1, #4]
 8002006:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800200a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800200c:	4945      	ldr	r1, [pc, #276]	; (8002124 <HAL_RCC_GetSysClockFreq+0x160>)
 800200e:	6849      	ldr	r1, [r1, #4]
 8002010:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002014:	2900      	cmp	r1, #0
 8002016:	d024      	beq.n	8002062 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002018:	4942      	ldr	r1, [pc, #264]	; (8002124 <HAL_RCC_GetSysClockFreq+0x160>)
 800201a:	6849      	ldr	r1, [r1, #4]
 800201c:	0989      	lsrs	r1, r1, #6
 800201e:	4608      	mov	r0, r1
 8002020:	f04f 0100 	mov.w	r1, #0
 8002024:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002028:	f04f 0500 	mov.w	r5, #0
 800202c:	ea00 0204 	and.w	r2, r0, r4
 8002030:	ea01 0305 	and.w	r3, r1, r5
 8002034:	493d      	ldr	r1, [pc, #244]	; (800212c <HAL_RCC_GetSysClockFreq+0x168>)
 8002036:	fb01 f003 	mul.w	r0, r1, r3
 800203a:	2100      	movs	r1, #0
 800203c:	fb01 f102 	mul.w	r1, r1, r2
 8002040:	1844      	adds	r4, r0, r1
 8002042:	493a      	ldr	r1, [pc, #232]	; (800212c <HAL_RCC_GetSysClockFreq+0x168>)
 8002044:	fba2 0101 	umull	r0, r1, r2, r1
 8002048:	1863      	adds	r3, r4, r1
 800204a:	4619      	mov	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	461a      	mov	r2, r3
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	f7fe f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4613      	mov	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	e04a      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_RCC_GetSysClockFreq+0x160>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	461a      	mov	r2, r3
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	ea02 0400 	and.w	r4, r2, r0
 800207a:	ea03 0501 	and.w	r5, r3, r1
 800207e:	4620      	mov	r0, r4
 8002080:	4629      	mov	r1, r5
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	014b      	lsls	r3, r1, #5
 800208c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002090:	0142      	lsls	r2, r0, #5
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	1b00      	subs	r0, r0, r4
 8002098:	eb61 0105 	sbc.w	r1, r1, r5
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	018b      	lsls	r3, r1, #6
 80020a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020aa:	0182      	lsls	r2, r0, #6
 80020ac:	1a12      	subs	r2, r2, r0
 80020ae:	eb63 0301 	sbc.w	r3, r3, r1
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	00d9      	lsls	r1, r3, #3
 80020bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020c0:	00d0      	lsls	r0, r2, #3
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	1912      	adds	r2, r2, r4
 80020c8:	eb45 0303 	adc.w	r3, r5, r3
 80020cc:	f04f 0000 	mov.w	r0, #0
 80020d0:	f04f 0100 	mov.w	r1, #0
 80020d4:	0299      	lsls	r1, r3, #10
 80020d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020da:	0290      	lsls	r0, r2, #10
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	f7fe f86c 	bl	80001c8 <__aeabi_uldivmod>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4613      	mov	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <HAL_RCC_GetSysClockFreq+0x160>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	0c1b      	lsrs	r3, r3, #16
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	3301      	adds	r3, #1
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	60bb      	str	r3, [r7, #8]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <HAL_RCC_GetSysClockFreq+0x164>)
 8002116:	60bb      	str	r3, [r7, #8]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	68bb      	ldr	r3, [r7, #8]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bdb0      	pop	{r4, r5, r7, pc}
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400
 800212c:	017d7840 	.word	0x017d7840

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	08003a9c 	.word	0x08003a9c

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffdc 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	08003a9c 	.word	0x08003a9c

08002198 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800219e:	f7fe fd05 	bl	8000bac <HAL_GetTick>
 80021a2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80021a4:	4b5d      	ldr	r3, [pc, #372]	; (800231c <HAL_RCC_DeInit+0x184>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a5c      	ldr	r2, [pc, #368]	; (800231c <HAL_RCC_DeInit+0x184>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7fe fcfb 	bl	8000bac <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0a7      	b.n	8002314 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <HAL_RCC_DeInit+0x184>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d0f0      	beq.n	80021b2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80021d0:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_RCC_DeInit+0x184>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a51      	ldr	r2, [pc, #324]	; (800231c <HAL_RCC_DeInit+0x184>)
 80021d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80021dc:	f7fe fce6 	bl	8000bac <HAL_GetTick>
 80021e0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_RCC_DeInit+0x184>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ea:	f7fe fcdf 	bl	8000bac <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e089      	b.n	8002314 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002200:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ee      	bne.n	80021ea <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800220c:	f7fe fcce 	bl	8000bac <HAL_GetTick>
 8002210:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a41      	ldr	r2, [pc, #260]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002218:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800221c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe fcc4 	bl	8000bac <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e070      	b.n	8002314 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800223e:	f7fe fcb5 	bl	8000bac <HAL_GetTick>
 8002242:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002244:	4b35      	ldr	r3, [pc, #212]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_RCC_DeInit+0x184>)
 800224a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002250:	e008      	b.n	8002264 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002252:	f7fe fcab 	bl	8000bac <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e057      	b.n	8002314 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002264:	4b2d      	ldr	r3, [pc, #180]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1f0      	bne.n	8002252 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002270:	f7fe fc9c 	bl	8000bac <HAL_GetTick>
 8002274:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a28      	ldr	r2, [pc, #160]	; (800231c <HAL_RCC_DeInit+0x184>)
 800227c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002280:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002284:	f7fe fc92 	bl	8000bac <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e03e      	b.n	8002314 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_DeInit+0x184>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_RCC_DeInit+0x188>)
 80022a6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022aa:	4a1e      	ldr	r2, [pc, #120]	; (8002324 <HAL_RCC_DeInit+0x18c>)
 80022ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80022ba:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a16      	ldr	r2, [pc, #88]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a13      	ldr	r2, [pc, #76]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022ce:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80022d2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022de:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_RCC_DeInit+0x184>)
 80022f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022f6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_DeInit+0x190>)
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_RCC_DeInit+0x194>)
 80022fc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_RCC_DeInit+0x198>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fc0e 	bl	8000b24 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002312:	2300      	movs	r3, #0
  }
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800
 8002320:	04003010 	.word	0x04003010
 8002324:	20003000 	.word	0x20003000
 8002328:	20000000 	.word	0x20000000
 800232c:	00f42400 	.word	0x00f42400
 8002330:	20000004 	.word	0x20000004

08002334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e03f      	b.n	80023c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fa9c 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fddb 	bl	8002f34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800238c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695a      	ldr	r2, [r3, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800239c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b08a      	sub	sp, #40	; 0x28
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	d17c      	bne.n	80024e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_UART_Transmit+0x2c>
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e075      	b.n	80024ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_UART_Transmit+0x3e>
 8002408:	2302      	movs	r3, #2
 800240a:	e06e      	b.n	80024ea <HAL_UART_Transmit+0x11c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	; 0x21
 800241e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002422:	f7fe fbc3 	bl	8000bac <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d108      	bne.n	8002450 <HAL_UART_Transmit+0x82>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	e003      	b.n	8002458 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002460:	e02a      	b.n	80024b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2200      	movs	r2, #0
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fb1f 	bl	8002ab0 <UART_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e036      	b.n	80024ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10b      	bne.n	800249a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	3302      	adds	r3, #2
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	e007      	b.n	80024aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	3301      	adds	r3, #1
 80024a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1cf      	bne.n	8002462 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2140      	movs	r1, #64	; 0x40
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 faef 	bl	8002ab0 <UART_WaitOnFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e006      	b.n	80024ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	4613      	mov	r3, r2
 80024fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b20      	cmp	r3, #32
 800250a:	d11d      	bne.n	8002548 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_UART_Receive_IT+0x26>
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e016      	b.n	800254a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_UART_Receive_IT+0x38>
 8002526:	2302      	movs	r3, #2
 8002528:	e00f      	b.n	800254a <HAL_UART_Receive_IT+0x58>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	461a      	mov	r2, r3
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 fb24 	bl	8002b8c <UART_Start_Receive_IT>
 8002544:	4603      	mov	r3, r0
 8002546:	e000      	b.n	800254a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b0ba      	sub	sp, #232	; 0xe8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10f      	bne.n	80025ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800259a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
 80025a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fc03 	bl	8002dbe <UART_Receive_IT>
      return;
 80025b8:	e256      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80de 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
 80025c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80d1 	beq.w	8002780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
 80025ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
 800260e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f043 0204 	orr.w	r2, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800264a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d011      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
 8002656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0208 	orr.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 81ed 	beq.w	8002a5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002688:	f003 0320 	and.w	r3, r3, #32
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
 8002690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fb8e 	bl	8002dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	bf0c      	ite	eq
 80026b0:	2301      	moveq	r3, #1
 80026b2:	2300      	movne	r3, #0
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_UART_IRQHandler+0x17a>
 80026c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04f      	beq.n	800276e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa96 	bl	8002c00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d141      	bne.n	8002766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	3314      	adds	r3, #20
 80026e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3314      	adds	r3, #20
 800270a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800270e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800271a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1d9      	bne.n	80026e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	2b00      	cmp	r3, #0
 8002734:	d013      	beq.n	800275e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	4a7d      	ldr	r2, [pc, #500]	; (8002930 <HAL_UART_IRQHandler+0x3dc>)
 800273c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fbfd 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002758:	4610      	mov	r0, r2
 800275a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800275c:	e00e      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f990 	bl	8002a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002764:	e00a      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f98c 	bl	8002a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276c:	e006      	b.n	800277c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f988 	bl	8002a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800277a:	e170      	b.n	8002a5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	bf00      	nop
    return;
 800277e:	e16e      	b.n	8002a5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b01      	cmp	r3, #1
 8002786:	f040 814a 	bne.w	8002a1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8143 	beq.w	8002a1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 813c 	beq.w	8002a1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	f040 80b4 	bne.w	8002934 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8140 	beq.w	8002a62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ea:	429a      	cmp	r2, r3
 80027ec:	f080 8139 	bcs.w	8002a62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002802:	f000 8088 	beq.w	8002916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002814:	e853 3f00 	ldrex	r3, [r3]
 8002818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800281c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800283e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800284a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1d9      	bne.n	8002806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3314      	adds	r3, #20
 8002858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3314      	adds	r3, #20
 8002872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800287a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800287e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e1      	bne.n	8002852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3314      	adds	r3, #20
 8002894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002898:	e853 3f00 	ldrex	r3, [r3]
 800289c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	3314      	adds	r3, #20
 80028ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ba:	e841 2300 	strex	r3, r2, [r1]
 80028be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1e3      	bne.n	800288e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e6:	f023 0310 	bic.w	r3, r3, #16
 80028ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80028fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e3      	bne.n	80028d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe faa6 	bl	8000e62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800291e:	b29b      	uxth	r3, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	b29b      	uxth	r3, r3
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8b6 	bl	8002a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800292c:	e099      	b.n	8002a62 <HAL_UART_IRQHandler+0x50e>
 800292e:	bf00      	nop
 8002930:	08002cc7 	.word	0x08002cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800293c:	b29b      	uxth	r3, r3
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 808b 	beq.w	8002a66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8086 	beq.w	8002a66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	330c      	adds	r3, #12
 8002960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800296a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	330c      	adds	r3, #12
 800297a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800297e:	647a      	str	r2, [r7, #68]	; 0x44
 8002980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800298c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e3      	bne.n	800295a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	e853 3f00 	ldrex	r3, [r3]
 80029a0:	623b      	str	r3, [r7, #32]
   return(result);
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3314      	adds	r3, #20
 80029b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029b6:	633a      	str	r2, [r7, #48]	; 0x30
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029be:	e841 2300 	strex	r3, r2, [r1]
 80029c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1e3      	bne.n	8002992 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	330c      	adds	r3, #12
 80029de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	e853 3f00 	ldrex	r3, [r3]
 80029e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f023 0310 	bic.w	r3, r3, #16
 80029ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	330c      	adds	r3, #12
 80029f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029fc:	61fa      	str	r2, [r7, #28]
 80029fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	617b      	str	r3, [r7, #20]
   return(result);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e3      	bne.n	80029d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a14:	4619      	mov	r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f83e 	bl	8002a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a1c:	e023      	b.n	8002a66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d009      	beq.n	8002a3e <HAL_UART_IRQHandler+0x4ea>
 8002a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f959 	bl	8002cee <UART_Transmit_IT>
    return;
 8002a3c:	e014      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <HAL_UART_IRQHandler+0x514>
 8002a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f999 	bl	8002d8e <UART_EndTransmit_IT>
    return;
 8002a5c:	e004      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
    return;
 8002a5e:	bf00      	nop
 8002a60:	e002      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
      return;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HAL_UART_IRQHandler+0x514>
      return;
 8002a66:	bf00      	nop
  }
}
 8002a68:	37e8      	adds	r7, #232	; 0xe8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop

08002a70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b090      	sub	sp, #64	; 0x40
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac0:	e050      	b.n	8002b64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d04c      	beq.n	8002b64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d007      	beq.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ad0:	f7fe f86c 	bl	8000bac <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d241      	bcs.n	8002b64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	e853 3f00 	ldrex	r3, [r3]
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	330c      	adds	r3, #12
 8002afe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b00:	637a      	str	r2, [r7, #52]	; 0x34
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b08:	e841 2300 	strex	r3, r2, [r1]
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e5      	bne.n	8002ae0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3314      	adds	r3, #20
 8002b1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	613b      	str	r3, [r7, #16]
   return(result);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3314      	adds	r3, #20
 8002b32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b34:	623a      	str	r2, [r7, #32]
 8002b36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b38:	69f9      	ldr	r1, [r7, #28]
 8002b3a:	6a3a      	ldr	r2, [r7, #32]
 8002b3c:	e841 2300 	strex	r3, r2, [r1]
 8002b40:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1e5      	bne.n	8002b14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e00f      	b.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	bf0c      	ite	eq
 8002b74:	2301      	moveq	r3, #1
 8002b76:	2300      	movne	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d09f      	beq.n	8002ac2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3740      	adds	r7, #64	; 0x40
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	88fa      	ldrh	r2, [r7, #6]
 8002ba4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2222      	movs	r2, #34	; 0x22
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0220 	orr.w	r2, r2, #32
 8002bf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b095      	sub	sp, #84	; 0x54
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	330c      	adds	r3, #12
 8002c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c28:	643a      	str	r2, [r7, #64]	; 0x40
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c30:	e841 2300 	strex	r3, r2, [r1]
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e5      	bne.n	8002c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3314      	adds	r3, #20
 8002c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3314      	adds	r3, #20
 8002c5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d119      	bne.n	8002cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f023 0310 	bic.w	r3, r3, #16
 8002c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c98:	61ba      	str	r2, [r7, #24]
 8002c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e5      	bne.n	8002c78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cba:	bf00      	nop
 8002cbc:	3754      	adds	r7, #84	; 0x54
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff fecf 	bl	8002a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b21      	cmp	r3, #33	; 0x21
 8002d00:	d13e      	bne.n	8002d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0a:	d114      	bne.n	8002d36 <UART_Transmit_IT+0x48>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d110      	bne.n	8002d36 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	1c9a      	adds	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	621a      	str	r2, [r3, #32]
 8002d34:	e008      	b.n	8002d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	1c59      	adds	r1, r3, #1
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6211      	str	r1, [r2, #32]
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10f      	bne.n	8002d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fe5e 	bl	8002a70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08c      	sub	sp, #48	; 0x30
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b22      	cmp	r3, #34	; 0x22
 8002dd0:	f040 80ab 	bne.w	8002f2a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ddc:	d117      	bne.n	8002e0e <UART_Receive_IT+0x50>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d113      	bne.n	8002e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	1c9a      	adds	r2, r3, #2
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e0c:	e026      	b.n	8002e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d007      	beq.n	8002e32 <UART_Receive_IT+0x74>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <UART_Receive_IT+0x82>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	701a      	strb	r2, [r3, #0]
 8002e3e:	e008      	b.n	8002e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4619      	mov	r1, r3
 8002e6a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d15a      	bne.n	8002f26 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0220 	bic.w	r2, r2, #32
 8002e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0201 	bic.w	r2, r2, #1
 8002e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d135      	bne.n	8002f1c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	330c      	adds	r3, #12
 8002ebc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f023 0310 	bic.w	r3, r3, #16
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	330c      	adds	r3, #12
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	623a      	str	r2, [r7, #32]
 8002ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	69f9      	ldr	r1, [r7, #28]
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e5      	bne.n	8002eb6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b10      	cmp	r3, #16
 8002ef6:	d10a      	bne.n	8002f0e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fdbf 	bl	8002a98 <HAL_UARTEx_RxEventCallback>
 8002f1a:	e002      	b.n	8002f22 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fc51 	bl	80037c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e002      	b.n	8002f2c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e000      	b.n	8002f2c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f2a:	2302      	movs	r3, #2
  }
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3730      	adds	r7, #48	; 0x30
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f38:	b09f      	sub	sp, #124	; 0x7c
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	68d9      	ldr	r1, [r3, #12]
 8002f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	ea40 0301 	orr.w	r3, r0, r1
 8002f54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f78:	f021 010c 	bic.w	r1, r1, #12
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f92:	6999      	ldr	r1, [r3, #24]
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	ea40 0301 	orr.w	r3, r0, r1
 8002f9c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4bc5      	ldr	r3, [pc, #788]	; (80032b8 <UART_SetConfig+0x384>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d004      	beq.n	8002fb2 <UART_SetConfig+0x7e>
 8002fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4bc3      	ldr	r3, [pc, #780]	; (80032bc <UART_SetConfig+0x388>)
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d103      	bne.n	8002fba <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb2:	f7ff f8dd 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8002fb6:	6778      	str	r0, [r7, #116]	; 0x74
 8002fb8:	e002      	b.n	8002fc0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fba:	f7ff f8c5 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8002fbe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc8:	f040 80b6 	bne.w	8003138 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fce:	461c      	mov	r4, r3
 8002fd0:	f04f 0500 	mov.w	r5, #0
 8002fd4:	4622      	mov	r2, r4
 8002fd6:	462b      	mov	r3, r5
 8002fd8:	1891      	adds	r1, r2, r2
 8002fda:	6439      	str	r1, [r7, #64]	; 0x40
 8002fdc:	415b      	adcs	r3, r3
 8002fde:	647b      	str	r3, [r7, #68]	; 0x44
 8002fe0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fe4:	1912      	adds	r2, r2, r4
 8002fe6:	eb45 0303 	adc.w	r3, r5, r3
 8002fea:	f04f 0000 	mov.w	r0, #0
 8002fee:	f04f 0100 	mov.w	r1, #0
 8002ff2:	00d9      	lsls	r1, r3, #3
 8002ff4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ff8:	00d0      	lsls	r0, r2, #3
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	1911      	adds	r1, r2, r4
 8003000:	6639      	str	r1, [r7, #96]	; 0x60
 8003002:	416b      	adcs	r3, r5
 8003004:	667b      	str	r3, [r7, #100]	; 0x64
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	461a      	mov	r2, r3
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	1891      	adds	r1, r2, r2
 8003012:	63b9      	str	r1, [r7, #56]	; 0x38
 8003014:	415b      	adcs	r3, r3
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800301c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003020:	f7fd f8d2 	bl	80001c8 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4ba5      	ldr	r3, [pc, #660]	; (80032c0 <UART_SetConfig+0x38c>)
 800302a:	fba3 2302 	umull	r2, r3, r3, r2
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	011e      	lsls	r6, r3, #4
 8003032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003034:	461c      	mov	r4, r3
 8003036:	f04f 0500 	mov.w	r5, #0
 800303a:	4622      	mov	r2, r4
 800303c:	462b      	mov	r3, r5
 800303e:	1891      	adds	r1, r2, r2
 8003040:	6339      	str	r1, [r7, #48]	; 0x30
 8003042:	415b      	adcs	r3, r3
 8003044:	637b      	str	r3, [r7, #52]	; 0x34
 8003046:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800304a:	1912      	adds	r2, r2, r4
 800304c:	eb45 0303 	adc.w	r3, r5, r3
 8003050:	f04f 0000 	mov.w	r0, #0
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	00d9      	lsls	r1, r3, #3
 800305a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800305e:	00d0      	lsls	r0, r2, #3
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	1911      	adds	r1, r2, r4
 8003066:	65b9      	str	r1, [r7, #88]	; 0x58
 8003068:	416b      	adcs	r3, r5
 800306a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800306c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	461a      	mov	r2, r3
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	1891      	adds	r1, r2, r2
 8003078:	62b9      	str	r1, [r7, #40]	; 0x28
 800307a:	415b      	adcs	r3, r3
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800307e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003082:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003086:	f7fd f89f 	bl	80001c8 <__aeabi_uldivmod>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4b8c      	ldr	r3, [pc, #560]	; (80032c0 <UART_SetConfig+0x38c>)
 8003090:	fba3 1302 	umull	r1, r3, r3, r2
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	2164      	movs	r1, #100	; 0x64
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	3332      	adds	r3, #50	; 0x32
 80030a2:	4a87      	ldr	r2, [pc, #540]	; (80032c0 <UART_SetConfig+0x38c>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	095b      	lsrs	r3, r3, #5
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b0:	441e      	add	r6, r3
 80030b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b4:	4618      	mov	r0, r3
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	1894      	adds	r4, r2, r2
 80030c0:	623c      	str	r4, [r7, #32]
 80030c2:	415b      	adcs	r3, r3
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030ca:	1812      	adds	r2, r2, r0
 80030cc:	eb41 0303 	adc.w	r3, r1, r3
 80030d0:	f04f 0400 	mov.w	r4, #0
 80030d4:	f04f 0500 	mov.w	r5, #0
 80030d8:	00dd      	lsls	r5, r3, #3
 80030da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030de:	00d4      	lsls	r4, r2, #3
 80030e0:	4622      	mov	r2, r4
 80030e2:	462b      	mov	r3, r5
 80030e4:	1814      	adds	r4, r2, r0
 80030e6:	653c      	str	r4, [r7, #80]	; 0x50
 80030e8:	414b      	adcs	r3, r1
 80030ea:	657b      	str	r3, [r7, #84]	; 0x54
 80030ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	1891      	adds	r1, r2, r2
 80030f8:	61b9      	str	r1, [r7, #24]
 80030fa:	415b      	adcs	r3, r3
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003102:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003106:	f7fd f85f 	bl	80001c8 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <UART_SetConfig+0x38c>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3332      	adds	r3, #50	; 0x32
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <UART_SetConfig+0x38c>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 0207 	and.w	r2, r3, #7
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4432      	add	r2, r6
 8003134:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003136:	e0b9      	b.n	80032ac <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313a:	461c      	mov	r4, r3
 800313c:	f04f 0500 	mov.w	r5, #0
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	1891      	adds	r1, r2, r2
 8003146:	6139      	str	r1, [r7, #16]
 8003148:	415b      	adcs	r3, r3
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003150:	1912      	adds	r2, r2, r4
 8003152:	eb45 0303 	adc.w	r3, r5, r3
 8003156:	f04f 0000 	mov.w	r0, #0
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	00d9      	lsls	r1, r3, #3
 8003160:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003164:	00d0      	lsls	r0, r2, #3
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	eb12 0804 	adds.w	r8, r2, r4
 800316e:	eb43 0905 	adc.w	r9, r3, r5
 8003172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4618      	mov	r0, r3
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	008b      	lsls	r3, r1, #2
 8003186:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800318a:	0082      	lsls	r2, r0, #2
 800318c:	4640      	mov	r0, r8
 800318e:	4649      	mov	r1, r9
 8003190:	f7fd f81a 	bl	80001c8 <__aeabi_uldivmod>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <UART_SetConfig+0x38c>)
 800319a:	fba3 2302 	umull	r2, r3, r3, r2
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	011e      	lsls	r6, r3, #4
 80031a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	1894      	adds	r4, r2, r2
 80031b0:	60bc      	str	r4, [r7, #8]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	1812      	adds	r2, r2, r0
 80031bc:	eb41 0303 	adc.w	r3, r1, r3
 80031c0:	f04f 0400 	mov.w	r4, #0
 80031c4:	f04f 0500 	mov.w	r5, #0
 80031c8:	00dd      	lsls	r5, r3, #3
 80031ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ce:	00d4      	lsls	r4, r2, #3
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	1814      	adds	r4, r2, r0
 80031d6:	64bc      	str	r4, [r7, #72]	; 0x48
 80031d8:	414b      	adcs	r3, r1
 80031da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f04f 0100 	mov.w	r1, #0
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031f4:	0082      	lsls	r2, r0, #2
 80031f6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80031fa:	f7fc ffe5 	bl	80001c8 <__aeabi_uldivmod>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <UART_SetConfig+0x38c>)
 8003204:	fba3 1302 	umull	r1, r3, r3, r2
 8003208:	095b      	lsrs	r3, r3, #5
 800320a:	2164      	movs	r1, #100	; 0x64
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	3332      	adds	r3, #50	; 0x32
 8003216:	4a2a      	ldr	r2, [pc, #168]	; (80032c0 <UART_SetConfig+0x38c>)
 8003218:	fba2 2303 	umull	r2, r3, r2, r3
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003222:	441e      	add	r6, r3
 8003224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003226:	4618      	mov	r0, r3
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	4602      	mov	r2, r0
 800322e:	460b      	mov	r3, r1
 8003230:	1894      	adds	r4, r2, r2
 8003232:	603c      	str	r4, [r7, #0]
 8003234:	415b      	adcs	r3, r3
 8003236:	607b      	str	r3, [r7, #4]
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	1812      	adds	r2, r2, r0
 800323e:	eb41 0303 	adc.w	r3, r1, r3
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	f04f 0500 	mov.w	r5, #0
 800324a:	00dd      	lsls	r5, r3, #3
 800324c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003250:	00d4      	lsls	r4, r2, #3
 8003252:	4622      	mov	r2, r4
 8003254:	462b      	mov	r3, r5
 8003256:	eb12 0a00 	adds.w	sl, r2, r0
 800325a:	eb43 0b01 	adc.w	fp, r3, r1
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	008b      	lsls	r3, r1, #2
 8003272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003276:	0082      	lsls	r2, r0, #2
 8003278:	4650      	mov	r0, sl
 800327a:	4659      	mov	r1, fp
 800327c:	f7fc ffa4 	bl	80001c8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <UART_SetConfig+0x38c>)
 8003286:	fba3 1302 	umull	r1, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2164      	movs	r1, #100	; 0x64
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a09      	ldr	r2, [pc, #36]	; (80032c0 <UART_SetConfig+0x38c>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 020f 	and.w	r2, r3, #15
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4432      	add	r2, r6
 80032aa:	609a      	str	r2, [r3, #8]
}
 80032ac:	bf00      	nop
 80032ae:	377c      	adds	r7, #124	; 0x7c
 80032b0:	46bd      	mov	sp, r7
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f

080032c4 <Convert_Hex_to_Int2>:
    result = strtol ((char*)HexArray, NULL, 16);
    return result;
}

uint64_t Convert_Hex_to_Int2(uint8_t *HexArray, uint8_t NumberHex)
{
 80032c4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80032c8:	b089      	sub	sp, #36	; 0x24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	460b      	mov	r3, r1
 80032d0:	70fb      	strb	r3, [r7, #3]
    // Initializing base value to 1, i.e 16^0
    uint64_t base = 1;
 80032d2:	f04f 0201 	mov.w	r2, #1
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9c7 2306 	strd	r2, r3, [r7, #24]

    uint64_t dec_val = 0;
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // Extracting characters as digits from last
    // character
    for (int i = NumberHex - 1; i >= 0; i--)
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
 80032f0:	e06a      	b.n	80033c8 <Convert_Hex_to_Int2+0x104>
    {
        // if character lies in '0'-'9', converting
        // it to integral 0-9 by subtracting 48 from
        // ASCII value
        if ( *(HexArray + i) >= '0' && *(HexArray + i) <= '9')
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b2f      	cmp	r3, #47	; 0x2f
 80032fc:	d92d      	bls.n	800335a <Convert_Hex_to_Int2+0x96>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b39      	cmp	r3, #57	; 0x39
 8003308:	d827      	bhi.n	800335a <Convert_Hex_to_Int2+0x96>
        {
            dec_val = dec_val + (*(HexArray + i) - 48)* base;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	3b30      	subs	r3, #48	; 0x30
 8003314:	461a      	mov	r2, r3
 8003316:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800331a:	69b9      	ldr	r1, [r7, #24]
 800331c:	fb03 f001 	mul.w	r0, r3, r1
 8003320:	69f9      	ldr	r1, [r7, #28]
 8003322:	fb02 f101 	mul.w	r1, r2, r1
 8003326:	4401      	add	r1, r0
 8003328:	69b8      	ldr	r0, [r7, #24]
 800332a:	fba0 2302 	umull	r2, r3, r0, r2
 800332e:	4419      	add	r1, r3
 8003330:	460b      	mov	r3, r1
 8003332:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003336:	1884      	adds	r4, r0, r2
 8003338:	eb41 0503 	adc.w	r5, r1, r3
 800333c:	e9c7 4504 	strd	r4, r5, [r7, #16]
            // incrementing base by power
            base = base * 16;
 8003340:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	010b      	lsls	r3, r1, #4
 800334e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8003352:	0102      	lsls	r2, r0, #4
 8003354:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003358:	e033      	b.n	80033c2 <Convert_Hex_to_Int2+0xfe>
        }

        // if character lies in 'A'-'F' , converting
        // it to integral 10 - 15 by subtracting 55
        // from ASCII value
        else if (*(HexArray + i) >= 'A' && *(HexArray + i) <= 'F')
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d92d      	bls.n	80033c2 <Convert_Hex_to_Int2+0xfe>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b46      	cmp	r3, #70	; 0x46
 8003370:	d827      	bhi.n	80033c2 <Convert_Hex_to_Int2+0xfe>
        {
            dec_val = dec_val + ((*(HexArray + i) - 55) * base);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3b37      	subs	r3, #55	; 0x37
 800337c:	461a      	mov	r2, r3
 800337e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8003382:	69b9      	ldr	r1, [r7, #24]
 8003384:	fb03 f001 	mul.w	r0, r3, r1
 8003388:	69f9      	ldr	r1, [r7, #28]
 800338a:	fb02 f101 	mul.w	r1, r2, r1
 800338e:	4401      	add	r1, r0
 8003390:	69b8      	ldr	r0, [r7, #24]
 8003392:	fba0 2302 	umull	r2, r3, r0, r2
 8003396:	4419      	add	r1, r3
 8003398:	460b      	mov	r3, r1
 800339a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800339e:	eb10 0802 	adds.w	r8, r0, r2
 80033a2:	eb41 0903 	adc.w	r9, r1, r3
 80033a6:	e9c7 8904 	strd	r8, r9, [r7, #16]
            // incrementing base by power
            base = base * 16;
 80033aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	010b      	lsls	r3, r1, #4
 80033b8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80033bc:	0102      	lsls	r2, r0, #4
 80033be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = NumberHex - 1; i >= 0; i--)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	da91      	bge.n	80032f2 <Convert_Hex_to_Int2+0x2e>
        }
    }
    return dec_val;
 80033ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	3724      	adds	r7, #36	; 0x24
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80033de:	4770      	bx	lr

080033e0 <ApplicationBoot_Hanlde_Event>:
	.Dispatch = ApplicationBoot_Hanlde_Event,
};

volatile uint8_t CheckReceive = 0;
void ApplicationBoot_Hanlde_Event (event Event)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	71fb      	strb	r3, [r7, #7]
	switch (Event)
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	2b09      	cmp	r3, #9
 80033f0:	d84a      	bhi.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
 80033f2:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <ApplicationBoot_Hanlde_Event+0x18>)
 80033f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f8:	08003421 	.word	0x08003421
 80033fc:	08003483 	.word	0x08003483
 8003400:	08003449 	.word	0x08003449
 8003404:	08003483 	.word	0x08003483
 8003408:	08003483 	.word	0x08003483
 800340c:	08003455 	.word	0x08003455
 8003410:	08003477 	.word	0x08003477
 8003414:	0800347d 	.word	0x0800347d
 8003418:	08003483 	.word	0x08003483
 800341c:	08003483 	.word	0x08003483
	{
	    case _INITIAL_:
            GPIO_Led_Initial();
 8003420:	f000 f9a6 	bl	8003770 <GPIO_Led_Initial>
            if (enter_boot == 1)
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <ApplicationBoot_Hanlde_Event+0xb0>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d106      	bne.n	800343a <ApplicationBoot_Hanlde_Event+0x5a>
            	ApplicationBoot_Push_Event_to_Queue(BootApp.sQueue, _BOOT_START_);
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <ApplicationBoot_Hanlde_Event+0xb4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2103      	movs	r1, #3
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f834 	bl	80034a0 <ApplicationBoot_Push_Event_to_Queue>
            else
            {
            	ApplicationBoot_Push_Event_to_Queue(BootApp.sQueue, _CALL_APPLICATION_);
            }
	        break;
 8003438:	e026      	b.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
            	ApplicationBoot_Push_Event_to_Queue(BootApp.sQueue, _CALL_APPLICATION_);
 800343a:	4b16      	ldr	r3, [pc, #88]	; (8003494 <ApplicationBoot_Hanlde_Event+0xb4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2108      	movs	r1, #8
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f82d 	bl	80034a0 <ApplicationBoot_Push_Event_to_Queue>
	        break;
 8003446:	e01f      	b.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
	    case _PUSH_BOOT_BUTTON_:
	    	break;
	    case _BOOT_START_:
	    	ApplicationBoot_BootStart_Hanlde();
 8003448:	f000 f896 	bl	8003578 <ApplicationBoot_BootStart_Hanlde>
	    	EventApp = _BOOTING_;
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <ApplicationBoot_Hanlde_Event+0xb8>)
 800344e:	2204      	movs	r2, #4
 8003450:	701a      	strb	r2, [r3, #0]
	    	break;
 8003452:	e019      	b.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
//            {
//            	ApplicationBoot_Push_Event_to_Queue (BootApp.sQueue, _CHECK_RECEIVE_);
//           //CheckReceive = 0;
//            }

	    	if (Receive.ui16_length != 0)
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <ApplicationBoot_Hanlde_Event+0xbc>)
 8003456:	889b      	ldrh	r3, [r3, #4]
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d013      	beq.n	8003486 <ApplicationBoot_Hanlde_Event+0xa6>
	    	{
	    		if (ApplicationBoot_Check_Receive_DataLoad_Done() == 1)
 800345e:	f000 f85d 	bl	800351c <ApplicationBoot_Check_Receive_DataLoad_Done>
 8003462:	4603      	mov	r3, r0
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10e      	bne.n	8003486 <ApplicationBoot_Hanlde_Event+0xa6>
	    			ApplicationBoot_Push_Event_to_Queue (BootApp.sQueue, _CHECK_RECEIVE_);
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <ApplicationBoot_Hanlde_Event+0xb4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2107      	movs	r1, #7
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f816 	bl	80034a0 <ApplicationBoot_Push_Event_to_Queue>
	    	}
	    	break;
 8003474:	e007      	b.n	8003486 <ApplicationBoot_Hanlde_Event+0xa6>
	    case _CHECK_RECEIVE_:
	    	ApplicationBoot_UART_CheckReceive();
 8003476:	f000 f895 	bl	80035a4 <ApplicationBoot_UART_CheckReceive>
//	    	UART_Reset_Data(&Receive);
	    	break;
 800347a:	e005      	b.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
	    case _CALL_APPLICATION_:
	    	ApplicationBoot_Jumpto_ApplicationProgram();
 800347c:	f000 f918 	bl	80036b0 <ApplicationBoot_Jumpto_ApplicationProgram>
	    	break;
 8003480:	e002      	b.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
	    	break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <ApplicationBoot_Hanlde_Event+0xa8>
	    	break;
 8003486:	bf00      	nop
	    case _CHECK_BOOT_PROCESS_:
	    	break;
	    case _BOOT_ERROR_:
	    	break;
	}
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2000008c 	.word	0x2000008c
 8003494:	20000058 	.word	0x20000058
 8003498:	20000030 	.word	0x20000030
 800349c:	20000060 	.word	0x20000060

080034a0 <ApplicationBoot_Push_Event_to_Queue>:
	ApplicationEvent = NameEvent;
	return 1;
}

uint8_t ApplicationBoot_Push_Event_to_Queue (sQueue_Struct_TypeDef *AppQueue, event EventName)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
	if (Q_push_data_to_queue( AppQueue, EventName ) == 0 )
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa0f 	bl	80038d4 <Q_push_data_to_queue>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <ApplicationBoot_Push_Event_to_Queue+0x20>
		return 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	e000      	b.n	80034c2 <ApplicationBoot_Push_Event_to_Queue+0x22>
	return 1;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <ApplicationBoot_Get_Event_from_Queue>:

uint8_t ApplicationBoot_Get_Event_from_Queue (sQueue_Struct_TypeDef *AppQueue, uint8_t Type)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
	uint8_t result = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
	result = Q_get_data_from_queue( AppQueue, Type );
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	4619      	mov	r1, r3
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa28 	bl	8003934 <Q_get_data_from_queue>
 80034e4:	4603      	mov	r3, r0
 80034e6:	73fb      	strb	r3, [r7, #15]
	if (result == 0)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <ApplicationBoot_Get_Event_from_Queue+0x28>
		return 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <ApplicationBoot_Get_Event_from_Queue+0x2a>
	return result;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	80fb      	strh	r3, [r7, #6]
	enter_boot = 1;
 8003506:	4b04      	ldr	r3, [pc, #16]	; (8003518 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003508:	2201      	movs	r2, #1
 800350a:	701a      	strb	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	2000008c 	.word	0x2000008c

0800351c <ApplicationBoot_Check_Receive_DataLoad_Done>:

uint8_t ApplicationBoot_Check_Receive_DataLoad_Done (void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
    if (ui16_PrevReceive == 8)
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <ApplicationBoot_Check_Receive_DataLoad_Done+0x38>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	2b08      	cmp	r3, #8
 8003526:	d101      	bne.n	800352c <ApplicationBoot_Check_Receive_DataLoad_Done+0x10>
    	return 1;
 8003528:	2301      	movs	r3, #1
 800352a:	e00d      	b.n	8003548 <ApplicationBoot_Check_Receive_DataLoad_Done+0x2c>
    else if ((ui16_PrevReceive != Receive.ui16_length) )
 800352c:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <ApplicationBoot_Check_Receive_DataLoad_Done+0x3c>)
 800352e:	889b      	ldrh	r3, [r3, #4]
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <ApplicationBoot_Check_Receive_DataLoad_Done+0x38>)
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d006      	beq.n	8003548 <ApplicationBoot_Check_Receive_DataLoad_Done+0x2c>
    {
    	ui16_PrevReceive = Receive.ui16_length;
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <ApplicationBoot_Check_Receive_DataLoad_Done+0x3c>)
 800353c:	889b      	ldrh	r3, [r3, #4]
 800353e:	b29a      	uxth	r2, r3
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <ApplicationBoot_Check_Receive_DataLoad_Done+0x38>)
 8003542:	801a      	strh	r2, [r3, #0]
    	return 0;
 8003544:	2300      	movs	r3, #0
 8003546:	e7ff      	b.n	8003548 <ApplicationBoot_Check_Receive_DataLoad_Done+0x2c>
    }
}
 8003548:	4618      	mov	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	200000c4 	.word	0x200000c4
 8003558:	20000060 	.word	0x20000060

0800355c <ApplicationBoot_Initial>:

uint8_t ApplicationBoot_Initial (void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
	ApplicationBoot_Push_Event_to_Queue(BootApp.sQueue, _INITIAL_);
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <ApplicationBoot_Initial+0x18>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff9a 	bl	80034a0 <ApplicationBoot_Push_Event_to_Queue>
    return 1;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000058 	.word	0x20000058

08003578 <ApplicationBoot_BootStart_Hanlde>:

uint8_t ApplicationBoot_BootStart_Hanlde(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
	GPIO_Led_BootStart_Notify();
 800357c:	f000 f8d6 	bl	800372c <GPIO_Led_BootStart_Notify>
	HAL_FLASH_Unlock();
 8003580:	f7fd fd56 	bl	8001030 <HAL_FLASH_Unlock>
	ApplicationBoot_EraseFlash_ApplicationProgram();
 8003584:	f000 f8be 	bl	8003704 <ApplicationBoot_EraseFlash_ApplicationProgram>
    UART_Send_ACK(&ACK_START);
 8003588:	4804      	ldr	r0, [pc, #16]	; (800359c <ApplicationBoot_BootStart_Hanlde+0x24>)
 800358a:	f000 f975 	bl	8003878 <UART_Send_ACK>
    sent_boot = 1;
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <ApplicationBoot_BootStart_Hanlde+0x28>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
	return 1;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	2000008d 	.word	0x2000008d

080035a4 <ApplicationBoot_UART_CheckReceive>:

uint8_t ApplicationBoot_UART_CheckReceive(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
	uint64_t LoadValue = 0;
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9c7 2300 	strd	r2, r3, [r7]
	//Kiem tra cac URC va thuc hien cac chuc nang duoc yeu cau
	switch (EventApp)
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <ApplicationBoot_UART_CheckReceive+0xa8>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d001      	beq.n	80035c2 <ApplicationBoot_UART_CheckReceive+0x1e>
 80035be:	2b05      	cmp	r3, #5
                UART_Reset_Data(&Receive);
                UART_Send_ACK(&ACK_DATA);
	    	}
	    	break;
	    case _BOOT_END_:
	    	break;
 80035c0:	e03f      	b.n	8003642 <ApplicationBoot_UART_CheckReceive+0x9e>
	    	if (strstr( (char*)Receive.DataArray, (char*)"end") != NULL)
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <ApplicationBoot_UART_CheckReceive+0xac>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4923      	ldr	r1, [pc, #140]	; (8003654 <ApplicationBoot_UART_CheckReceive+0xb0>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fa15 	bl	80039f8 <strstr>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <ApplicationBoot_UART_CheckReceive+0x46>
	    		HAL_FLASH_Lock();
 80035d4:	f7fd fd4e 	bl	8001074 <HAL_FLASH_Lock>
	    		UART_Reset_Data(&Receive);
 80035d8:	481d      	ldr	r0, [pc, #116]	; (8003650 <ApplicationBoot_UART_CheckReceive+0xac>)
 80035da:	f000 f917 	bl	800380c <UART_Reset_Data>
	    		UART_Send_ACK(&ACK_END);
 80035de:	481e      	ldr	r0, [pc, #120]	; (8003658 <ApplicationBoot_UART_CheckReceive+0xb4>)
 80035e0:	f000 f94a 	bl	8003878 <UART_Send_ACK>
		    	HAL_NVIC_SystemReset();
 80035e4:	f7fd fc2d 	bl	8000e42 <HAL_NVIC_SystemReset>
	    	break;
 80035e8:	e02a      	b.n	8003640 <ApplicationBoot_UART_CheckReceive+0x9c>
                LoadValue = Convert_Hex_to_Int2(Receive.DataArray, 8);
 80035ea:	4b19      	ldr	r3, [pc, #100]	; (8003650 <ApplicationBoot_UART_CheckReceive+0xac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2108      	movs	r1, #8
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff fe67 	bl	80032c4 <Convert_Hex_to_Int2>
 80035f6:	e9c7 0100 	strd	r0, r1, [r7]
                ApplicationBoot_Flash_Program (boot_address, LoadValue);
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <ApplicationBoot_UART_CheckReceive+0xb8>)
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003602:	4608      	mov	r0, r1
 8003604:	f000 f832 	bl	800366c <ApplicationBoot_Flash_Program>
                boot_address = boot_address + 4;
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <ApplicationBoot_UART_CheckReceive+0xb8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3304      	adds	r3, #4
 800360e:	4a13      	ldr	r2, [pc, #76]	; (800365c <ApplicationBoot_UART_CheckReceive+0xb8>)
 8003610:	6013      	str	r3, [r2, #0]
                HAL_UART_Transmit(&huart4, Receive.DataArray, Receive.ui16_length, 500);
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <ApplicationBoot_UART_CheckReceive+0xac>)
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <ApplicationBoot_UART_CheckReceive+0xac>)
 8003618:	889b      	ldrh	r3, [r3, #4]
 800361a:	b29a      	uxth	r2, r3
 800361c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003620:	480f      	ldr	r0, [pc, #60]	; (8003660 <ApplicationBoot_UART_CheckReceive+0xbc>)
 8003622:	f7fe fed4 	bl	80023ce <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart4, (uint8_t*)"\r\n", 2, 500);
 8003626:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800362a:	2202      	movs	r2, #2
 800362c:	490d      	ldr	r1, [pc, #52]	; (8003664 <ApplicationBoot_UART_CheckReceive+0xc0>)
 800362e:	480c      	ldr	r0, [pc, #48]	; (8003660 <ApplicationBoot_UART_CheckReceive+0xbc>)
 8003630:	f7fe fecd 	bl	80023ce <HAL_UART_Transmit>
                UART_Reset_Data(&Receive);
 8003634:	4806      	ldr	r0, [pc, #24]	; (8003650 <ApplicationBoot_UART_CheckReceive+0xac>)
 8003636:	f000 f8e9 	bl	800380c <UART_Reset_Data>
                UART_Send_ACK(&ACK_DATA);
 800363a:	480b      	ldr	r0, [pc, #44]	; (8003668 <ApplicationBoot_UART_CheckReceive+0xc4>)
 800363c:	f000 f91c 	bl	8003878 <UART_Send_ACK>
	    	break;
 8003640:	bf00      	nop
	}
	return 1;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000030 	.word	0x20000030
 8003650:	20000060 	.word	0x20000060
 8003654:	08003a84 	.word	0x08003a84
 8003658:	20000024 	.word	0x20000024
 800365c:	20000034 	.word	0x20000034
 8003660:	2000010c 	.word	0x2000010c
 8003664:	08003a88 	.word	0x08003a88
 8003668:	20000018 	.word	0x20000018

0800366c <ApplicationBoot_Flash_Program>:



uint8_t ApplicationBoot_Flash_Program (uint32_t Address, uint64_t Data)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	e9c7 2300 	strd	r2, r3, [r7]
//	HAL_FLASH_Unlock();

	//Wait for last operation to be completed
    FLASH_WaitForLastOperation(1000);
 8003678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800367c:	f7fd fd0a 	bl	8001094 <FLASH_WaitForLastOperation>
	uint8_t a;
	a = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, Data);
 8003680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	2002      	movs	r0, #2
 8003688:	f7fd fc7e 	bl	8000f88 <HAL_FLASH_Program>
 800368c:	4603      	mov	r3, r0
 800368e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(20);
 8003690:	2014      	movs	r0, #20
 8003692:	f7fd fa97 	bl	8000bc4 <HAL_Delay>
	if ( a != HAL_OK)
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <ApplicationBoot_Flash_Program+0x34>
		return 0;
 800369c:	2300      	movs	r3, #0
 800369e:	e003      	b.n	80036a8 <ApplicationBoot_Flash_Program+0x3c>
	HAL_Delay(20);
 80036a0:	2014      	movs	r0, #20
 80036a2:	f7fd fa8f 	bl	8000bc4 <HAL_Delay>
//	HAL_FLASH_Lock();
	return 1;
 80036a6:	2301      	movs	r3, #1
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <ApplicationBoot_Jumpto_ApplicationProgram>:

uint8_t ApplicationBoot_Jumpto_ApplicationProgram(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
	/* Turn off Peripheral, Clear Interrupt Flag*/
	HAL_RCC_DeInit();
 80036b6:	f7fe fd6f 	bl	8002198 <HAL_RCC_DeInit>

	/* Clear Pending Interrupt Request, turn  off System Tick*/
	HAL_DeInit();
 80036ba:	f7fd f9ff 	bl	8000abc <HAL_DeInit>
//	SCB_SHCSR_BUSFAULTENA_Msk | \
//	SCB_SHCSR_MEMFAULTENA_Msk ) ;

	   /* Set Main Stack Pointer*/
	//__set_MSP(*(volatile uint32_t*) (0x08010000));
	void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08010000 + 4U)));
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <ApplicationBoot_Jumpto_ApplicationProgram+0x44>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	607b      	str	r3, [r7, #4]
	__set_MSP(*(volatile uint32_t*) (0x08010000));
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <ApplicationBoot_Jumpto_ApplicationProgram+0x48>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	f383 8808 	msr	MSP, r3
}
 80036d0:	bf00      	nop
	SCB->VTOR = 0x08010000;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <ApplicationBoot_Jumpto_ApplicationProgram+0x4c>)
 80036d4:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <ApplicationBoot_Jumpto_ApplicationProgram+0x48>)
 80036d6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(LED_START_GPIO_Port, LED_START_Pin, GPIO_PIN_RESET);
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036de:	4808      	ldr	r0, [pc, #32]	; (8003700 <ApplicationBoot_Jumpto_ApplicationProgram+0x50>)
 80036e0:	f7fe f8c6 	bl	8001870 <HAL_GPIO_WritePin>
	app_reset_handler();
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4798      	blx	r3
	return 1;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	08010004 	.word	0x08010004
 80036f8:	08010000 	.word	0x08010000
 80036fc:	e000ed00 	.word	0xe000ed00
 8003700:	40020c00 	.word	0x40020c00

08003704 <ApplicationBoot_EraseFlash_ApplicationProgram>:

uint8_t ApplicationBoot_EraseFlash_ApplicationProgram(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0

    if (HAL_FLASHEx_Erase(&EraseStruct, &Sector_Fault) != HAL_OK)
 8003708:	4906      	ldr	r1, [pc, #24]	; (8003724 <ApplicationBoot_EraseFlash_ApplicationProgram+0x20>)
 800370a:	4807      	ldr	r0, [pc, #28]	; (8003728 <ApplicationBoot_EraseFlash_ApplicationProgram+0x24>)
 800370c:	f7fd fdf2 	bl	80012f4 <HAL_FLASHEx_Erase>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <ApplicationBoot_EraseFlash_ApplicationProgram+0x1a>
    {
    	return Sector_Fault;
 8003716:	4b03      	ldr	r3, [pc, #12]	; (8003724 <ApplicationBoot_EraseFlash_ApplicationProgram+0x20>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e000      	b.n	8003720 <ApplicationBoot_EraseFlash_ApplicationProgram+0x1c>
    }
    else
	return 1;
 800371e:	2301      	movs	r3, #1
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000174 	.word	0x20000174
 8003728:	20000038 	.word	0x20000038

0800372c <GPIO_Led_BootStart_Notify>:
	HAL_GPIO_WritePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin, GPIO_PIN_SET);
 	return 1;
}

uint8_t GPIO_Led_BootStart_Notify(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 10; i++)
 8003732:	2300      	movs	r3, #0
 8003734:	71fb      	strb	r3, [r7, #7]
 8003736:	e00a      	b.n	800374e <GPIO_Led_BootStart_Notify+0x22>
	{
	  HAL_GPIO_TogglePin(LED_START_GPIO_Port, LED_START_Pin);
 8003738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800373c:	480b      	ldr	r0, [pc, #44]	; (800376c <GPIO_Led_BootStart_Notify+0x40>)
 800373e:	f7fe f8b0 	bl	80018a2 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8003742:	20c8      	movs	r0, #200	; 0xc8
 8003744:	f7fd fa3e 	bl	8000bc4 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++)
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	3301      	adds	r3, #1
 800374c:	71fb      	strb	r3, [r7, #7]
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	2b09      	cmp	r3, #9
 8003752:	d9f1      	bls.n	8003738 <GPIO_Led_BootStart_Notify+0xc>
	}
	HAL_GPIO_WritePin(LED_START_GPIO_Port, LED_START_Pin, GPIO_PIN_SET);
 8003754:	2201      	movs	r2, #1
 8003756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800375a:	4804      	ldr	r0, [pc, #16]	; (800376c <GPIO_Led_BootStart_Notify+0x40>)
 800375c:	f7fe f888 	bl	8001870 <HAL_GPIO_WritePin>
 	return 1;
 8003760:	2301      	movs	r3, #1
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40020c00 	.word	0x40020c00

08003770 <GPIO_Led_Initial>:
	HAL_GPIO_WritePin(LED_DATA_GPIO_Port, LED_DATA_Pin, GPIO_PIN_RESET);
	return 1;
}

uint8_t GPIO_Led_Initial(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 60; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	71fb      	strb	r3, [r7, #7]
 800377a:	e00b      	b.n	8003794 <GPIO_Led_Initial+0x24>
    {
    	HAL_GPIO_TogglePin(LED_DATA_GPIO_Port, LED_START_Pin|LED_DATA_Pin|LED_ERROR_Pin|LED_STOP_Pin);
 800377c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003780:	4808      	ldr	r0, [pc, #32]	; (80037a4 <GPIO_Led_Initial+0x34>)
 8003782:	f7fe f88e 	bl	80018a2 <HAL_GPIO_TogglePin>
    	HAL_Delay(500);
 8003786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800378a:	f7fd fa1b 	bl	8000bc4 <HAL_Delay>
    for (uint8_t i = 0; i < 60; i++)
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	3301      	adds	r3, #1
 8003792:	71fb      	strb	r3, [r7, #7]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	2b3b      	cmp	r3, #59	; 0x3b
 8003798:	d9f0      	bls.n	800377c <GPIO_Led_Initial+0xc>
    }
    return 1;
 800379a:	2301      	movs	r3, #1
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40020c00 	.word	0x40020c00

080037a8 <UART_Additional_Init>:
	.LengthArray = NULL,
};


uint8_t UART_Additional_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart5, &ReceiveVar, 1);
 80037ac:	2201      	movs	r2, #1
 80037ae:	4903      	ldr	r1, [pc, #12]	; (80037bc <UART_Additional_Init+0x14>)
 80037b0:	4803      	ldr	r0, [pc, #12]	; (80037c0 <UART_Additional_Init+0x18>)
 80037b2:	f7fe fe9e 	bl	80024f2 <HAL_UART_Receive_IT>
	return 1;
 80037b6:	2301      	movs	r3, #1
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200000c2 	.word	0x200000c2
 80037c0:	200000c8 	.word	0x200000c8

080037c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	*(Receive.DataArray + Receive.ui16_length) = ReceiveVar;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_UART_RxCpltCallback+0x3c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <HAL_UART_RxCpltCallback+0x3c>)
 80037d2:	8892      	ldrh	r2, [r2, #4]
 80037d4:	b292      	uxth	r2, r2
 80037d6:	4413      	add	r3, r2
 80037d8:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <HAL_UART_RxCpltCallback+0x40>)
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	701a      	strb	r2, [r3, #0]
	Receive.ui16_length++;
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_UART_RxCpltCallback+0x3c>)
 80037e0:	889b      	ldrh	r3, [r3, #4]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3301      	adds	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_UART_RxCpltCallback+0x3c>)
 80037ea:	809a      	strh	r2, [r3, #4]
	HAL_UART_Receive_IT(&huart5, &ReceiveVar, 1);
 80037ec:	2201      	movs	r2, #1
 80037ee:	4905      	ldr	r1, [pc, #20]	; (8003804 <HAL_UART_RxCpltCallback+0x40>)
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <HAL_UART_RxCpltCallback+0x44>)
 80037f2:	f7fe fe7e 	bl	80024f2 <HAL_UART_Receive_IT>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000060 	.word	0x20000060
 8003804:	200000c2 	.word	0x200000c2
 8003808:	200000c8 	.word	0x200000c8

0800380c <UART_Reset_Data>:

void UART_Reset_Data (sData *Data)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
	Data->ui16_length = 0;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	809a      	strh	r2, [r3, #4]
	for (uint8_t i = 0; i < 50; i++)
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e008      	b.n	8003832 <UART_Reset_Data+0x26>
	{
		*(Data->DataArray + i) = 0x00;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	4413      	add	r3, r2
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 50; i++)
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	3301      	adds	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	2b31      	cmp	r3, #49	; 0x31
 8003836:	d9f3      	bls.n	8003820 <UART_Reset_Data+0x14>
	}
	for (uint8_t i = 0; i < 5; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	73bb      	strb	r3, [r7, #14]
 800383c:	e008      	b.n	8003850 <UART_Reset_Data+0x44>
	{
		*(Data->LengthArray + i) = 0x00;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	7bbb      	ldrb	r3, [r7, #14]
 8003844:	4413      	add	r3, r2
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 5; i++)
 800384a:	7bbb      	ldrb	r3, [r7, #14]
 800384c:	3301      	adds	r3, #1
 800384e:	73bb      	strb	r3, [r7, #14]
 8003850:	7bbb      	ldrb	r3, [r7, #14]
 8003852:	2b04      	cmp	r3, #4
 8003854:	d9f3      	bls.n	800383e <UART_Reset_Data+0x32>
	}
	if (Data == &Receive)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a05      	ldr	r2, [pc, #20]	; (8003870 <UART_Reset_Data+0x64>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d102      	bne.n	8003864 <UART_Reset_Data+0x58>
	{
		ui16_PrevReceive = 0;
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <UART_Reset_Data+0x68>)
 8003860:	2200      	movs	r2, #0
 8003862:	801a      	strh	r2, [r3, #0]
	}
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	20000060 	.word	0x20000060
 8003874:	200000c4 	.word	0x200000c4

08003878 <UART_Send_ACK>:

uint8_t UART_Send_ACK( sData *ACK )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
    UART_Transmit_Data( ACK );
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f805 	bl	8003890 <UART_Transmit_Data>
	return 1;
 8003886:	2301      	movs	r3, #1
}
 8003888:	4618      	mov	r0, r3
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_Transmit_Data>:

uint8_t UART_Transmit_Data (sData *Data)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, Data->LengthArray, 5, 500);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038a0:	2205      	movs	r2, #5
 80038a2:	480b      	ldr	r0, [pc, #44]	; (80038d0 <UART_Transmit_Data+0x40>)
 80038a4:	f7fe fd93 	bl	80023ce <HAL_UART_Transmit>
	HAL_Delay(5);
 80038a8:	2005      	movs	r0, #5
 80038aa:	f7fd f98b 	bl	8000bc4 <HAL_Delay>
    HAL_UART_Transmit(&huart5, Data->DataArray, Data->ui16_length, 500);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	889a      	ldrh	r2, [r3, #4]
 80038b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80038ba:	4805      	ldr	r0, [pc, #20]	; (80038d0 <UART_Transmit_Data+0x40>)
 80038bc:	f7fe fd87 	bl	80023ce <HAL_UART_Transmit>
    HAL_Delay(5);
 80038c0:	2005      	movs	r0, #5
 80038c2:	f7fd f97f 	bl	8000bc4 <HAL_Delay>
	return 1;
 80038c6:	2301      	movs	r3, #1
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	200000c8 	.word	0x200000c8

080038d4 <Q_push_data_to_queue>:
		.address = aQueueSimtoSend,
		.value = 0,
};

uint8_t Q_push_data_to_queue(sQueue_Struct_TypeDef *sQueue, uint8_t value)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
	if (sQueue->number >= QUEUE_SIZE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	2b1d      	cmp	r3, #29
 80038e6:	d901      	bls.n	80038ec <Q_push_data_to_queue+0x18>
		return 0;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e01d      	b.n	8003928 <Q_push_data_to_queue+0x54>
	*(sQueue->address + sQueue->head) = value;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	7852      	ldrb	r2, [r2, #1]
 80038f4:	4413      	add	r3, r2
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	701a      	strb	r2, [r3, #0]
	sQueue->value = value;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	721a      	strb	r2, [r3, #8]

	sQueue->number += 1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	78db      	ldrb	r3, [r3, #3]
 8003904:	3301      	adds	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	70da      	strb	r2, [r3, #3]
	sQueue->head += 1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	3301      	adds	r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	705a      	strb	r2, [r3, #1]
	if (sQueue->head >= QUEUE_SIZE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	2b1d      	cmp	r3, #29
 800391e:	d902      	bls.n	8003926 <Q_push_data_to_queue+0x52>
		sQueue->head = 0;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	705a      	strb	r2, [r3, #1]

	return 1;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <Q_get_data_from_queue>:

uint8_t Q_get_data_from_queue(sQueue_Struct_TypeDef *sQueue, uint8_t Type)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]

	if (sQueue->number == 0)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	78db      	ldrb	r3, [r3, #3]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <Q_get_data_from_queue+0x1c>
			return 0;
 800394c:	2300      	movs	r3, #0
 800394e:	e020      	b.n	8003992 <Q_get_data_from_queue+0x5e>
	value = *(sQueue->address + sQueue->tail);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	7892      	ldrb	r2, [r2, #2]
 8003958:	4413      	add	r3, r2
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	73fb      	strb	r3, [r7, #15]
	sQueue->value = value;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	721a      	strb	r2, [r3, #8]

	if (Type > 0) // clear
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d012      	beq.n	8003990 <Q_get_data_from_queue+0x5c>
	{
		sQueue->number -= 1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	78db      	ldrb	r3, [r3, #3]
 800396e:	3b01      	subs	r3, #1
 8003970:	b2da      	uxtb	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	70da      	strb	r2, [r3, #3]
		sQueue->tail += 1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	789b      	ldrb	r3, [r3, #2]
 800397a:	3301      	adds	r3, #1
 800397c:	b2da      	uxtb	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	709a      	strb	r2, [r3, #2]
		if (sQueue->tail >= QUEUE_SIZE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	789b      	ldrb	r3, [r3, #2]
 8003986:	2b1d      	cmp	r3, #29
 8003988:	d902      	bls.n	8003990 <Q_get_data_from_queue+0x5c>
			sQueue->tail = 0;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	709a      	strb	r2, [r3, #2]
	}
	return value;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <__libc_init_array>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	4d0d      	ldr	r5, [pc, #52]	; (80039d8 <__libc_init_array+0x38>)
 80039a4:	4c0d      	ldr	r4, [pc, #52]	; (80039dc <__libc_init_array+0x3c>)
 80039a6:	1b64      	subs	r4, r4, r5
 80039a8:	10a4      	asrs	r4, r4, #2
 80039aa:	2600      	movs	r6, #0
 80039ac:	42a6      	cmp	r6, r4
 80039ae:	d109      	bne.n	80039c4 <__libc_init_array+0x24>
 80039b0:	4d0b      	ldr	r5, [pc, #44]	; (80039e0 <__libc_init_array+0x40>)
 80039b2:	4c0c      	ldr	r4, [pc, #48]	; (80039e4 <__libc_init_array+0x44>)
 80039b4:	f000 f838 	bl	8003a28 <_init>
 80039b8:	1b64      	subs	r4, r4, r5
 80039ba:	10a4      	asrs	r4, r4, #2
 80039bc:	2600      	movs	r6, #0
 80039be:	42a6      	cmp	r6, r4
 80039c0:	d105      	bne.n	80039ce <__libc_init_array+0x2e>
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c8:	4798      	blx	r3
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7ee      	b.n	80039ac <__libc_init_array+0xc>
 80039ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d2:	4798      	blx	r3
 80039d4:	3601      	adds	r6, #1
 80039d6:	e7f2      	b.n	80039be <__libc_init_array+0x1e>
 80039d8:	08003aac 	.word	0x08003aac
 80039dc:	08003aac 	.word	0x08003aac
 80039e0:	08003aac 	.word	0x08003aac
 80039e4:	08003ab0 	.word	0x08003ab0

080039e8 <memset>:
 80039e8:	4402      	add	r2, r0
 80039ea:	4603      	mov	r3, r0
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d100      	bne.n	80039f2 <memset+0xa>
 80039f0:	4770      	bx	lr
 80039f2:	f803 1b01 	strb.w	r1, [r3], #1
 80039f6:	e7f9      	b.n	80039ec <memset+0x4>

080039f8 <strstr>:
 80039f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039fa:	780c      	ldrb	r4, [r1, #0]
 80039fc:	b164      	cbz	r4, 8003a18 <strstr+0x20>
 80039fe:	4603      	mov	r3, r0
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	1c5e      	adds	r6, r3, #1
 8003a06:	b90a      	cbnz	r2, 8003a0c <strstr+0x14>
 8003a08:	4610      	mov	r0, r2
 8003a0a:	e005      	b.n	8003a18 <strstr+0x20>
 8003a0c:	4294      	cmp	r4, r2
 8003a0e:	d108      	bne.n	8003a22 <strstr+0x2a>
 8003a10:	460d      	mov	r5, r1
 8003a12:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003a16:	b902      	cbnz	r2, 8003a1a <strstr+0x22>
 8003a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a1a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003a1e:	4297      	cmp	r7, r2
 8003a20:	d0f7      	beq.n	8003a12 <strstr+0x1a>
 8003a22:	4633      	mov	r3, r6
 8003a24:	e7ec      	b.n	8003a00 <strstr+0x8>
	...

08003a28 <_init>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr

08003a34 <_fini>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	bf00      	nop
 8003a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3a:	bc08      	pop	{r3}
 8003a3c:	469e      	mov	lr, r3
 8003a3e:	4770      	bx	lr
