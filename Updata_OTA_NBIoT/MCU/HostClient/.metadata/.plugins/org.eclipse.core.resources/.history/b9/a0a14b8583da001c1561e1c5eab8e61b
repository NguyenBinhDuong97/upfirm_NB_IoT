#include "main.h"
#include "stdio.h"
#include "string.h"
#include "gpio.h"
#include "usart.h"
#include "my_uart.h" 
#include "my_lib.h"

char num_array[100];
/* hai ham nay duoc dung de chuyen tu dang so sang dang char */
void itoa(int value, char* str, int base) {
	
	static char num[] = "0123456789abcdefghijklmnopqrstuvwxyz";
	
	char* wstr=str;
	
	int sign;
	


	
	// Validate base
	
	if (base<2 || base>35){ *wstr='\0'; return; }
	

	
	// Take care of sign
	
	if ((sign=value) < 0) value = -value;
	


	
	// Conversion. Number is reversed.
	
	do *wstr++ = num[value%base]; while(value/=base);
	
	if(sign<0) *wstr++='-';
	
	*wstr='\0';
	

	
	// Reverse string

	
	strreverse(str,wstr-1);
	
}
void strreverse(char* begin, char* end) {
	
	char aux;
	
	while(end>begin)
	
		aux=*end, *end--=*begin, *begin++=aux;
	
}

/**
  * @brief   Search string in a source array
  * @param   src point to source array need to be searched
  * @param   src_len length of source array
  * @param   string point to string need to search in source array
  * @param   string_len length of string use to search
  * @retval  TRUE success finding
             FALSE fail finding
*/

uint8_t Search_String_In_Buffer ( uint8_t *src , uint16_t src_len , uint8_t *string , uint16_t string_len )
{
	uint8_t *pointer1;
	uint8_t *pointer2;
	uint16_t k = 0;
	
  pointer1 = src;
	pointer2 = string;
	uint16_t j = 0;
	for ( uint16_t m = 0 ; m < src_len ; m++ )
	{
		if ( *pointer1 == *pointer2 )
		{
			j = 0;
			k = 0;
			for ( j = 0 ; j < string_len ; j++ )
			{
				if ( *(pointer1) != *(pointer2+j) )
					break;
				else 
					k++;
					m++;
				  pointer1++;
			}
		}
		else
		pointer1++;
	}
	if ( k == (string_len) )
		return TRUE;
	else
		return FALSE;
}
/**
  * @brief Search and return begin location start of string need to find in a source array
*/
//uint8_t *pointer_result = NULL;
uint8_t *Search_String_Location_In_Buffer ( uint8_t *src , uint16_t src_len , uint8_t *string , uint16_t string_len )
{
//	pointer_result = NULL;
	static uint8_t *pointer_result = NULL;
	
	uint8_t *pointer1 = NULL;
	uint8_t *pointer2 = NULL;
	uint8_t m = 0;
	pointer1 = src;
	pointer2 = string;
	for ( uint16_t i=0 ; i < src_len ; ++i )
	{
		if ( *pointer1 == *pointer2 )
		{
			m++;
			pointer2 = string + m; 
			if ( m == string_len )
			{
			  pointer_result = src + i + 3;
			  return pointer_result;
		  }	
		}
		else
		{
			m = 0;
		}
		pointer1++;
 	}
	return NULL;
}

/**
  * @brief   Reset buffer that was pointed to
  * @param   uint8_t *buffer: Pointer point to buffer that need to reset
  * @retval  NULL
*/
void Reset_Buffer ( uint8_t *buffer , uint16_t length_buf )
{
	for ( uint16_t i = 0 ; i < length_buf ; i++ )
	{
		*(buffer+i) = 0x00;
	}
}

/** 
  * @brief   Change interger to char then put into an array
  * @param   buffer point to array that contain converted char elements
  * @param   numb the number need to convert
  * @param   length_buf the max elements of arrays
  * @retval  NULL
*/
void Interger_To_Char ( uint32_t numb , uint8_t *buffer , uint16_t length_buf  )
{
	Reset_Buffer ( buffer , length_buf );
  itoa ( numb , (char*)buffer , 10 );
}


